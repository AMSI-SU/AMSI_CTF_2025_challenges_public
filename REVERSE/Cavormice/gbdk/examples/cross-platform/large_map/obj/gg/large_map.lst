                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module large_map
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _init_camera
                                     13 	.globl _set_camera
                                     14 	.globl _set_tile_submap
                                     15 	.globl _set_native_tile_data
                                     16 	.globl _set_palette
                                     17 	.globl _joypad
                                     18 	.globl _vsync
                                     19 	.globl _redraw
                                     20 	.globl _old_map_pos_y
                                     21 	.globl _old_map_pos_x
                                     22 	.globl _map_pos_y
                                     23 	.globl _map_pos_x
                                     24 	.globl _old_camera_y
                                     25 	.globl _old_camera_x
                                     26 	.globl _camera_y
                                     27 	.globl _camera_x
                                     28 	.globl _joy
                                     29 ;--------------------------------------------------------
                                     30 ; special function registers
                                     31 ;--------------------------------------------------------
                         00000000    32 _GG_STATE	=	0x0000
                         00000001    33 _GG_EXT_7BIT	=	0x0001
                         00000002    34 _GG_EXT_CTL	=	0x0002
                         00000003    35 _GG_SIO_SEND	=	0x0003
                         00000004    36 _GG_SIO_RECV	=	0x0004
                         00000005    37 _GG_SIO_CTL	=	0x0005
                         00000006    38 _GG_SOUND_PAN	=	0x0006
                         0000003E    39 _MEMORY_CTL	=	0x003e
                         0000003F    40 _JOY_CTL	=	0x003f
                         0000007E    41 _VCOUNTER	=	0x007e
                         0000007F    42 _PSG	=	0x007f
                         0000007F    43 _HCOUNTER	=	0x007f
                         000000BE    44 _VDP_DATA	=	0x00be
                         000000BF    45 _VDP_CMD	=	0x00bf
                         000000BF    46 _VDP_STATUS	=	0x00bf
                         000000DC    47 _JOY_PORT1	=	0x00dc
                         000000DD    48 _JOY_PORT2	=	0x00dd
                         000000F0    49 _FMADDRESS	=	0x00f0
                         000000F1    50 _FMDATA	=	0x00f1
                         000000F2    51 _AUDIOCTRL	=	0x00f2
                                     52 ;--------------------------------------------------------
                                     53 ; ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area _DATA
                         0000FFFC    56 _RAM_CONTROL	=	0xfffc
                         0000FFF8    57 _GLASSES_3D	=	0xfff8
                         0000FFFD    58 _MAP_FRAME0	=	0xfffd
                         0000FFFE    59 _MAP_FRAME1	=	0xfffe
                         0000FFFF    60 _MAP_FRAME2	=	0xffff
    00000000                         61 _joy::
    00000000                         62 	.ds 1
    00000001                         63 _camera_x::
    00000001                         64 	.ds 2
    00000003                         65 _camera_y::
    00000003                         66 	.ds 2
    00000005                         67 _old_camera_x::
    00000005                         68 	.ds 2
    00000007                         69 _old_camera_y::
    00000007                         70 	.ds 2
    00000009                         71 _map_pos_x::
    00000009                         72 	.ds 1
    0000000A                         73 _map_pos_y::
    0000000A                         74 	.ds 1
    0000000B                         75 _old_map_pos_x::
    0000000B                         76 	.ds 1
    0000000C                         77 _old_map_pos_y::
    0000000C                         78 	.ds 1
    0000000D                         79 _redraw::
    0000000D                         80 	.ds 1
                                     81 ;--------------------------------------------------------
                                     82 ; ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area _INITIALIZED
                                     85 ;--------------------------------------------------------
                                     86 ; absolute external ram data
                                     87 ;--------------------------------------------------------
                                     88 	.area _DABS (ABS)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area _HOME
                                     93 	.area _GSINIT
                                     94 	.area _GSFINAL
                                     95 	.area _GSINIT
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area _HOME
                                    100 	.area _HOME
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area _CODE
                                    105 ;src/large_map.c:82: void set_camera(void)
                                    106 ;	---------------------------------
                                    107 ; Function set_camera
                                    108 ; ---------------------------------
    00000000                        109 _set_camera::
    00000000 DD E5            [15]  110 	push	ix
    00000002 DD 21 00 00      [14]  111 	ld	ix,#0
    00000006 DD 39            [15]  112 	add	ix,sp
    00000008 3B               [ 6]  113 	dec	sp
                                    114 ;src/large_map.c:85: move_bkg(camera_x, WRAP_SCROLL_Y(camera_y + SCROLL_Y_OFFSET));
    00000009 2Ar03r00         [16]  115 	ld	hl, (_camera_y)
    0000000C 11 E0 00         [10]  116 	ld	de, #0x00e0
    0000000F CDr00r00         [17]  117 	call	__moduint
    00000012 3Ar01r00         [13]  118 	ld	a, (_camera_x+0)
                                    119 ;../../../include/sms/sms.h:223: __WRITE_VDP_REG(VDP_RSCX, -x);
    00000015 21r00r00         [10]  120 	ld	hl, #_shadow_VDP_RSCX
    00000018 ED 44            [ 8]  121 	neg
    0000001A 77               [ 7]  122 	ld	(hl), a
    0000001B F3               [ 4]  123 	di
    0000001C 3Ar00r00         [13]  124 	ld	a, (_shadow_VDP_RSCX+0)
    0000001F D3 BF            [11]  125 	out	(_VDP_CMD), a
    00000021 3E 88            [ 7]  126 	ld	a, #0x88
    00000023 D3 BF            [11]  127 	out	(_VDP_CMD), a
    00000025 FB               [ 4]  128 	ei
                                    129 ;../../../include/sms/sms.h:224: __WRITE_VDP_REG(VDP_RSCY, y);
    00000026 FD 21r00r00      [14]  130 	ld	iy, #_shadow_VDP_RSCY
    0000002A FD 73 00         [19]  131 	ld	0 (iy), e
    0000002D F3               [ 4]  132 	di
    0000002E 3Ar00r00         [13]  133 	ld	a, (_shadow_VDP_RSCY+0)
    00000031 D3 BF            [11]  134 	out	(_VDP_CMD), a
    00000033 3E 89            [ 7]  135 	ld	a, #0x89
    00000035 D3 BF            [11]  136 	out	(_VDP_CMD), a
    00000037 FB               [ 4]  137 	ei
                                    138 ;src/large_map.c:87: map_pos_y = (uint8_t)(camera_y >> 3u);
    00000038 2Ar03r00         [16]  139 	ld	hl, (_camera_y)
    0000003B CB 3C            [ 8]  140 	srl	h
    0000003D CB 1D            [ 8]  141 	rr	l
    0000003F CB 3C            [ 8]  142 	srl	h
    00000041 CB 1D            [ 8]  143 	rr	l
    00000043 CB 3C            [ 8]  144 	srl	h
    00000045 CB 1D            [ 8]  145 	rr	l
    00000047 7D               [ 4]  146 	ld	a, l
    00000048 32r0Ar00         [13]  147 	ld	(#_map_pos_y), a
                                    148 ;src/large_map.c:88: if (map_pos_y != old_map_pos_y)
    0000004B 3Ar0Ar00         [13]  149 	ld	a, (_map_pos_y+0)
    0000004E 21r0Cr00         [10]  150 	ld	hl, #_old_map_pos_y
    00000051 96               [ 7]  151 	sub	a, (hl)
    00000052 CArDAr00         [10]  152 	jp	Z,00107$
                                    153 ;src/large_map.c:92: set_submap_indices(
    00000055 3Ar09r00         [13]  154 	ld	a, (_map_pos_x+0)
    00000058 47               [ 4]  155 	ld	b, a
    00000059 16 00            [ 7]  156 	ld	d, #0x00
    0000005B 21r09r00         [10]  157 	ld	hl, #_map_pos_x
    0000005E 3E 9C            [ 7]  158 	ld	a, #0x9c
    00000060 96               [ 7]  159 	sub	a, (hl)
    00000061 4F               [ 4]  160 	ld	c, a
    00000062 3Ar0Ar00         [13]  161 	ld	a, (_map_pos_y+0)
    00000065 5F               [ 4]  162 	ld	e, a
    00000066 3E 9C            [ 7]  163 	ld	a, #0x9c
    00000068 90               [ 4]  164 	sub	a, b
    00000069 47               [ 4]  165 	ld	b, a
    0000006A 9F               [ 4]  166 	sbc	a, a
    0000006B 92               [ 4]  167 	sub	a, d
    0000006C 57               [ 4]  168 	ld	d, a
    0000006D 3E 15            [ 7]  169 	ld	a, #0x15
    0000006F B8               [ 4]  170 	cp	a, b
    00000070 3E 00            [ 7]  171 	ld	a, #0x00
    00000072 9A               [ 4]  172 	sbc	a, d
    00000073 E2r78r00         [10]  173 	jp	PO, 00201$
    00000076 EE 80            [ 7]  174 	xor	a, #0x80
    00000078                        175 00201$:
    00000078 07               [ 4]  176 	rlca
    00000079 E6 01            [ 7]  177 	and	a,#0x01
    0000007B 47               [ 4]  178 	ld	b, a
                                    179 ;src/large_map.c:90: if (camera_y < old_camera_y)
    0000007C 21r07r00         [10]  180 	ld	hl, #_old_camera_y
    0000007F 3Ar03r00         [13]  181 	ld	a, (_camera_y+0)
    00000082 96               [ 7]  182 	sub	a, (hl)
    00000083 23               [ 6]  183 	inc	hl
    00000084 3Ar04r00         [13]  184 	ld	a, (_camera_y+1)
    00000087 9E               [ 7]  185 	sbc	a, (hl)
    00000088 30 21            [12]  186 	jr	NC, 00104$
                                    187 ;src/large_map.c:92: set_submap_indices(
    0000008A 21r00r00         [10]  188 	ld	hl, #_bigmap_map+0
    0000008D 78               [ 4]  189 	ld	a, b
    0000008E B7               [ 4]  190 	or	a, a
    0000008F 28 04            [12]  191 	jr	Z, 00122$
    00000091 3E 15            [ 7]  192 	ld	a, #0x15
    00000093 18 01            [12]  193 	jr	00123$
    00000095                        194 00122$:
    00000095 79               [ 4]  195 	ld	a, c
    00000096                        196 00123$:
    00000096 E5               [11]  197 	push	hl
    00000097 26 9C            [ 7]  198 	ld	h, #0x9c
                                    199 ;	spillPairReg hl
                                    200 ;	spillPairReg hl
    00000099 E5               [11]  201 	push	hl
    0000009A 33               [ 6]  202 	inc	sp
    0000009B 26 01            [ 7]  203 	ld	h, #0x01
                                    204 ;	spillPairReg hl
                                    205 ;	spillPairReg hl
    0000009D E5               [11]  206 	push	hl
    0000009E 33               [ 6]  207 	inc	sp
    0000009F 57               [ 4]  208 	ld	d,a
    000000A0 D5               [11]  209 	push	de
    000000A1 3Ar09r00         [13]  210 	ld	a, (_map_pos_x+0)
    000000A4 F5               [11]  211 	push	af
    000000A5 33               [ 6]  212 	inc	sp
    000000A6 CDr00r00         [17]  213 	call	_set_tile_submap
    000000A9 18 29            [12]  214 	jr	00105$
    000000AB                        215 00104$:
                                    216 ;src/large_map.c:109: if ((bigmap_mapHeight - DEVICE_SCREEN_HEIGHT) > map_pos_y)
    000000AB 3Ar0Ar00         [13]  217 	ld	a, (_map_pos_y+0)
    000000AE D6 30            [ 7]  218 	sub	a, #0x30
    000000B0 30 22            [12]  219 	jr	NC, 00105$
                                    220 ;src/large_map.c:111: set_submap_indices(
    000000B2 21r00r00         [10]  221 	ld	hl, #_bigmap_map+0
    000000B5 78               [ 4]  222 	ld	a, b
    000000B6 B7               [ 4]  223 	or	a, a
    000000B7 28 02            [12]  224 	jr	Z, 00124$
    000000B9 0E 15            [ 7]  225 	ld	c, #0x15
    000000BB                        226 00124$:
                                    227 ;src/large_map.c:79: return map_pos_y + DEVICE_SCREEN_HEIGHT;
    000000BB 7B               [ 4]  228 	ld	a, e
    000000BC C6 12            [ 7]  229 	add	a, #0x12
                                    230 ;src/large_map.c:111: set_submap_indices(
    000000BE E5               [11]  231 	push	hl
    000000BF 26 9C            [ 7]  232 	ld	h, #0x9c
                                    233 ;	spillPairReg hl
                                    234 ;	spillPairReg hl
    000000C1 E5               [11]  235 	push	hl
    000000C2 33               [ 6]  236 	inc	sp
    000000C3 26 01            [ 7]  237 	ld	h, #0x01
                                    238 ;	spillPairReg hl
                                    239 ;	spillPairReg hl
    000000C5 E5               [11]  240 	push	hl
    000000C6 33               [ 6]  241 	inc	sp
    000000C7 61               [ 4]  242 	ld	h, c
                                    243 ;	spillPairReg hl
                                    244 ;	spillPairReg hl
    000000C8 E5               [11]  245 	push	hl
    000000C9 33               [ 6]  246 	inc	sp
    000000CA F5               [11]  247 	push	af
    000000CB 33               [ 6]  248 	inc	sp
    000000CC 3Ar09r00         [13]  249 	ld	a, (_map_pos_x+0)
    000000CF F5               [11]  250 	push	af
    000000D0 33               [ 6]  251 	inc	sp
    000000D1 CDr00r00         [17]  252 	call	_set_tile_submap
    000000D4                        253 00105$:
                                    254 ;src/large_map.c:127: old_map_pos_y = map_pos_y; 
    000000D4 3Ar0Ar00         [13]  255 	ld	a, (_map_pos_y+0)
    000000D7 32r0Cr00         [13]  256 	ld	(_old_map_pos_y+0), a
    000000DA                        257 00107$:
                                    258 ;src/large_map.c:130: map_pos_x = (uint8_t)(camera_x >> 3u);
    000000DA 2Ar01r00         [16]  259 	ld	hl, (_camera_x)
    000000DD CB 3C            [ 8]  260 	srl	h
    000000DF CB 1D            [ 8]  261 	rr	l
    000000E1 CB 3C            [ 8]  262 	srl	h
    000000E3 CB 1D            [ 8]  263 	rr	l
    000000E5 CB 3C            [ 8]  264 	srl	h
    000000E7 CB 1D            [ 8]  265 	rr	l
    000000E9 7D               [ 4]  266 	ld	a, l
    000000EA 32r09r00         [13]  267 	ld	(#_map_pos_x), a
                                    268 ;src/large_map.c:131: if (map_pos_x != old_map_pos_x)
    000000ED 3Ar09r00         [13]  269 	ld	a, (_map_pos_x+0)
    000000F0 21r0Br00         [10]  270 	ld	hl, #_old_map_pos_x
    000000F3 96               [ 7]  271 	sub	a, (hl)
    000000F4 CAr7Er01         [10]  272 	jp	Z,00114$
                                    273 ;src/large_map.c:135: set_submap_indices(
    000000F7 3Ar0Ar00         [13]  274 	ld	a, (_map_pos_y+0)
    000000FA 5F               [ 4]  275 	ld	e, a
    000000FB 16 00            [ 7]  276 	ld	d, #0x00
    000000FD 21r0Ar00         [10]  277 	ld	hl, #_map_pos_y
    00000100 3E 42            [ 7]  278 	ld	a, #0x42
    00000102 96               [ 7]  279 	sub	a, (hl)
    00000103 4F               [ 4]  280 	ld	c, a
    00000104 3Ar09r00         [13]  281 	ld	a, (_map_pos_x+0)
    00000107 DD 77 FF         [19]  282 	ld	-1 (ix), a
    0000010A 21 42 00         [10]  283 	ld	hl, #0x0042
    0000010D BF               [ 4]  284 	cp	a, a
    0000010E ED 52            [15]  285 	sbc	hl, de
    00000110 3E 13            [ 7]  286 	ld	a, #0x13
    00000112 BD               [ 4]  287 	cp	a, l
    00000113 3E 00            [ 7]  288 	ld	a, #0x00
    00000115 9C               [ 4]  289 	sbc	a, h
    00000116 E2r1Br01         [10]  290 	jp	PO, 00203$
    00000119 EE 80            [ 7]  291 	xor	a, #0x80
    0000011B                        292 00203$:
    0000011B 07               [ 4]  293 	rlca
    0000011C E6 01            [ 7]  294 	and	a,#0x01
    0000011E 5F               [ 4]  295 	ld	e, a
                                    296 ;src/large_map.c:133: if (camera_x < old_camera_x)
    0000011F 21r05r00         [10]  297 	ld	hl, #_old_camera_x
    00000122 3Ar01r00         [13]  298 	ld	a, (_camera_x+0)
    00000125 96               [ 7]  299 	sub	a, (hl)
    00000126 23               [ 6]  300 	inc	hl
    00000127 3Ar02r00         [13]  301 	ld	a, (_camera_x+1)
    0000012A 9E               [ 7]  302 	sbc	a, (hl)
    0000012B 30 24            [12]  303 	jr	NC, 00111$
                                    304 ;src/large_map.c:135: set_submap_indices(
    0000012D 7B               [ 4]  305 	ld	a, e
    0000012E B7               [ 4]  306 	or	a, a
    0000012F 28 04            [12]  307 	jr	Z, 00126$
    00000131 3E 13            [ 7]  308 	ld	a, #0x13
    00000133 18 01            [12]  309 	jr	00127$
    00000135                        310 00126$:
    00000135 79               [ 4]  311 	ld	a, c
    00000136                        312 00127$:
    00000136 21r00r00         [10]  313 	ld	hl, #_bigmap_map
    00000139 E5               [11]  314 	push	hl
    0000013A 26 9C            [ 7]  315 	ld	h, #0x9c
                                    316 ;	spillPairReg hl
                                    317 ;	spillPairReg hl
    0000013C E5               [11]  318 	push	hl
    0000013D 33               [ 6]  319 	inc	sp
    0000013E 67               [ 4]  320 	ld	h, a
    0000013F 2E 01            [ 7]  321 	ld	l, #0x01
    00000141 E5               [11]  322 	push	hl
    00000142 3Ar0Ar00         [13]  323 	ld	a, (_map_pos_y+0)
    00000145 F5               [11]  324 	push	af
    00000146 33               [ 6]  325 	inc	sp
    00000147 DD 7E FF         [19]  326 	ld	a, -1 (ix)
    0000014A F5               [11]  327 	push	af
    0000014B 33               [ 6]  328 	inc	sp
    0000014C CDr00r00         [17]  329 	call	_set_tile_submap
    0000014F 18 27            [12]  330 	jr	00112$
    00000151                        331 00111$:
                                    332 ;src/large_map.c:152: if ((bigmap_mapWidth - DEVICE_SCREEN_WIDTH) > map_pos_x)
    00000151 3Ar09r00         [13]  333 	ld	a, (_map_pos_x+0)
    00000154 D6 88            [ 7]  334 	sub	a, #0x88
    00000156 30 20            [12]  335 	jr	NC, 00112$
                                    336 ;src/large_map.c:154: set_submap_indices(
    00000158 7B               [ 4]  337 	ld	a, e
    00000159 B7               [ 4]  338 	or	a, a
    0000015A 28 02            [12]  339 	jr	Z, 00128$
    0000015C 0E 13            [ 7]  340 	ld	c, #0x13
    0000015E                        341 00128$:
                                    342 ;src/large_map.c:65: return map_pos_x + DEVICE_SCREEN_WIDTH;
    0000015E DD 7E FF         [19]  343 	ld	a, -1 (ix)
    00000161 C6 14            [ 7]  344 	add	a, #0x14
    00000163 5F               [ 4]  345 	ld	e, a
                                    346 ;src/large_map.c:154: set_submap_indices(
    00000164 21r00r00         [10]  347 	ld	hl, #_bigmap_map
    00000167 E5               [11]  348 	push	hl
    00000168 3E 9C            [ 7]  349 	ld	a, #0x9c
    0000016A F5               [11]  350 	push	af
    0000016B 33               [ 6]  351 	inc	sp
    0000016C 61               [ 4]  352 	ld	h, c
    0000016D 2E 01            [ 7]  353 	ld	l, #0x01
    0000016F E5               [11]  354 	push	hl
    00000170 3Ar0Ar00         [13]  355 	ld	a, (_map_pos_y+0)
    00000173 57               [ 4]  356 	ld	d,a
    00000174 D5               [11]  357 	push	de
    00000175 CDr00r00         [17]  358 	call	_set_tile_submap
    00000178                        359 00112$:
                                    360 ;src/large_map.c:170: old_map_pos_x = map_pos_x;
    00000178 3Ar09r00         [13]  361 	ld	a, (_map_pos_x+0)
    0000017B 32r0Br00         [13]  362 	ld	(_old_map_pos_x+0), a
    0000017E                        363 00114$:
                                    364 ;src/large_map.c:173: old_camera_x = camera_x, old_camera_y = camera_y;
    0000017E 2Ar01r00         [16]  365 	ld	hl, (_camera_x)
    00000181 22r05r00         [16]  366 	ld	(_old_camera_x), hl
    00000184 2Ar03r00         [16]  367 	ld	hl, (_camera_y)
    00000187 22r07r00         [16]  368 	ld	(_old_camera_y), hl
                                    369 ;src/large_map.c:174: }
    0000018A 33               [ 6]  370 	inc	sp
    0000018B DD E1            [14]  371 	pop	ix
    0000018D C9               [10]  372 	ret
                                    373 ;src/large_map.c:177: void init_camera(uint8_t x, uint8_t y) {
                                    374 ;	---------------------------------
                                    375 ; Function init_camera
                                    376 ; ---------------------------------
    0000018E                        377 _init_camera::
    0000018E DD E5            [15]  378 	push	ix
    00000190 DD 21 00 00      [14]  379 	ld	ix,#0
    00000194 DD 39            [15]  380 	add	ix,sp
    00000196 F5               [11]  381 	push	af
    00000197 DD 77 FF         [19]  382 	ld	-1 (ix), a
    0000019A DD 75 FE         [19]  383 	ld	-2 (ix), l
                                    384 ;src/large_map.c:180: set_native_tile_data(0, bigmap_TILE_COUNT, bigmap_tiles);
    0000019D 21r00r00         [10]  385 	ld	hl, #_bigmap_tiles
    000001A0 E5               [11]  386 	push	hl
    000001A1 11 D9 00         [10]  387 	ld	de, #0x00d9
    000001A4 21 00 00         [10]  388 	ld	hl, #0x0000
    000001A7 CDr00r00         [17]  389 	call	_set_native_tile_data
                                    390 ;src/large_map.c:184: __WRITE_VDP_REG(VDP_R2, R2_MAP_0x3800);
    000001AA FD 21r00r00      [14]  391 	ld	iy, #_shadow_VDP_R2
    000001AE FD 36 00 FF      [19]  392 	ld	0 (iy), #0xff
    000001B2 F3               [ 4]  393 	di
    000001B3 3E FF            [ 7]  394 	ld	a, #0xff
    000001B5 D3 BF            [11]  395 	out	(_VDP_CMD), a
    000001B7 3E 82            [ 7]  396 	ld	a, #0x82
    000001B9 D3 BF            [11]  397 	out	(_VDP_CMD), a
    000001BB FB               [ 4]  398 	ei
                                    399 ;src/large_map.c:185: __WRITE_VDP_REG(VDP_R5, R5_SAT_0x3F00);
    000001BC FD 21r00r00      [14]  400 	ld	iy, #_shadow_VDP_R5
    000001C0 FD 36 00 FF      [19]  401 	ld	0 (iy), #0xff
    000001C4 F3               [ 4]  402 	di
    000001C5 3E FF            [ 7]  403 	ld	a, #0xff
    000001C7 D3 BF            [11]  404 	out	(_VDP_CMD), a
    000001C9 3E 85            [ 7]  405 	ld	a, #0x85
    000001CB D3 BF            [11]  406 	out	(_VDP_CMD), a
    000001CD FB               [ 4]  407 	ei
                                    408 ;src/large_map.c:186: set_palette(0, bigmap_PALETTE_COUNT, bigmap_palettes);
    000001CE 21r00r00         [10]  409 	ld	hl, #_bigmap_palettes
    000001D1 E5               [11]  410 	push	hl
    000001D2 21 00 01         [10]  411 	ld	hl, #0x100
    000001D5 E5               [11]  412 	push	hl
    000001D6 CDr00r00         [17]  413 	call	_set_palette
                                    414 ;src/large_map.c:197: camera_x = x;
    000001D9 DD 7E FF         [19]  415 	ld	a, -1 (ix)
    000001DC 32r01r00         [13]  416 	ld	(_camera_x+0), a
    000001DF 21r02r00         [10]  417 	ld	hl, #_camera_x + 1
    000001E2 36 00            [10]  418 	ld	(hl), #0x00
                                    419 ;src/large_map.c:198: camera_y = y;
    000001E4 DD 7E FE         [19]  420 	ld	a, -2 (ix)
    000001E7 32r03r00         [13]  421 	ld	(_camera_y+0), a
    000001EA 21r04r00         [10]  422 	ld	hl, #_camera_y + 1
    000001ED 36 00            [10]  423 	ld	(hl), #0x00
                                    424 ;src/large_map.c:200: if (camera_x > camera_max_x) camera_x = camera_max_x;
    000001EF 2Ar01r00         [16]  425 	ld	hl, (_camera_x)
    000001F2 3E 40            [ 7]  426 	ld	a, #0x40
    000001F4 BD               [ 4]  427 	cp	a, l
    000001F5 3E 04            [ 7]  428 	ld	a, #0x04
    000001F7 9C               [ 4]  429 	sbc	a, h
    000001F8 30 06            [12]  430 	jr	NC, 00102$
    000001FA 21 40 04         [10]  431 	ld	hl, #0x0440
    000001FD 22r01r00         [16]  432 	ld	(_camera_x), hl
    00000200                        433 00102$:
                                    434 ;src/large_map.c:201: if (camera_y > camera_max_y) camera_y = camera_max_y;
    00000200 2Ar03r00         [16]  435 	ld	hl, (_camera_y)
    00000203 3E 80            [ 7]  436 	ld	a, #0x80
    00000205 BD               [ 4]  437 	cp	a, l
    00000206 3E 01            [ 7]  438 	ld	a, #0x01
    00000208 9C               [ 4]  439 	sbc	a, h
    00000209 30 06            [12]  440 	jr	NC, 00104$
    0000020B 21 80 01         [10]  441 	ld	hl, #0x0180
    0000020E 22r03r00         [16]  442 	ld	(_camera_y), hl
    00000211                        443 00104$:
                                    444 ;src/large_map.c:202: old_camera_x = camera_x; old_camera_y = camera_y;
    00000211 2Ar01r00         [16]  445 	ld	hl, (_camera_x)
    00000214 22r05r00         [16]  446 	ld	(_old_camera_x), hl
    00000217 2Ar03r00         [16]  447 	ld	hl, (_camera_y)
    0000021A 22r07r00         [16]  448 	ld	(_old_camera_y), hl
                                    449 ;src/large_map.c:204: map_pos_x = camera_x >> 3;
    0000021D 2Ar01r00         [16]  450 	ld	hl, (_camera_x)
    00000220 CB 3C            [ 8]  451 	srl	h
    00000222 CB 1D            [ 8]  452 	rr	l
    00000224 CB 3C            [ 8]  453 	srl	h
    00000226 CB 1D            [ 8]  454 	rr	l
    00000228 CB 3C            [ 8]  455 	srl	h
    0000022A CB 1D            [ 8]  456 	rr	l
    0000022C 7D               [ 4]  457 	ld	a, l
    0000022D 32r09r00         [13]  458 	ld	(#_map_pos_x), a
                                    459 ;src/large_map.c:205: map_pos_y = camera_y >> 3;
    00000230 2Ar03r00         [16]  460 	ld	hl, (_camera_y)
    00000233 CB 3C            [ 8]  461 	srl	h
    00000235 CB 1D            [ 8]  462 	rr	l
    00000237 CB 3C            [ 8]  463 	srl	h
    00000239 CB 1D            [ 8]  464 	rr	l
    0000023B CB 3C            [ 8]  465 	srl	h
    0000023D CB 1D            [ 8]  466 	rr	l
    0000023F 7D               [ 4]  467 	ld	a, l
    00000240 32r0Ar00         [13]  468 	ld	(#_map_pos_y), a
                                    469 ;src/large_map.c:206: old_map_pos_x = old_map_pos_y = 255;
    00000243 21r0Cr00         [10]  470 	ld	hl, #_old_map_pos_y
    00000246 36 FF            [10]  471 	ld	(hl), #0xff
    00000248 21r0Br00         [10]  472 	ld	hl, #_old_map_pos_x
    0000024B 36 FF            [10]  473 	ld	(hl), #0xff
                                    474 ;src/large_map.c:207: move_bkg(camera_x, WRAP_SCROLL_Y(camera_y + SCROLL_Y_OFFSET));
    0000024D 2Ar03r00         [16]  475 	ld	hl, (_camera_y)
    00000250 11 E0 00         [10]  476 	ld	de, #0x00e0
    00000253 CDr00r00         [17]  477 	call	__moduint
    00000256 3Ar01r00         [13]  478 	ld	a, (_camera_x+0)
                                    479 ;../../../include/sms/sms.h:223: __WRITE_VDP_REG(VDP_RSCX, -x);
    00000259 21r00r00         [10]  480 	ld	hl, #_shadow_VDP_RSCX
    0000025C ED 44            [ 8]  481 	neg
    0000025E 77               [ 7]  482 	ld	(hl), a
    0000025F F3               [ 4]  483 	di
    00000260 3Ar00r00         [13]  484 	ld	a, (_shadow_VDP_RSCX+0)
    00000263 D3 BF            [11]  485 	out	(_VDP_CMD), a
    00000265 3E 88            [ 7]  486 	ld	a, #0x88
    00000267 D3 BF            [11]  487 	out	(_VDP_CMD), a
    00000269 FB               [ 4]  488 	ei
                                    489 ;../../../include/sms/sms.h:224: __WRITE_VDP_REG(VDP_RSCY, y);
    0000026A FD 21r00r00      [14]  490 	ld	iy, #_shadow_VDP_RSCY
    0000026E FD 73 00         [19]  491 	ld	0 (iy), e
    00000271 F3               [ 4]  492 	di
    00000272 3Ar00r00         [13]  493 	ld	a, (_shadow_VDP_RSCY+0)
    00000275 D3 BF            [11]  494 	out	(_VDP_CMD), a
    00000277 3E 89            [ 7]  495 	ld	a, #0x89
    00000279 D3 BF            [11]  496 	out	(_VDP_CMD), a
    0000027B FB               [ 4]  497 	ei
                                    498 ;src/large_map.c:210: set_submap_indices(
    0000027C 01r00r00         [10]  499 	ld	bc, #_bigmap_map+0
    0000027F 3Ar0Ar00         [13]  500 	ld	a, (_map_pos_y+0)
    00000282 5F               [ 4]  501 	ld	e, a
    00000283 16 00            [ 7]  502 	ld	d, #0x00
    00000285 21 42 00         [10]  503 	ld	hl, #0x0042
    00000288 BF               [ 4]  504 	cp	a, a
    00000289 ED 52            [15]  505 	sbc	hl, de
    0000028B 3E 13            [ 7]  506 	ld	a, #0x13
    0000028D BD               [ 4]  507 	cp	a, l
    0000028E 3E 00            [ 7]  508 	ld	a, #0x00
    00000290 9C               [ 4]  509 	sbc	a, h
    00000291 30 04            [12]  510 	jr	NC, 00109$
    00000293 16 13            [ 7]  511 	ld	d, #0x13
    00000295 18 07            [12]  512 	jr	00110$
    00000297                        513 00109$:
    00000297 21r0Ar00         [10]  514 	ld	hl, #_map_pos_y
    0000029A 3E 42            [ 7]  515 	ld	a, #0x42
    0000029C 96               [ 7]  516 	sub	a, (hl)
    0000029D 57               [ 4]  517 	ld	d, a
    0000029E                        518 00110$:
    0000029E 3Ar09r00         [13]  519 	ld	a, (_map_pos_x+0)
    000002A1 6F               [ 4]  520 	ld	l, a
                                    521 ;	spillPairReg hl
                                    522 ;	spillPairReg hl
    000002A2 26 00            [ 7]  523 	ld	h, #0x00
                                    524 ;	spillPairReg hl
                                    525 ;	spillPairReg hl
    000002A4 3E 9C            [ 7]  526 	ld	a, #0x9c
    000002A6 95               [ 4]  527 	sub	a, l
    000002A7 5F               [ 4]  528 	ld	e, a
    000002A8 9F               [ 4]  529 	sbc	a, a
    000002A9 94               [ 4]  530 	sub	a, h
    000002AA 6F               [ 4]  531 	ld	l, a
                                    532 ;	spillPairReg hl
                                    533 ;	spillPairReg hl
    000002AB 3E 15            [ 7]  534 	ld	a, #0x15
    000002AD BB               [ 4]  535 	cp	a, e
    000002AE 3E 00            [ 7]  536 	ld	a, #0x00
    000002B0 9D               [ 4]  537 	sbc	a, l
    000002B1 30 04            [12]  538 	jr	NC, 00111$
    000002B3 3E 15            [ 7]  539 	ld	a, #0x15
    000002B5 18 06            [12]  540 	jr	00112$
    000002B7                        541 00111$:
    000002B7 21r09r00         [10]  542 	ld	hl, #_map_pos_x
    000002BA 3E 9C            [ 7]  543 	ld	a, #0x9c
    000002BC 96               [ 7]  544 	sub	a, (hl)
    000002BD                        545 00112$:
    000002BD C5               [11]  546 	push	bc
    000002BE 26 9C            [ 7]  547 	ld	h, #0x9c
                                    548 ;	spillPairReg hl
                                    549 ;	spillPairReg hl
    000002C0 6A               [ 4]  550 	ld	l, d
    000002C1 E5               [11]  551 	push	hl
    000002C2 F5               [11]  552 	push	af
    000002C3 33               [ 6]  553 	inc	sp
    000002C4 3Ar0Ar00         [13]  554 	ld	a, (_map_pos_y+0)
    000002C7 67               [ 4]  555 	ld	h, a
    000002C8 3Ar09r00         [13]  556 	ld	a, (_map_pos_x+0)
    000002CB 6F               [ 4]  557 	ld	l, a
    000002CC E5               [11]  558 	push	hl
    000002CD CDr00r00         [17]  559 	call	_set_tile_submap
                                    560 ;src/large_map.c:226: redraw = FALSE;
    000002D0 21r0Dr00         [10]  561 	ld	hl, #_redraw
    000002D3 36 00            [10]  562 	ld	(hl), #0x00
                                    563 ;src/large_map.c:228: move_bkg(camera_x, WRAP_SCROLL_Y(camera_y + SCROLL_Y_OFFSET));
    000002D5 2Ar03r00         [16]  564 	ld	hl, (_camera_y)
    000002D8 11 E0 00         [10]  565 	ld	de, #0x00e0
    000002DB CDr00r00         [17]  566 	call	__moduint
    000002DE 3Ar01r00         [13]  567 	ld	a, (_camera_x+0)
                                    568 ;../../../include/sms/sms.h:223: __WRITE_VDP_REG(VDP_RSCX, -x);
    000002E1 21r00r00         [10]  569 	ld	hl, #_shadow_VDP_RSCX
    000002E4 ED 44            [ 8]  570 	neg
    000002E6 77               [ 7]  571 	ld	(hl), a
    000002E7 F3               [ 4]  572 	di
    000002E8 3Ar00r00         [13]  573 	ld	a, (_shadow_VDP_RSCX+0)
    000002EB D3 BF            [11]  574 	out	(_VDP_CMD), a
    000002ED 3E 88            [ 7]  575 	ld	a, #0x88
    000002EF D3 BF            [11]  576 	out	(_VDP_CMD), a
    000002F1 FB               [ 4]  577 	ei
                                    578 ;../../../include/sms/sms.h:224: __WRITE_VDP_REG(VDP_RSCY, y);
    000002F2 FD 21r00r00      [14]  579 	ld	iy, #_shadow_VDP_RSCY
    000002F6 FD 73 00         [19]  580 	ld	0 (iy), e
    000002F9 F3               [ 4]  581 	di
    000002FA 3Ar00r00         [13]  582 	ld	a, (_shadow_VDP_RSCY+0)
    000002FD D3 BF            [11]  583 	out	(_VDP_CMD), a
    000002FF 3E 89            [ 7]  584 	ld	a, #0x89
    00000301 D3 BF            [11]  585 	out	(_VDP_CMD), a
    00000303 FB               [ 4]  586 	ei
                                    587 ;src/large_map.c:228: move_bkg(camera_x, WRAP_SCROLL_Y(camera_y + SCROLL_Y_OFFSET));
                                    588 ;src/large_map.c:235: }
    00000304 DD F9            [10]  589 	ld	sp, ix
    00000306 DD E1            [14]  590 	pop	ix
    00000308 C9               [10]  591 	ret
                                    592 ;src/large_map.c:237: void main(void){
                                    593 ;	---------------------------------
                                    594 ; Function main
                                    595 ; ---------------------------------
    00000309                        596 _main::
                                    597 ;../../../include/sms/sms.h:254: __WRITE_VDP_REG(VDP_R1, __READ_VDP_REG(VDP_R1) &= (~R1_DISP_ON));
    00000309 3Ar00r00         [13]  598 	ld	a, (_shadow_VDP_R1+0)
    0000030C E6 BF            [ 7]  599 	and	a, #0xbf
    0000030E 32r00r00         [13]  600 	ld	(_shadow_VDP_R1+0), a
    00000311 F3               [ 4]  601 	di
    00000312 3Ar00r00         [13]  602 	ld	a, (_shadow_VDP_R1+0)
    00000315 D3 BF            [11]  603 	out	(_VDP_CMD), a
    00000317 3E 81            [ 7]  604 	ld	a, #0x81
    00000319 D3 BF            [11]  605 	out	(_VDP_CMD), a
    0000031B FB               [ 4]  606 	ei
                                    607 ;src/large_map.c:239: init_camera(0, 0);
                                    608 ;	spillPairReg hl
                                    609 ;	spillPairReg hl
    0000031C AF               [ 4]  610 	xor	a, a
    0000031D 6F               [ 4]  611 	ld	l, a
    0000031E CDr8Er01         [17]  612 	call	_init_camera
                                    613 ;src/large_map.c:242: DISPLAY_ON;
    00000321 3Ar00r00         [13]  614 	ld	a, (_shadow_VDP_R1+0)
    00000324 F6 40            [ 7]  615 	or	a, #0x40
    00000326 32r00r00         [13]  616 	ld	(_shadow_VDP_R1+0), a
    00000329 F3               [ 4]  617 	di
    0000032A 3Ar00r00         [13]  618 	ld	a, (_shadow_VDP_R1+0)
    0000032D D3 BF            [11]  619 	out	(_VDP_CMD), a
    0000032F 3E 81            [ 7]  620 	ld	a, #0x81
    00000331 D3 BF            [11]  621 	out	(_VDP_CMD), a
    00000333 FB               [ 4]  622 	ei
                                    623 ;src/large_map.c:243: while (TRUE) {
    00000334                        624 00123$:
                                    625 ;src/large_map.c:244: joy = joypad();
    00000334 CDr00r00         [17]  626 	call	_joypad
    00000337 7D               [ 4]  627 	ld	a, l
    00000338 32r00r00         [13]  628 	ld	(_joy+0), a
                                    629 ;src/large_map.c:246: if (joy & J_UP) {
    0000033B 3Ar00r00         [13]  630 	ld	a, (_joy+0)
    0000033E 5F               [ 4]  631 	ld	e, a
    0000033F CB 43            [ 8]  632 	bit	0, e
    00000341 28 17            [12]  633 	jr	Z, 00108$
                                    634 ;src/large_map.c:247: if (camera_y) {
    00000343 3Ar04r00         [13]  635 	ld	a, (_camera_y+1)
    00000346 21r03r00         [10]  636 	ld	hl, #_camera_y
    00000349 B6               [ 7]  637 	or	a, (hl)
    0000034A 28 29            [12]  638 	jr	Z, 00109$
                                    639 ;src/large_map.c:248: camera_y--;
    0000034C 2Ar03r00         [16]  640 	ld	hl, (_camera_y)
    0000034F 2B               [ 6]  641 	dec	hl
    00000350 22r03r00         [16]  642 	ld	(_camera_y), hl
                                    643 ;src/large_map.c:249: redraw = TRUE;
    00000353 21r0Dr00         [10]  644 	ld	hl, #_redraw
    00000356 36 01            [10]  645 	ld	(hl), #0x01
    00000358 18 1B            [12]  646 	jr	00109$
    0000035A                        647 00108$:
                                    648 ;src/large_map.c:251: } else if (joy & J_DOWN) {
    0000035A CB 4B            [ 8]  649 	bit	1, e
    0000035C 28 17            [12]  650 	jr	Z, 00109$
                                    651 ;src/large_map.c:252: if (camera_y < camera_max_y) {
    0000035E 2Ar03r00         [16]  652 	ld	hl, (_camera_y)
    00000361 7D               [ 4]  653 	ld	a, l
    00000362 D6 80            [ 7]  654 	sub	a, #0x80
    00000364 7C               [ 4]  655 	ld	a, h
    00000365 DE 01            [ 7]  656 	sbc	a, #0x01
    00000367 30 0C            [12]  657 	jr	NC, 00109$
                                    658 ;src/large_map.c:253: camera_y++;
    00000369 2Ar03r00         [16]  659 	ld	hl, (_camera_y)
    0000036C 23               [ 6]  660 	inc	hl
    0000036D 22r03r00         [16]  661 	ld	(_camera_y), hl
                                    662 ;src/large_map.c:254: redraw = TRUE;
    00000370 21r0Dr00         [10]  663 	ld	hl, #_redraw
    00000373 36 01            [10]  664 	ld	(hl), #0x01
    00000375                        665 00109$:
                                    666 ;src/large_map.c:258: if (joy & J_LEFT) {
    00000375 CB 53            [ 8]  667 	bit	2, e
    00000377 28 17            [12]  668 	jr	Z, 00117$
                                    669 ;src/large_map.c:259: if (camera_x) {
    00000379 3Ar02r00         [13]  670 	ld	a, (_camera_x+1)
    0000037C 21r01r00         [10]  671 	ld	hl, #_camera_x
    0000037F B6               [ 7]  672 	or	a, (hl)
    00000380 28 29            [12]  673 	jr	Z, 00118$
                                    674 ;src/large_map.c:260: camera_x--;
    00000382 2Ar01r00         [16]  675 	ld	hl, (_camera_x)
    00000385 2B               [ 6]  676 	dec	hl
    00000386 22r01r00         [16]  677 	ld	(_camera_x), hl
                                    678 ;src/large_map.c:261: redraw = TRUE;
    00000389 21r0Dr00         [10]  679 	ld	hl, #_redraw
    0000038C 36 01            [10]  680 	ld	(hl), #0x01
    0000038E 18 1B            [12]  681 	jr	00118$
    00000390                        682 00117$:
                                    683 ;src/large_map.c:263: } else if (joy & J_RIGHT) {
    00000390 CB 5B            [ 8]  684 	bit	3, e
    00000392 28 17            [12]  685 	jr	Z, 00118$
                                    686 ;src/large_map.c:264: if (camera_x < camera_max_x) {
    00000394 2Ar01r00         [16]  687 	ld	hl, (_camera_x)
    00000397 11 40 04         [10]  688 	ld	de, #0x0440
    0000039A BF               [ 4]  689 	cp	a, a
    0000039B ED 52            [15]  690 	sbc	hl, de
    0000039D 30 0C            [12]  691 	jr	NC, 00118$
                                    692 ;src/large_map.c:265: camera_x++;
    0000039F 2Ar01r00         [16]  693 	ld	hl, (_camera_x)
    000003A2 23               [ 6]  694 	inc	hl
    000003A3 22r01r00         [16]  695 	ld	(_camera_x), hl
                                    696 ;src/large_map.c:266: redraw = TRUE;
    000003A6 21r0Dr00         [10]  697 	ld	hl, #_redraw
    000003A9 36 01            [10]  698 	ld	(hl), #0x01
    000003AB                        699 00118$:
                                    700 ;src/large_map.c:269: if (redraw) {
    000003AB 3Ar0Dr00         [13]  701 	ld	a, (_redraw+0)
    000003AE B7               [ 4]  702 	or	a, a
    000003AF 28 0E            [12]  703 	jr	Z, 00120$
                                    704 ;src/large_map.c:270: vsync();
    000003B1 CDr00r00         [17]  705 	call	_vsync
                                    706 ;src/large_map.c:271: set_camera();
    000003B4 CDr00r00         [17]  707 	call	_set_camera
                                    708 ;src/large_map.c:272: redraw = FALSE;
    000003B7 21r0Dr00         [10]  709 	ld	hl, #_redraw
    000003BA 36 00            [10]  710 	ld	(hl), #0x00
    000003BC C3r34r03         [10]  711 	jp	00123$
    000003BF                        712 00120$:
                                    713 ;src/large_map.c:273: } else vsync();
    000003BF CDr00r00         [17]  714 	call	_vsync
                                    715 ;src/large_map.c:275: }
    000003C2 C3r34r03         [10]  716 	jp	00123$
                                    717 	.area _CODE
                                    718 	.area _INITIALIZER
                                    719 	.area _CABS (ABS)
