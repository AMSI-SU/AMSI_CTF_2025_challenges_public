                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module text_scroller
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _scanline_isr
                                     13 	.globl _printf
                                     14 	.globl _font_set
                                     15 	.globl _font_load
                                     16 	.globl _font_init
                                     17 	.globl _fill_bkg_rect
                                     18 	.globl _get_bkg_xy_addr
                                     19 	.globl _set_vram_byte
                                     20 	.globl _display_off
                                     21 	.globl _vsync
                                     22 	.globl _set_interrupts
                                     23 	.globl _add_LCD
                                     24 	.globl _scroller_next_char
                                     25 	.globl _scroller_x
                                     26 	.globl _scanline_offsets
                                     27 	.globl _limit
                                     28 	.globl _base
                                     29 	.globl _scroller_vram_addr
                                     30 	.globl _scroller_text
                                     31 	.globl _scanline_offsets_tbl
                                     32 ;--------------------------------------------------------
                                     33 ; special function registers
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area _DATA
    00000000                         39 _scroller_vram_addr::
    00000000                         40 	.ds 2
    00000002                         41 _base::
    00000002                         42 	.ds 2
    00000004                         43 _limit::
    00000004                         44 	.ds 2
                                     45 ;--------------------------------------------------------
                                     46 ; ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area _INITIALIZED
    00000000                         49 _scanline_offsets::
    00000000                         50 	.ds 2
    00000002                         51 _scroller_x::
    00000002                         52 	.ds 1
    00000003                         53 _scroller_next_char::
    00000003                         54 	.ds 2
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area _DABS (ABS)
                                     59 ;--------------------------------------------------------
                                     60 ; global & static initialisations
                                     61 ;--------------------------------------------------------
                                     62 	.area _HOME
                                     63 	.area _GSINIT
                                     64 	.area _GSFINAL
                                     65 	.area _GSINIT
                                     66 ;--------------------------------------------------------
                                     67 ; Home
                                     68 ;--------------------------------------------------------
                                     69 	.area _HOME
                                     70 	.area _HOME
                                     71 ;--------------------------------------------------------
                                     72 ; code
                                     73 ;--------------------------------------------------------
                                     74 	.area _CODE
                                     75 ;src/text_scroller.c:16: void scanline_isr(void) {
                                     76 ;	---------------------------------
                                     77 ; Function scanline_isr
                                     78 ; ---------------------------------
    00000000                         79 _scanline_isr::
                                     80 ;src/text_scroller.c:33: switch (LYC_REG) {
    00000000 F0r00            [12]   81 	ldh	a, (_LYC_REG + 0)
    00000002 B7               [ 4]   82 	or	a, a
    00000003 28 09            [12]   83 	jr	Z, 00101$
    00000005 FE 77            [ 8]   84 	cp	a, #0x77
    00000007 28 0D            [12]   85 	jr	Z, 00102$
    00000009 D6 7F            [ 8]   86 	sub	a, #0x7f
    0000000B 28 13            [12]   87 	jr	Z, 00103$
    0000000D C9               [16]   88 	ret
                                     89 ;src/text_scroller.c:34: case 0: 
    0000000E                         90 00101$:
                                     91 ;src/text_scroller.c:35: SCX_REG = 0;
    0000000E AF               [ 4]   92 	xor	a, a
    0000000F E0r00            [12]   93 	ldh	(_SCX_REG + 0), a
                                     94 ;src/text_scroller.c:36: LYC_REG = SCROLL_POS_PIX_START;
    00000011 3E 77            [ 8]   95 	ld	a, #0x77
    00000013 E0r00            [12]   96 	ldh	(_LYC_REG + 0), a
                                     97 ;src/text_scroller.c:37: break;
    00000015 C9               [16]   98 	ret
                                     99 ;src/text_scroller.c:38: case SCROLL_POS_PIX_START:
    00000016                        100 00102$:
                                    101 ;src/text_scroller.c:39: SCX_REG = scroller_x;
    00000016 FAr02r00         [16]  102 	ld	a, (#_scroller_x)
    00000019 E0r00            [12]  103 	ldh	(_SCX_REG + 0), a
                                    104 ;src/text_scroller.c:40: LYC_REG = SCROLL_POS_PIX_END;
    0000001B 3E 7F            [ 8]  105 	ld	a, #0x7f
    0000001D E0r00            [12]  106 	ldh	(_LYC_REG + 0), a
                                    107 ;src/text_scroller.c:41: break;
    0000001F C9               [16]  108 	ret
                                    109 ;src/text_scroller.c:42: case SCROLL_POS_PIX_END:
    00000020                        110 00103$:
                                    111 ;src/text_scroller.c:43: SCX_REG = LYC_REG = 0;
    00000020 AF               [ 4]  112 	xor	a, a
    00000021 E0r00            [12]  113 	ldh	(_LYC_REG + 0), a
    00000023 AF               [ 4]  114 	xor	a, a
    00000024 E0r00            [12]  115 	ldh	(_SCX_REG + 0), a
                                    116 ;src/text_scroller.c:45: }
                                    117 ;src/text_scroller.c:55: }
    00000026 C9               [16]  118 	ret
    00000027                        119 _scanline_offsets_tbl:
    00000027 00                     120 	.db #0x00	; 0
    00000028 01                     121 	.db #0x01	; 1
    00000029 02                     122 	.db #0x02	; 2
    0000002A 03                     123 	.db #0x03	; 3
    0000002B 03                     124 	.db #0x03	; 3
    0000002C 02                     125 	.db #0x02	; 2
    0000002D 01                     126 	.db #0x01	; 1
    0000002E 00                     127 	.db #0x00	; 0
    0000002F 00                     128 	.db #0x00	; 0
    00000030 01                     129 	.db #0x01	; 1
    00000031 02                     130 	.db #0x02	; 2
    00000032 03                     131 	.db #0x03	; 3
    00000033 03                     132 	.db #0x03	; 3
    00000034 02                     133 	.db #0x02	; 2
    00000035 01                     134 	.db #0x01	; 1
    00000036 00                     135 	.db #0x00	; 0
                                    136 ;src/text_scroller.c:66: void main(void) {
                                    137 ;	---------------------------------
                                    138 ; Function main
                                    139 ; ---------------------------------
    00000037                        140 _main::
    00000037 3B               [ 8]  141 	dec	sp
                                    142 ;src/text_scroller.c:67: DISPLAY_OFF;
    00000038 CDr00r00         [24]  143 	call	_display_off
                                    144 ;src/text_scroller.c:69: font_init();
    0000003B CDr00r00         [24]  145 	call	_font_init
                                    146 ;src/text_scroller.c:70: font_set(font_load(font_ibm));
    0000003E 11r00r00         [12]  147 	ld	de, #_font_ibm
    00000041 D5               [16]  148 	push	de
    00000042 CDr00r00         [24]  149 	call	_font_load
    00000045 E1               [12]  150 	pop	hl
    00000046 D5               [16]  151 	push	de
    00000047 CDr00r00         [24]  152 	call	_font_set
    0000004A E1               [12]  153 	pop	hl
                                    154 ;src/text_scroller.c:72: fill_bkg_rect(0, 0, DEVICE_SCREEN_WIDTH, DEVICE_SCREEN_HEIGHT, '*' - ' ');
    0000004B 21 12 0A         [12]  155 	ld	hl, #0xa12
    0000004E E5               [16]  156 	push	hl
    0000004F 3E 14            [ 8]  157 	ld	a, #0x14
    00000051 F5               [16]  158 	push	af
    00000052 33               [ 8]  159 	inc	sp
    00000053 AF               [ 4]  160 	xor	a, a
    00000054 0F               [ 4]  161 	rrca
    00000055 F5               [16]  162 	push	af
    00000056 CDr00r00         [24]  163 	call	_fill_bkg_rect
    00000059 E8 05            [16]  164 	add	sp, #5
                                    165 ;src/text_scroller.c:73: DISPLAY_ON;
    0000005B F0r00            [12]  166 	ldh	a, (_LCDC_REG + 0)
    0000005D F6 80            [ 8]  167 	or	a, #0x80
    0000005F E0r00            [12]  168 	ldh	(_LCDC_REG + 0), a
                                    169 ;src/text_scroller.c:75: printf(" Scrolling %d chars", sizeof(scroller_text) - 1);
    00000061 11 68 01         [12]  170 	ld	de, #0x0168
    00000064 D5               [16]  171 	push	de
    00000065 11rA8r02         [12]  172 	ld	de, #___str_0
    00000068 D5               [16]  173 	push	de
    00000069 CDr00r00         [24]  174 	call	_printf
    0000006C E8 04            [16]  175 	add	sp, #4
                                    176 ;src/text_scroller.c:82: }
    0000006E F3               [ 4]  177 	di
                                    178 ;src/text_scroller.c:78: add_LCD(scanline_isr);
    0000006F 11r00r00         [12]  179 	ld	de, #_scanline_isr
    00000072 CDr00r00         [24]  180 	call	_add_LCD
                                    181 ;src/text_scroller.c:80: STAT_REG |= STATF_LYC; LYC_REG = 0;
    00000075 F0r00            [12]  182 	ldh	a, (_STAT_REG + 0)
    00000077 F6 40            [ 8]  183 	or	a, #0x40
    00000079 E0r00            [12]  184 	ldh	(_STAT_REG + 0), a
    0000007B AF               [ 4]  185 	xor	a, a
    0000007C E0r00            [12]  186 	ldh	(_LYC_REG + 0), a
    0000007E FB               [ 4]  187 	ei
                                    188 ;src/text_scroller.c:87: set_interrupts(VBL_IFLAG | LCD_IFLAG);
    0000007F 3E 03            [ 8]  189 	ld	a, #0x03
    00000081 CDr00r00         [24]  190 	call	_set_interrupts
                                    191 ;src/text_scroller.c:90: base = (uint8_t *)((uint16_t)get_bkg_xy_addr(0, SCROLL_POS) & (DEVICE_SCREEN_MAP_ENTRY_SIZE==1?0xffe0:0xffc0));
    00000084 21 00 0F         [12]  192 	ld	hl, #0xf00
    00000087 E5               [16]  193 	push	hl
    00000088 CDr00r00         [24]  194 	call	_get_bkg_xy_addr
    0000008B E1               [12]  195 	pop	hl
    0000008C 7B               [ 4]  196 	ld	a, e
    0000008D E6 E0            [ 8]  197 	and	a, #0xe0
    0000008F 21r02r00         [12]  198 	ld	hl, #_base
    00000092 22               [ 8]  199 	ld	(hl+), a
                                    200 ;src/text_scroller.c:91: limit = base + (DEVICE_SCREEN_BUFFER_WIDTH * DEVICE_SCREEN_MAP_ENTRY_SIZE);
    00000093 7A               [ 4]  201 	ld	a, d
    00000094 32               [ 8]  202 	ld	(hl-), a
    00000095 7E               [ 8]  203 	ld	a, (hl)
    00000096 C6 20            [ 8]  204 	add	a, #0x20
    00000098 EAr04r00         [16]  205 	ld	(#_limit),a
    0000009B FAr03r00         [16]  206 	ld	a, (#_base + 1)
    0000009E CE 00            [ 8]  207 	adc	a, #0x00
    000000A0 EAr05r00         [16]  208 	ld	(#_limit + 1),a
                                    209 ;src/text_scroller.c:93: scroller_vram_addr = base + ((DEVICE_SCREEN_X_OFFSET + DEVICE_SCREEN_WIDTH) * DEVICE_SCREEN_MAP_ENTRY_SIZE);
    000000A3 FAr02r00         [16]  210 	ld	a, (#_base)
    000000A6 C6 14            [ 8]  211 	add	a, #0x14
    000000A8 EAr00r00         [16]  212 	ld	(#_scroller_vram_addr),a
    000000AB FAr03r00         [16]  213 	ld	a, (#_base + 1)
    000000AE CE 00            [ 8]  214 	adc	a, #0x00
    000000B0 EAr01r00         [16]  215 	ld	(#_scroller_vram_addr + 1),a
                                    216 ;src/text_scroller.c:94: if (scroller_vram_addr >= limit) scroller_vram_addr = base;
    000000B3 11r00r00         [12]  217 	ld	de, #_scroller_vram_addr
    000000B6 21r04r00         [12]  218 	ld	hl, #_limit
    000000B9 1A               [ 8]  219 	ld	a, (de)
    000000BA 13               [ 8]  220 	inc	de
    000000BB 96               [ 8]  221 	sub	a, (hl)
    000000BC 23               [ 8]  222 	inc	hl
    000000BD 1A               [ 8]  223 	ld	a, (de)
    000000BE 9E               [ 8]  224 	sbc	a, (hl)
    000000BF 38 0C            [12]  225 	jr	C, 00102$
    000000C1 FAr02r00         [16]  226 	ld	a, (#_base)
    000000C4 EAr00r00         [16]  227 	ld	(#_scroller_vram_addr),a
    000000C7 FAr03r00         [16]  228 	ld	a, (#_base + 1)
    000000CA EAr01r00         [16]  229 	ld	(#_scroller_vram_addr + 1),a
    000000CD                        230 00102$:
                                    231 ;src/text_scroller.c:96: set_vram_byte(scroller_vram_addr, *scroller_next_char - 0x20);
    000000CD 21r03r00         [12]  232 	ld	hl, #_scroller_next_char
    000000D0 2A               [ 8]  233 	ld	a, (hl+)
    000000D1 4F               [ 4]  234 	ld	c, a
    000000D2 46               [ 8]  235 	ld	b, (hl)
    000000D3 0A               [ 8]  236 	ld	a, (bc)
    000000D4 C6 E0            [ 8]  237 	add	a, #0xe0
    000000D6 21r00r00         [12]  238 	ld	hl, #_scroller_vram_addr
    000000D9 5E               [ 8]  239 	ld	e, (hl)
    000000DA 23               [ 8]  240 	inc	hl
    000000DB 56               [ 8]  241 	ld	d, (hl)
    000000DC CDr00r00         [24]  242 	call	_set_vram_byte
                                    243 ;src/text_scroller.c:98: while (1) {
    000000DF                        244 00110$:
                                    245 ;src/text_scroller.c:99: scroller_x++;
    000000DF 21r02r00         [12]  246 	ld	hl, #_scroller_x
    000000E2 34               [12]  247 	inc	(hl)
                                    248 ;src/text_scroller.c:100: if ((scroller_x & 0x07) == 0) {
    000000E3 7E               [ 8]  249 	ld	a, (hl)
    000000E4 E6 07            [ 8]  250 	and	a, #0x07
    000000E6 20 50            [12]  251 	jr	NZ, 00108$
                                    252 ;src/text_scroller.c:102: scroller_next_char++;
    000000E8 21r03r00         [12]  253 	ld	hl, #_scroller_next_char
    000000EB 34               [12]  254 	inc	(hl)
    000000EC 20 02            [12]  255 	jr	NZ, 00153$
    000000EE 23               [ 8]  256 	inc	hl
    000000EF 34               [12]  257 	inc	(hl)
    000000F0                        258 00153$:
                                    259 ;src/text_scroller.c:103: if (*scroller_next_char == 0) scroller_next_char = scroller_text;
    000000F0 21r03r00         [12]  260 	ld	hl, #_scroller_next_char
    000000F3 2A               [ 8]  261 	ld	a, (hl+)
    000000F4 4F               [ 4]  262 	ld	c, a
    000000F5 46               [ 8]  263 	ld	b, (hl)
    000000F6 0A               [ 8]  264 	ld	a, (bc)
    000000F7 B7               [ 4]  265 	or	a, a
    000000F8 20 06            [12]  266 	jr	NZ, 00104$
    000000FA 2B               [ 8]  267 	dec	hl
    000000FB 3Er3F            [ 8]  268 	ld	a, #<(_scroller_text)
    000000FD 22               [ 8]  269 	ld	(hl+), a
    000000FE 36s01            [12]  270 	ld	(hl), #>(_scroller_text)
    00000100                        271 00104$:
                                    272 ;src/text_scroller.c:106: scroller_vram_addr += DEVICE_SCREEN_MAP_ENTRY_SIZE;
    00000100 21r00r00         [12]  273 	ld	hl, #_scroller_vram_addr
    00000103 34               [12]  274 	inc	(hl)
    00000104 20 02            [12]  275 	jr	NZ, 00154$
    00000106 23               [ 8]  276 	inc	hl
    00000107 34               [12]  277 	inc	(hl)
    00000108                        278 00154$:
                                    279 ;src/text_scroller.c:107: if (scroller_vram_addr >= limit) scroller_vram_addr = base;
    00000108 11r00r00         [12]  280 	ld	de, #_scroller_vram_addr
    0000010B 21r04r00         [12]  281 	ld	hl, #_limit
    0000010E 1A               [ 8]  282 	ld	a, (de)
    0000010F 13               [ 8]  283 	inc	de
    00000110 96               [ 8]  284 	sub	a, (hl)
    00000111 23               [ 8]  285 	inc	hl
    00000112 1A               [ 8]  286 	ld	a, (de)
    00000113 9E               [ 8]  287 	sbc	a, (hl)
    00000114 38 0C            [12]  288 	jr	C, 00106$
    00000116 FAr02r00         [16]  289 	ld	a, (#_base)
    00000119 EAr00r00         [16]  290 	ld	(#_scroller_vram_addr),a
    0000011C FAr03r00         [16]  291 	ld	a, (#_base + 1)
    0000011F EAr01r00         [16]  292 	ld	(#_scroller_vram_addr + 1),a
    00000122                        293 00106$:
                                    294 ;src/text_scroller.c:110: set_vram_byte(scroller_vram_addr, *scroller_next_char - 0x20);
    00000122 21r03r00         [12]  295 	ld	hl, #_scroller_next_char
    00000125 2A               [ 8]  296 	ld	a, (hl+)
    00000126 4F               [ 4]  297 	ld	c, a
    00000127 46               [ 8]  298 	ld	b, (hl)
    00000128 0A               [ 8]  299 	ld	a, (bc)
    00000129 C6 E0            [ 8]  300 	add	a, #0xe0
    0000012B F8 00            [12]  301 	ldhl	sp,	#0
    0000012D 77               [ 8]  302 	ld	(hl), a
    0000012E 7E               [ 8]  303 	ld	a, (hl)
    0000012F 21r00r00         [12]  304 	ld	hl, #_scroller_vram_addr
    00000132 5E               [ 8]  305 	ld	e, (hl)
    00000133 23               [ 8]  306 	inc	hl
    00000134 56               [ 8]  307 	ld	d, (hl)
    00000135 CDr00r00         [24]  308 	call	_set_vram_byte
    00000138                        309 00108$:
                                    310 ;src/text_scroller.c:117: vsync();        
    00000138 CDr00r00         [24]  311 	call	_vsync
    0000013B 18 A2            [12]  312 	jr	00110$
                                    313 ;src/text_scroller.c:119: }
    0000013D 33               [ 8]  314 	inc	sp
    0000013E C9               [16]  315 	ret
    0000013F                        316 _scroller_text:
    0000013F 54 68 69 73 20 69 73   317 	.ascii "This is a text scroller demo for GBDK-2020. You can use idea"
             20 61 20 74 65 78 74
             20 73 63 72 6F 6C 6C
             65 72 20 64 65 6D 6F
             20 66 6F 72 20 47 42
             44 4B 2D 32 30 32 30
             2E 20 59 6F 75 20 63
             61 6E 20 75 73 65 20
             69 64 65 61
    0000017B 73 2C 20 74 68 61 74   318 	.ascii "s, that are shown in this demo, to make different parallax e"
             20 61 72 65 20 73 68
             6F 77 6E 20 69 6E 20
             74 68 69 73 20 64 65
             6D 6F 2C 20 74 6F 20
             6D 61 6B 65 20 64 69
             66 66 65 72 65 6E 74
             20 70 61 72 61 6C 6C
             61 78 20 65
    000001B7 66 66 65 63 74 73 2C   319 	.ascii "ffects, scrolling of tilemaps which are larger than 32x32 ti"
             20 73 63 72 6F 6C 6C
             69 6E 67 20 6F 66 20
             74 69 6C 65 6D 61 70
             73 20 77 68 69 63 68
             20 61 72 65 20 6C 61
             72 67 65 72 20 74 68
             61 6E 20 33 32 78 33
             32 20 74 69
    000001F3 6C 65 73 20 61 6E 64   320 	.ascii "les and TEXT SCROLLERS, of course! Need to write something e"
             20 54 45 58 54 20 53
             43 52 4F 4C 4C 45 52
             53 2C 20 6F 66 20 63
             6F 75 72 73 65 21 20
             4E 65 65 64 20 74 6F
             20 77 72 69 74 65 20
             73 6F 6D 65 74 68 69
             6E 67 20 65
    0000022F 6C 73 65 20 74 6F 20   321 	.ascii "lse to make this text longer than 256 characters. The quick "
             6D 61 6B 65 20 74 68
             69 73 20 74 65 78 74
             20 6C 6F 6E 67 65 72
             20 74 68 61 6E 20 32
             35 36 20 63 68 61 72
             61 63 74 65 72 73 2E
             20 54 68 65 20 71 75
             69 63 6B 20
    0000026B 72 65 64 20 66 6F 78   322 	.ascii "red fox jumps over the lazy brown dog. 0123456789.          "
             20 6A 75 6D 70 73 20
             6F 76 65 72 20 74 68
             65 20 6C 61 7A 79 20
             62 72 6F 77 6E 20 64
             6F 67 2E 20 30 31 32
             33 34 35 36 37 38 39
             2E 20 20 20 20 20 20
             20 20 20 20
    000002A7 00                     323 	.db 0x00
    000002A8                        324 ___str_0:
    000002A8 20 53 63 72 6F 6C 6C   325 	.ascii " Scrolling %d chars"
             69 6E 67 20 25 64 20
             63 68 61 72 73
    000002BB 00                     326 	.db 0x00
                                    327 	.area _CODE
                                    328 	.area _INITIALIZER
    00000000                        329 __xinit__scanline_offsets:
    00000000r27r00                  330 	.dw _scanline_offsets_tbl
    00000002                        331 __xinit__scroller_x:
    00000002 00                     332 	.db #0x00	; 0
    00000003                        333 __xinit__scroller_next_char:
    00000003r3Fr01                  334 	.dw _scroller_text
                                    335 	.area _CABS (ABS)
