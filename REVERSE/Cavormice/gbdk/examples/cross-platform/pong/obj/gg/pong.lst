                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module pong
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _init_pad
                                     13 	.globl _printf
                                     14 	.globl _gotoxy
                                     15 	.globl _set_tile_2bpp_data
                                     16 	.globl _joypad_ex
                                     17 	.globl _joypad_init
                                     18 	.globl _vsync
                                     19 	.globl _sprite_data
                                     20 	.globl _spd_ballY
                                     21 	.globl _spd_ballX
                                     22 	.globl _ballY
                                     23 	.globl _ballX
                                     24 	.globl _player2_score
                                     25 	.globl _player1_score
                                     26 	.globl _player2
                                     27 	.globl _player1
                                     28 	.globl _joypads
                                     29 	.globl _HUD
                                     30 ;--------------------------------------------------------
                                     31 ; special function registers
                                     32 ;--------------------------------------------------------
                         00000000    33 _GG_STATE	=	0x0000
                         00000001    34 _GG_EXT_7BIT	=	0x0001
                         00000002    35 _GG_EXT_CTL	=	0x0002
                         00000003    36 _GG_SIO_SEND	=	0x0003
                         00000004    37 _GG_SIO_RECV	=	0x0004
                         00000005    38 _GG_SIO_CTL	=	0x0005
                         00000006    39 _GG_SOUND_PAN	=	0x0006
                         0000003E    40 _MEMORY_CTL	=	0x003e
                         0000003F    41 _JOY_CTL	=	0x003f
                         0000007E    42 _VCOUNTER	=	0x007e
                         0000007F    43 _PSG	=	0x007f
                         0000007F    44 _HCOUNTER	=	0x007f
                         000000BE    45 _VDP_DATA	=	0x00be
                         000000BF    46 _VDP_CMD	=	0x00bf
                         000000BF    47 _VDP_STATUS	=	0x00bf
                         000000DC    48 _JOY_PORT1	=	0x00dc
                         000000DD    49 _JOY_PORT2	=	0x00dd
                         000000F0    50 _FMADDRESS	=	0x00f0
                         000000F1    51 _FMDATA	=	0x00f1
                         000000F2    52 _AUDIOCTRL	=	0x00f2
                                     53 ;--------------------------------------------------------
                                     54 ; ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area _DATA
                         0000FFFC    57 _RAM_CONTROL	=	0xfffc
                         0000FFF8    58 _GLASSES_3D	=	0xfff8
                         0000FFFD    59 _MAP_FRAME0	=	0xfffd
                         0000FFFE    60 _MAP_FRAME1	=	0xfffe
                         0000FFFF    61 _MAP_FRAME2	=	0xffff
    00000000                         62 _joypads::
    00000000                         63 	.ds 5
    00000005                         64 _player1::
    00000005                         65 	.ds 1
    00000006                         66 _player2::
    00000006                         67 	.ds 1
    00000007                         68 _player1_score::
    00000007                         69 	.ds 2
    00000009                         70 _player2_score::
    00000009                         71 	.ds 2
    0000000B                         72 _ballX::
    0000000B                         73 	.ds 1
    0000000C                         74 _ballY::
    0000000C                         75 	.ds 1
    0000000D                         76 _spd_ballX::
    0000000D                         77 	.ds 1
    0000000E                         78 _spd_ballY::
    0000000E                         79 	.ds 1
                                     80 ;--------------------------------------------------------
                                     81 ; ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area _INITIALIZED
    00000000                         84 _sprite_data::
    00000000                         85 	.ds 64
                                     86 ;--------------------------------------------------------
                                     87 ; absolute external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area _DABS (ABS)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area _HOME
                                     94 	.area _GSINIT
                                     95 	.area _GSFINAL
                                     96 	.area _GSINIT
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area _HOME
                                    101 	.area _HOME
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area _CODE
                                    106 ;src/pong.c:16: void init_pad(uint8_t n) {
                                    107 ;	---------------------------------
                                    108 ; Function init_pad
                                    109 ; ---------------------------------
    00000000                        110 _init_pad::
                                    111 ;src/pong.c:17: set_sprite_tile(n << 2, n);
    00000000 4F               [ 4]  112 	ld	c, a
    00000001 87               [ 4]  113 	add	a, a
    00000002 87               [ 4]  114 	add	a, a
    00000003 47               [ 4]  115 	ld	b, a
                                    116 ;../../../include/sms/sms.h:807: shadow_OAM[0x41+(nb << 1)] = tile;
    00000004 68               [ 4]  117 	ld	l, b
                                    118 ;	spillPairReg hl
                                    119 ;	spillPairReg hl
    00000005 26 00            [ 7]  120 	ld	h, #0x00
                                    121 ;	spillPairReg hl
                                    122 ;	spillPairReg hl
    00000007 29               [11]  123 	add	hl, hl
    00000008 11 41 00         [10]  124 	ld	de, #0x0041
    0000000B 19               [11]  125 	add	hl, de
    0000000C 11r00r00         [10]  126 	ld	de, #_shadow_OAM
    0000000F 19               [11]  127 	add	hl, de
    00000010 71               [ 7]  128 	ld	(hl), c
                                    129 ;src/pong.c:18: set_sprite_tile((n << 2) + 1, n);
    00000011 58               [ 4]  130 	ld	e, b
    00000012 1C               [ 4]  131 	inc	e
                                    132 ;../../../include/sms/sms.h:807: shadow_OAM[0x41+(nb << 1)] = tile;
    00000013 6B               [ 4]  133 	ld	l, e
                                    134 ;	spillPairReg hl
                                    135 ;	spillPairReg hl
    00000014 26 00            [ 7]  136 	ld	h, #0x00
                                    137 ;	spillPairReg hl
                                    138 ;	spillPairReg hl
    00000016 29               [11]  139 	add	hl, hl
    00000017 11 41 00         [10]  140 	ld	de, #0x0041
    0000001A 19               [11]  141 	add	hl, de
    0000001B 11r00r00         [10]  142 	ld	de, #_shadow_OAM
    0000001E 19               [11]  143 	add	hl, de
    0000001F 71               [ 7]  144 	ld	(hl), c
                                    145 ;src/pong.c:19: set_sprite_tile((n << 2) + 2, n);
    00000020 04               [ 4]  146 	inc	b
    00000021 04               [ 4]  147 	inc	b
                                    148 ;../../../include/sms/sms.h:807: shadow_OAM[0x41+(nb << 1)] = tile;
    00000022 68               [ 4]  149 	ld	l, b
                                    150 ;	spillPairReg hl
                                    151 ;	spillPairReg hl
    00000023 26 00            [ 7]  152 	ld	h, #0x00
                                    153 ;	spillPairReg hl
                                    154 ;	spillPairReg hl
    00000025 29               [11]  155 	add	hl, hl
    00000026 11 41 00         [10]  156 	ld	de, #0x0041
    00000029 19               [11]  157 	add	hl, de
    0000002A 11r00r00         [10]  158 	ld	de, #_shadow_OAM
    0000002D 19               [11]  159 	add	hl, de
    0000002E 71               [ 7]  160 	ld	(hl), c
                                    161 ;src/pong.c:19: set_sprite_tile((n << 2) + 2, n);
                                    162 ;src/pong.c:20: }
    0000002F C9               [10]  163 	ret
                                    164 ;src/pong.c:51: void main(void) {
                                    165 ;	---------------------------------
                                    166 ; Function main
                                    167 ; ---------------------------------
    00000030                        168 _main::
    00000030 DD E5            [15]  169 	push	ix
    00000032 DD 21 00 00      [14]  170 	ld	ix,#0
    00000036 DD 39            [15]  171 	add	ix,sp
    00000038 F5               [11]  172 	push	af
    00000039 3B               [ 6]  173 	dec	sp
                                    174 ;src/pong.c:56: set_sprite_data(0, 4, sprite_data);
                                    175 ;../../../include/sms/sms.h:636: set_tile_2bpp_data((uint8_t)(start) + 0x100u, ntiles, src, _current_2bpp_palette);
    0000003A 2Ar00r00         [16]  176 	ld	hl, (__current_2bpp_palette)
    0000003D E5               [11]  177 	push	hl
    0000003E 21r00r00         [10]  178 	ld	hl, #_sprite_data
    00000041 E5               [11]  179 	push	hl
    00000042 21 04 00         [10]  180 	ld	hl, #0x0004
    00000045 E5               [11]  181 	push	hl
    00000046 21 00 01         [10]  182 	ld	hl, #0x0100
    00000049 E5               [11]  183 	push	hl
    0000004A CDr00r00         [17]  184 	call	_set_tile_2bpp_data
                                    185 ;src/pong.c:59: init_pad(0);
    0000004D AF               [ 4]  186 	xor	a, a
    0000004E CDr00r00         [17]  187 	call	_init_pad
                                    188 ;src/pong.c:60: init_pad(1);
    00000051 3E 01            [ 7]  189 	ld	a, #0x01
    00000053 CDr00r00         [17]  190 	call	_init_pad
                                    191 ;../../../include/sms/sms.h:807: shadow_OAM[0x41+(nb << 1)] = tile;
    00000056 21r47r00         [10]  192 	ld	hl, #_shadow_OAM+71
    00000059 36 02            [10]  193 	ld	(hl), #0x02
                                    194 ;src/pong.c:66: SHOW_BKG; SHOW_SPRITES;
    0000005B 21r00r00         [10]  195 	ld	hl, #__sprites_OFF
    0000005E 36 00            [10]  196 	ld	(hl), #0x00
                                    197 ;src/pong.c:69: if (joypad_init(2, &joypads) != 2) {
    00000060 21r00r00         [10]  198 	ld	hl, #_joypads
    00000063 E5               [11]  199 	push	hl
    00000064 3E 02            [ 7]  200 	ld	a, #0x02
    00000066 F5               [11]  201 	push	af
    00000067 33               [ 6]  202 	inc	sp
    00000068 CDr00r00         [17]  203 	call	_joypad_init
    0000006B 7D               [ 4]  204 	ld	a, l
    0000006C D6 02            [ 7]  205 	sub	a, #0x02
    0000006E 28 0B            [12]  206 	jr	Z, 00102$
                                    207 ;src/pong.c:70: printf("Device must support\nat least two joypads");
    00000070 21r38r03         [10]  208 	ld	hl, #___str_0
    00000073 E5               [11]  209 	push	hl
    00000074 CDr00r00         [17]  210 	call	_printf
    00000077 F1               [10]  211 	pop	af
                                    212 ;src/pong.c:71: return;
    00000078 C3r22r03         [10]  213 	jp	00156$
    0000007B                        214 00102$:
                                    215 ;src/pong.c:75: player1 = 64, player2 = 64;
    0000007B 21r05r00         [10]  216 	ld	hl, #_player1
    0000007E 36 40            [10]  217 	ld	(hl), #0x40
    00000080 21r06r00         [10]  218 	ld	hl, #_player2
    00000083 36 40            [10]  219 	ld	(hl), #0x40
                                    220 ;src/pong.c:76: player1_score = player2_score = 0;
    00000085 21 00 00         [10]  221 	ld	hl, #0x0000
    00000088 22r09r00         [16]  222 	ld	(_player2_score), hl
    0000008B 22r07r00         [16]  223 	ld	(_player1_score), hl
                                    224 ;src/pong.c:79: printf(HUD, player1_score, player2_score);
    0000008E E5               [11]  225 	push	hl
    0000008F E5               [11]  226 	push	hl
    00000090 21r27r03         [10]  227 	ld	hl, #_HUD
    00000093 E5               [11]  228 	push	hl
    00000094 CDr00r00         [17]  229 	call	_printf
    00000097 F1               [10]  230 	pop	af
    00000098 F1               [10]  231 	pop	af
    00000099 F1               [10]  232 	pop	af
                                    233 ;src/pong.c:82: ballX = INITBALLX, ballY = INITBALLY;
    0000009A 21r0Br00         [10]  234 	ld	hl, #_ballX
    0000009D 36 54            [10]  235 	ld	(hl), #0x54
    0000009F 21r0Cr00         [10]  236 	ld	hl, #_ballY
    000000A2 36 48            [10]  237 	ld	(hl), #0x48
                                    238 ;src/pong.c:83: spd_ballX = 1, spd_ballY = 1;
    000000A4 21r0Dr00         [10]  239 	ld	hl, #_spd_ballX
    000000A7 36 01            [10]  240 	ld	(hl), #0x01
    000000A9 21r0Er00         [10]  241 	ld	hl, #_spd_ballY
    000000AC 36 01            [10]  242 	ld	(hl), #0x01
                                    243 ;src/pong.c:85: while(1) {
    000000AE                        244 00143$:
                                    245 ;src/pong.c:87: joypad_ex(&joypads);
    000000AE 21r00r00         [10]  246 	ld	hl, #_joypads
    000000B1 CDr00r00         [17]  247 	call	_joypad_ex
                                    248 ;src/pong.c:90: if (joypads.joy0 & J_UP) {
    000000B4 21r01r00         [10]  249 	ld	hl, #_joypads + 1
    000000B7 4E               [ 7]  250 	ld	c, (hl)
                                    251 ;src/pong.c:91: player1 -= 2;
    000000B8 3Ar05r00         [13]  252 	ld	a, (_player1+0)
                                    253 ;src/pong.c:90: if (joypads.joy0 & J_UP) {
    000000BB CB 41            [ 8]  254 	bit	0, c
    000000BD 28 14            [12]  255 	jr	Z, 00110$
                                    256 ;src/pong.c:91: player1 -= 2;
    000000BF 21r05r00         [10]  257 	ld	hl, #_player1
    000000C2 C6 FE            [ 7]  258 	add	a, #0xfe
    000000C4 77               [ 7]  259 	ld	(hl), a
                                    260 ;src/pong.c:92: if (player1 < YMIN) player1 = YMIN;
    000000C5 3Ar05r00         [13]  261 	ld	a, (_player1+0)
    000000C8 D6 1C            [ 7]  262 	sub	a, #0x1c
    000000CA 30 1F            [12]  263 	jr	NC, 00111$
    000000CC 21r05r00         [10]  264 	ld	hl, #_player1
    000000CF 36 1C            [10]  265 	ld	(hl), #0x1c
    000000D1 18 18            [12]  266 	jr	00111$
    000000D3                        267 00110$:
                                    268 ;src/pong.c:93: } else if (joypads.joy0 & J_DOWN) {
    000000D3 CB 49            [ 8]  269 	bit	1, c
    000000D5 28 14            [12]  270 	jr	Z, 00111$
                                    271 ;src/pong.c:94: player1 += 2;
    000000D7 C6 02            [ 7]  272 	add	a, #0x02
    000000D9 32r05r00         [13]  273 	ld	(_player1+0), a
                                    274 ;src/pong.c:95: if (player1 > YMAX) player1 = YMAX;            
    000000DC 3E 64            [ 7]  275 	ld	a, #0x64
    000000DE FD 21r05r00      [14]  276 	ld	iy, #_player1
    000000E2 FD 96 00         [19]  277 	sub	a, 0 (iy)
    000000E5 30 04            [12]  278 	jr	NC, 00111$
    000000E7 FD 36 00 64      [19]  279 	ld	0 (iy), #0x64
    000000EB                        280 00111$:
                                    281 ;src/pong.c:97: draw_pad(0, PLAYER1_X, player1);
    000000EB 3Ar05r00         [13]  282 	ld	a, (_player1+0)
    000000EE 5F               [ 4]  283 	ld	e, a
    000000EF DD 73 FF         [19]  284 	ld	-1 (ix), e
                                    285 ;../../../include/sms/sms.h:848: shadow_OAM[nb] = (y < VDP_SAT_TERM) ? y : 0xC0;
    000000F2 7B               [ 4]  286 	ld	a, e
    000000F3 D6 D0            [ 7]  287 	sub	a, #0xd0
    000000F5 38 02            [12]  288 	jr	C, 00159$
    000000F7 1E C0            [ 7]  289 	ld	e, #0xc0
    000000F9                        290 00159$:
    000000F9 21r00r00         [10]  291 	ld	hl, #_shadow_OAM
    000000FC 73               [ 7]  292 	ld	(hl), e
                                    293 ;../../../include/sms/sms.h:849: shadow_OAM[0x40+(nb << 1)] = x;
    000000FD 21r40r00         [10]  294 	ld	hl, #_shadow_OAM+64
    00000100 36 30            [10]  295 	ld	(hl), #0x30
                                    296 ;src/pong.c:25: move_sprite((n << 2) + 1, x, y + 8);
    00000102 DD 5E FF         [19]  297 	ld	e, -1 (ix)
    00000105 7B               [ 4]  298 	ld	a, e
    00000106 C6 08            [ 7]  299 	add	a, #0x08
                                    300 ;../../../include/sms/sms.h:848: shadow_OAM[nb] = (y < VDP_SAT_TERM) ? y : 0xC0;
    00000108 4F               [ 4]  301 	ld	c, a
    00000109 D6 D0            [ 7]  302 	sub	a, #0xd0
    0000010B 30 05            [12]  303 	jr	NC, 00160$
    0000010D DD 71 FF         [19]  304 	ld	-1 (ix), c
    00000110 18 04            [12]  305 	jr	00161$
    00000112                        306 00160$:
    00000112 DD 36 FF C0      [19]  307 	ld	-1 (ix), #0xc0
    00000116                        308 00161$:
    00000116 DD 7E FF         [19]  309 	ld	a, -1 (ix)
    00000119 32r01r00         [13]  310 	ld	(#(_shadow_OAM + 1)),a
                                    311 ;../../../include/sms/sms.h:849: shadow_OAM[0x40+(nb << 1)] = x;
    0000011C 21r42r00         [10]  312 	ld	hl, #_shadow_OAM+66
    0000011F 36 30            [10]  313 	ld	(hl), #0x30
                                    314 ;src/pong.c:26: move_sprite((n << 2) + 2, x, y + 16);
    00000121 7B               [ 4]  315 	ld	a, e
    00000122 C6 10            [ 7]  316 	add	a, #0x10
                                    317 ;../../../include/sms/sms.h:848: shadow_OAM[nb] = (y < VDP_SAT_TERM) ? y : 0xC0;
    00000124 4F               [ 4]  318 	ld	c, a
    00000125 D6 D0            [ 7]  319 	sub	a, #0xd0
    00000127 30 05            [12]  320 	jr	NC, 00162$
    00000129 DD 71 FF         [19]  321 	ld	-1 (ix), c
    0000012C 18 04            [12]  322 	jr	00163$
    0000012E                        323 00162$:
    0000012E DD 36 FF C0      [19]  324 	ld	-1 (ix), #0xc0
    00000132                        325 00163$:
    00000132 DD 7E FF         [19]  326 	ld	a, -1 (ix)
    00000135 32r02r00         [13]  327 	ld	(#(_shadow_OAM + 2)),a
                                    328 ;../../../include/sms/sms.h:849: shadow_OAM[0x40+(nb << 1)] = x;
    00000138 21r44r00         [10]  329 	ld	hl, #_shadow_OAM+68
    0000013B 36 30            [10]  330 	ld	(hl), #0x30
                                    331 ;src/pong.c:100: if (joypads.joy1 & J_UP) {
    0000013D 21r02r00         [10]  332 	ld	hl, #_joypads + 2
    00000140 4E               [ 7]  333 	ld	c, (hl)
                                    334 ;src/pong.c:101: player2 -= 2;
    00000141 3Ar06r00         [13]  335 	ld	a, (_player2+0)
                                    336 ;src/pong.c:100: if (joypads.joy1 & J_UP) {
    00000144 CB 41            [ 8]  337 	bit	0, c
    00000146 28 14            [12]  338 	jr	Z, 00119$
                                    339 ;src/pong.c:101: player2 -= 2;
    00000148 21r06r00         [10]  340 	ld	hl, #_player2
    0000014B C6 FE            [ 7]  341 	add	a, #0xfe
    0000014D 77               [ 7]  342 	ld	(hl), a
                                    343 ;src/pong.c:102: if (player2 < YMIN) player2 = YMIN;
    0000014E 3Ar06r00         [13]  344 	ld	a, (_player2+0)
    00000151 D6 1C            [ 7]  345 	sub	a, #0x1c
    00000153 30 1F            [12]  346 	jr	NC, 00120$
    00000155 21r06r00         [10]  347 	ld	hl, #_player2
    00000158 36 1C            [10]  348 	ld	(hl), #0x1c
    0000015A 18 18            [12]  349 	jr	00120$
    0000015C                        350 00119$:
                                    351 ;src/pong.c:103: } else if (joypads.joy1 & J_DOWN) {
    0000015C CB 49            [ 8]  352 	bit	1, c
    0000015E 28 14            [12]  353 	jr	Z, 00120$
                                    354 ;src/pong.c:104: player2 += 2;
    00000160 C6 02            [ 7]  355 	add	a, #0x02
    00000162 32r06r00         [13]  356 	ld	(_player2+0), a
                                    357 ;src/pong.c:105: if (player2 > YMAX) player2 = YMAX;            
    00000165 3E 64            [ 7]  358 	ld	a, #0x64
    00000167 FD 21r06r00      [14]  359 	ld	iy, #_player2
    0000016B FD 96 00         [19]  360 	sub	a, 0 (iy)
    0000016E 30 04            [12]  361 	jr	NC, 00120$
    00000170 FD 36 00 64      [19]  362 	ld	0 (iy), #0x64
    00000174                        363 00120$:
                                    364 ;src/pong.c:107: draw_pad(1, PLAYER2_X, player2);
    00000174 3Ar06r00         [13]  365 	ld	a, (_player2+0)
    00000177 DD 77 FF         [19]  366 	ld	-1 (ix), a
    0000017A DD 77 FE         [19]  367 	ld	-2 (ix), a
                                    368 ;../../../include/sms/sms.h:848: shadow_OAM[nb] = (y < VDP_SAT_TERM) ? y : 0xC0;
    0000017D DD 7E FF         [19]  369 	ld	a, -1 (ix)
    00000180 D6 D0            [ 7]  370 	sub	a, #0xd0
    00000182 38 04            [12]  371 	jr	C, 00165$
    00000184 DD 36 FF C0      [19]  372 	ld	-1 (ix), #0xc0
    00000188                        373 00165$:
    00000188 DD 7E FF         [19]  374 	ld	a, -1 (ix)
    0000018B 32r04r00         [13]  375 	ld	(#(_shadow_OAM + 4)),a
                                    376 ;../../../include/sms/sms.h:849: shadow_OAM[0x40+(nb << 1)] = x;
    0000018E 21r48r00         [10]  377 	ld	hl, #_shadow_OAM+72
    00000191 36 C8            [10]  378 	ld	(hl), #0xc8
                                    379 ;src/pong.c:25: move_sprite((n << 2) + 1, x, y + 8);
    00000193 DD 5E FE         [19]  380 	ld	e, -2 (ix)
    00000196 7B               [ 4]  381 	ld	a, e
    00000197 C6 08            [ 7]  382 	add	a, #0x08
                                    383 ;../../../include/sms/sms.h:848: shadow_OAM[nb] = (y < VDP_SAT_TERM) ? y : 0xC0;
    00000199 4F               [ 4]  384 	ld	c, a
    0000019A D6 D0            [ 7]  385 	sub	a, #0xd0
    0000019C 30 05            [12]  386 	jr	NC, 00166$
    0000019E DD 71 FF         [19]  387 	ld	-1 (ix), c
    000001A1 18 04            [12]  388 	jr	00167$
    000001A3                        389 00166$:
    000001A3 DD 36 FF C0      [19]  390 	ld	-1 (ix), #0xc0
    000001A7                        391 00167$:
    000001A7 DD 7E FF         [19]  392 	ld	a, -1 (ix)
    000001AA 32r05r00         [13]  393 	ld	(#(_shadow_OAM + 5)),a
                                    394 ;../../../include/sms/sms.h:849: shadow_OAM[0x40+(nb << 1)] = x;
    000001AD 21r4Ar00         [10]  395 	ld	hl, #_shadow_OAM+74
    000001B0 36 C8            [10]  396 	ld	(hl), #0xc8
                                    397 ;src/pong.c:26: move_sprite((n << 2) + 2, x, y + 16);
    000001B2 7B               [ 4]  398 	ld	a, e
    000001B3 C6 10            [ 7]  399 	add	a, #0x10
                                    400 ;../../../include/sms/sms.h:848: shadow_OAM[nb] = (y < VDP_SAT_TERM) ? y : 0xC0;
    000001B5 4F               [ 4]  401 	ld	c, a
    000001B6 D6 D0            [ 7]  402 	sub	a, #0xd0
    000001B8 30 05            [12]  403 	jr	NC, 00168$
    000001BA DD 71 FF         [19]  404 	ld	-1 (ix), c
    000001BD 18 04            [12]  405 	jr	00169$
    000001BF                        406 00168$:
    000001BF DD 36 FF C0      [19]  407 	ld	-1 (ix), #0xc0
    000001C3                        408 00169$:
    000001C3 DD 7E FF         [19]  409 	ld	a, -1 (ix)
    000001C6 32r06r00         [13]  410 	ld	(#(_shadow_OAM + 6)),a
                                    411 ;../../../include/sms/sms.h:849: shadow_OAM[0x40+(nb << 1)] = x;
    000001C9 21r4Cr00         [10]  412 	ld	hl, #_shadow_OAM+76
    000001CC 36 C8            [10]  413 	ld	(hl), #0xc8
                                    414 ;src/pong.c:110: ballX += spd_ballX, ballY += spd_ballY;
    000001CE 3Ar0Br00         [13]  415 	ld	a, (_ballX+0)
    000001D1 21r0Dr00         [10]  416 	ld	hl, #_spd_ballX
    000001D4 86               [ 7]  417 	add	a, (hl)
    000001D5 32r0Br00         [13]  418 	ld	(_ballX+0), a
    000001D8 3Ar0Cr00         [13]  419 	ld	a, (_ballY+0)
    000001DB 21r0Er00         [10]  420 	ld	hl, #_spd_ballY
    000001DE 86               [ 7]  421 	add	a, (hl)
    000001DF 32r0Cr00         [13]  422 	ld	(_ballY+0), a
                                    423 ;src/pong.c:112: if ((ballY < YMIN) || (ballY > (YMAX + 24))) {
    000001E2 3Ar0Cr00         [13]  424 	ld	a, (_ballY+0)
    000001E5 D6 1C            [ 7]  425 	sub	a, #0x1c
    000001E7 38 08            [12]  426 	jr	C, 00121$
    000001E9 3E 7C            [ 7]  427 	ld	a, #0x7c
    000001EB 21r0Cr00         [10]  428 	ld	hl, #_ballY
    000001EE 96               [ 7]  429 	sub	a, (hl)
    000001EF 30 06            [12]  430 	jr	NC, 00122$
    000001F1                        431 00121$:
                                    432 ;src/pong.c:113: spd_ballY = -spd_ballY; 
    000001F1 21r0Er00         [10]  433 	ld	hl, #_spd_ballY
    000001F4 AF               [ 4]  434 	xor	a, a
    000001F5 96               [ 7]  435 	sub	a, (hl)
    000001F6 77               [ 7]  436 	ld	(hl), a
    000001F7                        437 00122$:
                                    438 ;src/pong.c:117: if ((ballY > player1) && (ballY < (player1 + 24)) && (spd_ballX < 0)) 
    000001F7 3Ar0Cr00         [13]  439 	ld	a, (_ballY+0)
    000001FA DD 77 FD         [19]  440 	ld	-3 (ix), a
    000001FD DD 36 FE 00      [19]  441 	ld	-2 (ix), #0x00
                                    442 ;src/pong.c:118: spd_ballX = -spd_ballX;
    00000201 21r0Dr00         [10]  443 	ld	hl, #_spd_ballX
    00000204 AF               [ 4]  444 	xor	a, a
    00000205 96               [ 7]  445 	sub	a, (hl)
    00000206 DD 77 FF         [19]  446 	ld	-1 (ix), a
                                    447 ;src/pong.c:116: if (ballX < (PLAYER1_X + 8)) {
    00000209 3Ar0Br00         [13]  448 	ld	a, (_ballX+0)
    0000020C D6 38            [ 7]  449 	sub	a, #0x38
    0000020E 30 35            [12]  450 	jr	NC, 00135$
                                    451 ;src/pong.c:117: if ((ballY > player1) && (ballY < (player1 + 24)) && (spd_ballX < 0)) 
    00000210 3Ar05r00         [13]  452 	ld	a, (_player1+0)
    00000213 FD 21r0Cr00      [14]  453 	ld	iy, #_ballY
    00000217 FD 96 00         [19]  454 	sub	a, 0 (iy)
    0000021A 30 69            [12]  455 	jr	NC, 00136$
    0000021C 3Ar05r00         [13]  456 	ld	a, (_player1+0)
    0000021F 06 00            [ 7]  457 	ld	b, #0x00
    00000221 C6 18            [ 7]  458 	add	a, #0x18
    00000223 4F               [ 4]  459 	ld	c, a
    00000224 30 01            [12]  460 	jr	NC, 00373$
    00000226 04               [ 4]  461 	inc	b
    00000227                        462 00373$:
    00000227 DD 7E FD         [19]  463 	ld	a, -3 (ix)
    0000022A 91               [ 4]  464 	sub	a, c
    0000022B 3E 00            [ 7]  465 	ld	a, #0x00
    0000022D 98               [ 4]  466 	sbc	a, b
    0000022E E2r33r02         [10]  467 	jp	PO, 00374$
    00000231 EE 80            [ 7]  468 	xor	a, #0x80
    00000233                        469 00374$:
    00000233 F2r85r02         [10]  470 	jp	P, 00136$
    00000236 3Ar0Dr00         [13]  471 	ld	a, (_spd_ballX+0)
    00000239 CB 7F            [ 8]  472 	bit	7, a
    0000023B 28 48            [12]  473 	jr	Z, 00136$
                                    474 ;src/pong.c:118: spd_ballX = -spd_ballX;
    0000023D DD 7E FF         [19]  475 	ld	a, -1 (ix)
    00000240 32r0Dr00         [13]  476 	ld	(_spd_ballX+0), a
    00000243 18 40            [12]  477 	jr	00136$
    00000245                        478 00135$:
                                    479 ;src/pong.c:119: } else if (ballX > (PLAYER2_X - 8)) {
    00000245 3E C0            [ 7]  480 	ld	a, #0xc0
    00000247 21r0Br00         [10]  481 	ld	hl, #_ballX
    0000024A 96               [ 7]  482 	sub	a, (hl)
    0000024B 30 38            [12]  483 	jr	NC, 00136$
                                    484 ;src/pong.c:120: if ((ballY > player2) && (ballY < (player2 + 24)) && (spd_ballX > 0)) 
    0000024D 3Ar06r00         [13]  485 	ld	a, (_player2+0)
    00000250 21r0Cr00         [10]  486 	ld	hl, #_ballY
    00000253 96               [ 7]  487 	sub	a, (hl)
    00000254 30 2F            [12]  488 	jr	NC, 00136$
    00000256 3Ar06r00         [13]  489 	ld	a, (_player2+0)
    00000259 26 00            [ 7]  490 	ld	h, #0x00
                                    491 ;	spillPairReg hl
                                    492 ;	spillPairReg hl
    0000025B 6F               [ 4]  493 	ld	l, a
                                    494 ;	spillPairReg hl
                                    495 ;	spillPairReg hl
    0000025C 11 18 00         [10]  496 	ld	de, #0x0018
    0000025F 19               [11]  497 	add	hl, de
    00000260 DD 7E FD         [19]  498 	ld	a, -3 (ix)
    00000263 95               [ 4]  499 	sub	a, l
    00000264 3E 00            [ 7]  500 	ld	a, #0x00
    00000266 9C               [ 4]  501 	sbc	a, h
    00000267 E2r6Cr02         [10]  502 	jp	PO, 00375$
    0000026A EE 80            [ 7]  503 	xor	a, #0x80
    0000026C                        504 00375$:
    0000026C F2r85r02         [10]  505 	jp	P, 00136$
    0000026F AF               [ 4]  506 	xor	a, a
    00000270 FD 21r0Dr00      [14]  507 	ld	iy, #_spd_ballX
    00000274 FD 96 00         [19]  508 	sub	a, 0 (iy)
    00000277 E2r7Cr02         [10]  509 	jp	PO, 00376$
    0000027A EE 80            [ 7]  510 	xor	a, #0x80
    0000027C                        511 00376$:
    0000027C F2r85r02         [10]  512 	jp	P, 00136$
                                    513 ;src/pong.c:121: spd_ballX = -spd_ballX;
    0000027F DD 7E FF         [19]  514 	ld	a, -1 (ix)
    00000282 32r0Dr00         [13]  515 	ld	(_spd_ballX+0), a
    00000285                        516 00136$:
                                    517 ;src/pong.c:118: spd_ballX = -spd_ballX;
    00000285 21r0Dr00         [10]  518 	ld	hl, #_spd_ballX
    00000288 AF               [ 4]  519 	xor	a, a
    00000289 96               [ 7]  520 	sub	a, (hl)
    0000028A DD 77 FF         [19]  521 	ld	-1 (ix), a
                                    522 ;src/pong.c:124: if (ballX <= PLAYER1_X) {
    0000028D 3E 30            [ 7]  523 	ld	a, #0x30
    0000028F FD 21r0Br00      [14]  524 	ld	iy, #_ballX
    00000293 FD 96 00         [19]  525 	sub	a, 0 (iy)
    00000296 38 32            [12]  526 	jr	C, 00140$
                                    527 ;src/pong.c:126: ballX = INITBALLX, ballY = INITBALLY;
    00000298 FD 36 00 54      [19]  528 	ld	0 (iy), #0x54
    0000029C 3E 48            [ 7]  529 	ld	a, #0x48
    0000029E 32r0Cr00         [13]  530 	ld	(#_ballY), a
                                    531 ;src/pong.c:127: spd_ballX = -spd_ballX;
    000002A1 DD 7E FF         [19]  532 	ld	a, -1 (ix)
    000002A4 32r0Dr00         [13]  533 	ld	(_spd_ballX+0), a
                                    534 ;src/pong.c:128: player2_score++;
    000002A7 2Ar09r00         [16]  535 	ld	hl, (_player2_score)
    000002AA 23               [ 6]  536 	inc	hl
    000002AB 22r09r00         [16]  537 	ld	(_player2_score), hl
                                    538 ;src/pong.c:129: gotoxy(0, 0); printf(HUD, player1_score, player2_score);
    000002AE 21 00 00         [10]  539 	ld	hl, #0x00
    000002B1 E5               [11]  540 	push	hl
    000002B2 CDr00r00         [17]  541 	call	_gotoxy
    000002B5 F1               [10]  542 	pop	af
    000002B6 2Ar09r00         [16]  543 	ld	hl, (_player2_score)
    000002B9 E5               [11]  544 	push	hl
    000002BA 2Ar07r00         [16]  545 	ld	hl, (_player1_score)
    000002BD E5               [11]  546 	push	hl
    000002BE 21r27r03         [10]  547 	ld	hl, #_HUD
    000002C1 E5               [11]  548 	push	hl
    000002C2 CDr00r00         [17]  549 	call	_printf
    000002C5 F1               [10]  550 	pop	af
    000002C6 F1               [10]  551 	pop	af
    000002C7 F1               [10]  552 	pop	af
    000002C8 18 3B            [12]  553 	jr	00141$
    000002CA                        554 00140$:
                                    555 ;src/pong.c:130: } else if (ballX > PLAYER2_X) {
    000002CA 3E C8            [ 7]  556 	ld	a, #0xc8
    000002CC FD 21r0Br00      [14]  557 	ld	iy, #_ballX
    000002D0 FD 96 00         [19]  558 	sub	a, 0 (iy)
    000002D3 30 30            [12]  559 	jr	NC, 00141$
                                    560 ;src/pong.c:132: ballX = INITBALLX, ballY = INITBALLY;
    000002D5 FD 36 00 54      [19]  561 	ld	0 (iy), #0x54
    000002D9 3E 48            [ 7]  562 	ld	a, #0x48
    000002DB 32r0Cr00         [13]  563 	ld	(#_ballY), a
                                    564 ;src/pong.c:133: spd_ballX = -spd_ballX;
    000002DE DD 7E FF         [19]  565 	ld	a, -1 (ix)
    000002E1 32r0Dr00         [13]  566 	ld	(_spd_ballX+0), a
                                    567 ;src/pong.c:134: player1_score++;
    000002E4 2Ar07r00         [16]  568 	ld	hl, (_player1_score)
    000002E7 23               [ 6]  569 	inc	hl
    000002E8 22r07r00         [16]  570 	ld	(_player1_score), hl
                                    571 ;src/pong.c:135: gotoxy(0, 0); printf(HUD, player1_score, player2_score);
    000002EB 21 00 00         [10]  572 	ld	hl, #0x00
    000002EE E5               [11]  573 	push	hl
    000002EF CDr00r00         [17]  574 	call	_gotoxy
    000002F2 F1               [10]  575 	pop	af
    000002F3 2Ar09r00         [16]  576 	ld	hl, (_player2_score)
    000002F6 E5               [11]  577 	push	hl
    000002F7 2Ar07r00         [16]  578 	ld	hl, (_player1_score)
    000002FA E5               [11]  579 	push	hl
    000002FB 21r27r03         [10]  580 	ld	hl, #_HUD
    000002FE E5               [11]  581 	push	hl
    000002FF CDr00r00         [17]  582 	call	_printf
    00000302 F1               [10]  583 	pop	af
    00000303 F1               [10]  584 	pop	af
    00000304 F1               [10]  585 	pop	af
    00000305                        586 00141$:
                                    587 ;src/pong.c:138: move_sprite(3, ballX, ballY);
    00000305 3Ar0Cr00         [13]  588 	ld	a, (_ballY+0)
    00000308 47               [ 4]  589 	ld	b, a
    00000309 3Ar0Br00         [13]  590 	ld	a, (_ballX+0)
    0000030C 4F               [ 4]  591 	ld	c, a
                                    592 ;../../../include/sms/sms.h:848: shadow_OAM[nb] = (y < VDP_SAT_TERM) ? y : 0xC0;
    0000030D 78               [ 4]  593 	ld	a, b
    0000030E D6 D0            [ 7]  594 	sub	a, #0xd0
    00000310 38 02            [12]  595 	jr	C, 00171$
    00000312 06 C0            [ 7]  596 	ld	b, #0xc0
    00000314                        597 00171$:
    00000314 21r03r00         [10]  598 	ld	hl, #(_shadow_OAM + 3)
    00000317 70               [ 7]  599 	ld	(hl), b
                                    600 ;../../../include/sms/sms.h:849: shadow_OAM[0x40+(nb << 1)] = x;
    00000318 21r46r00         [10]  601 	ld	hl, #(_shadow_OAM + 70)
    0000031B 71               [ 7]  602 	ld	(hl), c
                                    603 ;src/pong.c:141: vsync();
    0000031C CDr00r00         [17]  604 	call	_vsync
    0000031F C3rAEr00         [10]  605 	jp	00143$
    00000322                        606 00156$:
                                    607 ;src/pong.c:143: }
    00000322 DD F9            [10]  608 	ld	sp, ix
    00000324 DD E1            [14]  609 	pop	ix
    00000326 C9               [10]  610 	ret
    00000327                        611 _HUD:
    00000327 20 70 31 3A 20 25 64   612 	.ascii " p1: %d   p2: %d"
             20 20 20 70 32 3A 20
             25 64
    00000337 00                     613 	.db 0x00
    00000338                        614 ___str_0:
    00000338 44 65 76 69 63 65 20   615 	.ascii "Device must support"
             6D 75 73 74 20 73 75
             70 70 6F 72 74
    0000034B 0A                     616 	.db 0x0a
    0000034C 61 74 20 6C 65 61 73   617 	.ascii "at least two joypads"
             74 20 74 77 6F 20 6A
             6F 79 70 61 64 73
    00000360 00                     618 	.db 0x00
                                    619 	.area _CODE
                                    620 	.area _INITIALIZER
    00000000                        621 __xinit__sprite_data:
    00000000 3C                     622 	.db #0x3c	; 60
    00000001 3C                     623 	.db #0x3c	; 60
    00000002 42                     624 	.db #0x42	; 66	'B'
    00000003 7E                     625 	.db #0x7e	; 126
    00000004 99                     626 	.db #0x99	; 153
    00000005 FF                     627 	.db #0xff	; 255
    00000006 A9                     628 	.db #0xa9	; 169
    00000007 FF                     629 	.db #0xff	; 255
    00000008 89                     630 	.db #0x89	; 137
    00000009 FF                     631 	.db #0xff	; 255
    0000000A 89                     632 	.db #0x89	; 137
    0000000B FF                     633 	.db #0xff	; 255
    0000000C 42                     634 	.db #0x42	; 66	'B'
    0000000D 7E                     635 	.db #0x7e	; 126
    0000000E 3C                     636 	.db #0x3c	; 60
    0000000F 3C                     637 	.db #0x3c	; 60
    00000010 3C                     638 	.db #0x3c	; 60
    00000011 3C                     639 	.db #0x3c	; 60
    00000012 42                     640 	.db #0x42	; 66	'B'
    00000013 7E                     641 	.db #0x7e	; 126
    00000014 B9                     642 	.db #0xb9	; 185
    00000015 FF                     643 	.db #0xff	; 255
    00000016 89                     644 	.db #0x89	; 137
    00000017 FF                     645 	.db #0xff	; 255
    00000018 91                     646 	.db #0x91	; 145
    00000019 FF                     647 	.db #0xff	; 255
    0000001A B9                     648 	.db #0xb9	; 185
    0000001B FF                     649 	.db #0xff	; 255
    0000001C 42                     650 	.db #0x42	; 66	'B'
    0000001D 7E                     651 	.db #0x7e	; 126
    0000001E 3C                     652 	.db #0x3c	; 60
    0000001F 3C                     653 	.db #0x3c	; 60
    00000020 3C                     654 	.db #0x3c	; 60
    00000021 3C                     655 	.db #0x3c	; 60
    00000022 42                     656 	.db #0x42	; 66	'B'
    00000023 7E                     657 	.db #0x7e	; 126
    00000024 99                     658 	.db #0x99	; 153
    00000025 FF                     659 	.db #0xff	; 255
    00000026 89                     660 	.db #0x89	; 137
    00000027 FF                     661 	.db #0xff	; 255
    00000028 99                     662 	.db #0x99	; 153
    00000029 FF                     663 	.db #0xff	; 255
    0000002A 89                     664 	.db #0x89	; 137
    0000002B FF                     665 	.db #0xff	; 255
    0000002C 5A                     666 	.db #0x5a	; 90	'Z'
    0000002D 7E                     667 	.db #0x7e	; 126
    0000002E 3C                     668 	.db #0x3c	; 60
    0000002F 3C                     669 	.db #0x3c	; 60
    00000030 3C                     670 	.db #0x3c	; 60
    00000031 3C                     671 	.db #0x3c	; 60
    00000032 42                     672 	.db #0x42	; 66	'B'
    00000033 7E                     673 	.db #0x7e	; 126
    00000034 A9                     674 	.db #0xa9	; 169
    00000035 FF                     675 	.db #0xff	; 255
    00000036 A9                     676 	.db #0xa9	; 169
    00000037 FF                     677 	.db #0xff	; 255
    00000038 B9                     678 	.db #0xb9	; 185
    00000039 FF                     679 	.db #0xff	; 255
    0000003A 89                     680 	.db #0x89	; 137
    0000003B FF                     681 	.db #0xff	; 255
    0000003C 42                     682 	.db #0x42	; 66	'B'
    0000003D 7E                     683 	.db #0x7e	; 126
    0000003E 3C                     684 	.db #0x3c	; 60
    0000003F 3C                     685 	.db #0x3c	; 60
                                    686 	.area _CABS (ABS)
