                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module pong
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _init_pad
                                     13 	.globl _printf
                                     14 	.globl _gotoxy
                                     15 	.globl _set_sprite_data
                                     16 	.globl _vsync
                                     17 	.globl _joypad_ex
                                     18 	.globl _joypad_init
                                     19 	.globl _sprite_data
                                     20 	.globl _spd_ballY
                                     21 	.globl _spd_ballX
                                     22 	.globl _ballY
                                     23 	.globl _ballX
                                     24 	.globl _player2_score
                                     25 	.globl _player1_score
                                     26 	.globl _player2
                                     27 	.globl _player1
                                     28 	.globl _joypads
                                     29 	.globl _HUD
                                     30 ;--------------------------------------------------------
                                     31 ; special function registers
                                     32 ;--------------------------------------------------------
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area _DATA
    00000000                         37 _joypads::
    00000000                         38 	.ds 5
    00000005                         39 _player1::
    00000005                         40 	.ds 1
    00000006                         41 _player2::
    00000006                         42 	.ds 1
    00000007                         43 _player1_score::
    00000007                         44 	.ds 2
    00000009                         45 _player2_score::
    00000009                         46 	.ds 2
    0000000B                         47 _ballX::
    0000000B                         48 	.ds 1
    0000000C                         49 _ballY::
    0000000C                         50 	.ds 1
    0000000D                         51 _spd_ballX::
    0000000D                         52 	.ds 1
    0000000E                         53 _spd_ballY::
    0000000E                         54 	.ds 1
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area _INITIALIZED
    00000000                         59 _sprite_data::
    00000000                         60 	.ds 64
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area _DABS (ABS)
                                     65 ;--------------------------------------------------------
                                     66 ; global & static initialisations
                                     67 ;--------------------------------------------------------
                                     68 	.area _HOME
                                     69 	.area _GSINIT
                                     70 	.area _GSFINAL
                                     71 	.area _GSINIT
                                     72 ;--------------------------------------------------------
                                     73 ; Home
                                     74 ;--------------------------------------------------------
                                     75 	.area _HOME
                                     76 	.area _HOME
                                     77 ;--------------------------------------------------------
                                     78 ; code
                                     79 ;--------------------------------------------------------
                                     80 	.area _CODE
                                     81 ;src/pong.c:16: void init_pad(uint8_t n) {
                                     82 ;	---------------------------------
                                     83 ; Function init_pad
                                     84 ; ---------------------------------
    00000000                         85 _init_pad::
                                     86 ;src/pong.c:17: set_sprite_tile(n << 2, n);
    00000000 4F               [ 4]   87 	ld	c, a
    00000001 87               [ 4]   88 	add	a, a
    00000002 87               [ 4]   89 	add	a, a
    00000003 47               [ 4]   90 	ld	b, a
                                     91 ;../../../include/gb/gb.h:1875: shadow_OAM[nb].tile=tile;
    00000004 68               [ 4]   92 	ld	l, b
                                     93 ;	spillPairReg hl
                                     94 ;	spillPairReg hl
    00000005 26 00            [ 8]   95 	ld	h, #0x00
                                     96 ;	spillPairReg hl
                                     97 ;	spillPairReg hl
    00000007 29               [ 8]   98 	add	hl, hl
    00000008 29               [ 8]   99 	add	hl, hl
    00000009 11r00r00         [12]  100 	ld	de, #_shadow_OAM
    0000000C 19               [ 8]  101 	add	hl, de
    0000000D 23               [ 8]  102 	inc	hl
    0000000E 23               [ 8]  103 	inc	hl
    0000000F 71               [ 8]  104 	ld	(hl), c
                                    105 ;src/pong.c:18: set_sprite_tile((n << 2) + 1, n);
    00000010 58               [ 4]  106 	ld	e, b
    00000011 1C               [ 4]  107 	inc	e
                                    108 ;../../../include/gb/gb.h:1875: shadow_OAM[nb].tile=tile;
    00000012 6B               [ 4]  109 	ld	l, e
                                    110 ;	spillPairReg hl
                                    111 ;	spillPairReg hl
    00000013 26 00            [ 8]  112 	ld	h, #0x00
                                    113 ;	spillPairReg hl
                                    114 ;	spillPairReg hl
    00000015 29               [ 8]  115 	add	hl, hl
    00000016 29               [ 8]  116 	add	hl, hl
    00000017 11r00r00         [12]  117 	ld	de, #_shadow_OAM
    0000001A 19               [ 8]  118 	add	hl, de
    0000001B 23               [ 8]  119 	inc	hl
    0000001C 23               [ 8]  120 	inc	hl
    0000001D 71               [ 8]  121 	ld	(hl), c
                                    122 ;src/pong.c:19: set_sprite_tile((n << 2) + 2, n);
    0000001E 04               [ 4]  123 	inc	b
    0000001F 04               [ 4]  124 	inc	b
                                    125 ;../../../include/gb/gb.h:1875: shadow_OAM[nb].tile=tile;
    00000020 11r00r00         [12]  126 	ld	de, #_shadow_OAM+0
    00000023 68               [ 4]  127 	ld	l, b
                                    128 ;	spillPairReg hl
                                    129 ;	spillPairReg hl
    00000024 26 00            [ 8]  130 	ld	h, #0x00
                                    131 ;	spillPairReg hl
                                    132 ;	spillPairReg hl
    00000026 29               [ 8]  133 	add	hl, hl
    00000027 29               [ 8]  134 	add	hl, hl
    00000028 19               [ 8]  135 	add	hl, de
    00000029 23               [ 8]  136 	inc	hl
    0000002A 23               [ 8]  137 	inc	hl
    0000002B 71               [ 8]  138 	ld	(hl), c
                                    139 ;src/pong.c:19: set_sprite_tile((n << 2) + 2, n);
                                    140 ;src/pong.c:20: }
    0000002C C9               [16]  141 	ret
                                    142 ;src/pong.c:51: void main(void) {
                                    143 ;	---------------------------------
                                    144 ; Function main
                                    145 ; ---------------------------------
    0000002D                        146 _main::
    0000002D E8 FD            [16]  147 	add	sp, #-3
                                    148 ;src/pong.c:56: set_sprite_data(0, 4, sprite_data);
    0000002F 11r00r00         [12]  149 	ld	de, #_sprite_data
    00000032 D5               [16]  150 	push	de
    00000033 21 00 04         [12]  151 	ld	hl, #0x400
    00000036 E5               [16]  152 	push	hl
    00000037 CDr00r00         [24]  153 	call	_set_sprite_data
    0000003A E8 04            [16]  154 	add	sp, #4
                                    155 ;src/pong.c:59: init_pad(0);
    0000003C AF               [ 4]  156 	xor	a, a
    0000003D CDr00r00         [24]  157 	call	_init_pad
                                    158 ;src/pong.c:60: init_pad(1);
    00000040 3E 01            [ 8]  159 	ld	a, #0x01
    00000042 CDr00r00         [24]  160 	call	_init_pad
                                    161 ;../../../include/gb/gb.h:1875: shadow_OAM[nb].tile=tile;
    00000045 21r0Er00         [12]  162 	ld	hl, #(_shadow_OAM + 14)
    00000048 36 02            [12]  163 	ld	(hl), #0x02
                                    164 ;src/pong.c:66: SHOW_BKG; SHOW_SPRITES;
    0000004A F0r00            [12]  165 	ldh	a, (_LCDC_REG + 0)
    0000004C F6 80            [ 8]  166 	or	a, #0x80
    0000004E E0r00            [12]  167 	ldh	(_LCDC_REG + 0), a
    00000050 F0r00            [12]  168 	ldh	a, (_LCDC_REG + 0)
    00000052 F6 40            [ 8]  169 	or	a, #0x40
    00000054 E0r00            [12]  170 	ldh	(_LCDC_REG + 0), a
                                    171 ;src/pong.c:69: if (joypad_init(2, &joypads) != 2) {
    00000056 11r00r00         [12]  172 	ld	de, #_joypads
    00000059 D5               [16]  173 	push	de
    0000005A 3E 02            [ 8]  174 	ld	a, #0x02
    0000005C F5               [16]  175 	push	af
    0000005D 33               [ 8]  176 	inc	sp
    0000005E CDr00r00         [24]  177 	call	_joypad_init
    00000061 E8 03            [16]  178 	add	sp, #3
    00000063 7B               [ 4]  179 	ld	a, e
    00000064 D6 02            [ 8]  180 	sub	a, #0x02
    00000066 28 0B            [12]  181 	jr	Z, 00102$
                                    182 ;src/pong.c:70: printf("Device must support\nat least two joypads");
    00000068 11rC5r02         [12]  183 	ld	de, #___str_0
    0000006B D5               [16]  184 	push	de
    0000006C CDr00r00         [24]  185 	call	_printf
    0000006F E1               [12]  186 	pop	hl
                                    187 ;src/pong.c:71: return;
    00000070 C3rB1r02         [16]  188 	jp	00155$
    00000073                        189 00102$:
                                    190 ;src/pong.c:75: player1 = 64, player2 = 64;
    00000073 21r05r00         [12]  191 	ld	hl, #_player1
    00000076 36 40            [12]  192 	ld	(hl), #0x40
    00000078 21r06r00         [12]  193 	ld	hl, #_player2
    0000007B 36 40            [12]  194 	ld	(hl), #0x40
                                    195 ;src/pong.c:76: player1_score = player2_score = 0;
    0000007D AF               [ 4]  196 	xor	a, a
    0000007E 21r09r00         [12]  197 	ld	hl, #_player2_score
    00000081 22               [ 8]  198 	ld	(hl+), a
    00000082 77               [ 8]  199 	ld	(hl), a
    00000083 AF               [ 4]  200 	xor	a, a
    00000084 21r07r00         [12]  201 	ld	hl, #_player1_score
    00000087 22               [ 8]  202 	ld	(hl+), a
    00000088 77               [ 8]  203 	ld	(hl), a
                                    204 ;src/pong.c:79: printf(HUD, player1_score, player2_score);
    00000089 11 00 00         [12]  205 	ld	de, #0x0000
    0000008C D5               [16]  206 	push	de
    0000008D D5               [16]  207 	push	de
    0000008E 11rB4r02         [12]  208 	ld	de, #_HUD
    00000091 D5               [16]  209 	push	de
    00000092 CDr00r00         [24]  210 	call	_printf
    00000095 E8 06            [16]  211 	add	sp, #6
                                    212 ;src/pong.c:82: ballX = INITBALLX, ballY = INITBALLY;
    00000097 21r0Br00         [12]  213 	ld	hl, #_ballX
    0000009A 36 54            [12]  214 	ld	(hl), #0x54
    0000009C 21r0Cr00         [12]  215 	ld	hl, #_ballY
    0000009F 36 48            [12]  216 	ld	(hl), #0x48
                                    217 ;src/pong.c:83: spd_ballX = 1, spd_ballY = 1;
    000000A1 21r0Dr00         [12]  218 	ld	hl, #_spd_ballX
    000000A4 36 01            [12]  219 	ld	(hl), #0x01
    000000A6 21r0Er00         [12]  220 	ld	hl, #_spd_ballY
    000000A9 36 01            [12]  221 	ld	(hl), #0x01
                                    222 ;src/pong.c:85: while(1) {
    000000AB                        223 00143$:
                                    224 ;src/pong.c:87: joypad_ex(&joypads);
    000000AB 11r00r00         [12]  225 	ld	de, #_joypads
    000000AE CDr00r00         [24]  226 	call	_joypad_ex
                                    227 ;src/pong.c:90: if (joypads.joy0 & J_UP) {
    000000B1 21r01r00         [12]  228 	ld	hl, #(_joypads + 1)
    000000B4 4E               [ 8]  229 	ld	c, (hl)
                                    230 ;src/pong.c:91: player1 -= 2;
    000000B5 FAr05r00         [16]  231 	ld	a, (#_player1)
                                    232 ;src/pong.c:90: if (joypads.joy0 & J_UP) {
    000000B8 CB 51            [ 8]  233 	bit	2, c
    000000BA 28 0F            [12]  234 	jr	Z, 00110$
                                    235 ;src/pong.c:91: player1 -= 2;
    000000BC C6 FE            [ 8]  236 	add	a, #0xfe
    000000BE 21r05r00         [12]  237 	ld	hl, #_player1
    000000C1 77               [ 8]  238 	ld	(hl), a
                                    239 ;src/pong.c:92: if (player1 < YMIN) player1 = YMIN;
    000000C2 7E               [ 8]  240 	ld	a, (hl)
    000000C3 D6 1C            [ 8]  241 	sub	a, #0x1c
    000000C5 30 15            [12]  242 	jr	NC, 00111$
    000000C7 36 1C            [12]  243 	ld	(hl), #0x1c
    000000C9 18 11            [12]  244 	jr	00111$
    000000CB                        245 00110$:
                                    246 ;src/pong.c:93: } else if (joypads.joy0 & J_DOWN) {
    000000CB CB 59            [ 8]  247 	bit	3, c
    000000CD 28 0D            [12]  248 	jr	Z, 00111$
                                    249 ;src/pong.c:94: player1 += 2;
    000000CF C6 02            [ 8]  250 	add	a, #0x02
    000000D1 21r05r00         [12]  251 	ld	hl, #_player1
    000000D4 77               [ 8]  252 	ld	(hl), a
                                    253 ;src/pong.c:95: if (player1 > YMAX) player1 = YMAX;            
    000000D5 3E 64            [ 8]  254 	ld	a, #0x64
    000000D7 96               [ 8]  255 	sub	a, (hl)
    000000D8 30 02            [12]  256 	jr	NC, 00111$
    000000DA 36 64            [12]  257 	ld	(hl), #0x64
    000000DC                        258 00111$:
                                    259 ;src/pong.c:97: draw_pad(0, PLAYER1_X, player1);
    000000DC 21r05r00         [12]  260 	ld	hl, #_player1
    000000DF 4E               [ 8]  261 	ld	c, (hl)
    000000E0 41               [ 4]  262 	ld	b, c
                                    263 ;../../../include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    000000E1 21r00r00         [12]  264 	ld	hl, #_shadow_OAM
                                    265 ;../../../include/gb/gb.h:1962: itm->y=y, itm->x=x;
    000000E4 79               [ 4]  266 	ld	a, c
    000000E5 22               [ 8]  267 	ld	(hl+), a
    000000E6 36 08            [12]  268 	ld	(hl), #0x08
                                    269 ;src/pong.c:25: move_sprite((n << 2) + 1, x, y + 8);
    000000E8 F8 02            [12]  270 	ldhl	sp,	#2
    000000EA 70               [ 8]  271 	ld	(hl), b
    000000EB 7E               [ 8]  272 	ld	a, (hl)
    000000EC C6 08            [ 8]  273 	add	a, #0x08
                                    274 ;../../../include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
                                    275 ;../../../include/gb/gb.h:1962: itm->y=y, itm->x=x;
    000000EE 21r04r00         [12]  276 	ld	hl, #(_shadow_OAM + 4)
    000000F1 22               [ 8]  277 	ld	(hl+), a
    000000F2 36 08            [12]  278 	ld	(hl), #0x08
                                    279 ;src/pong.c:26: move_sprite((n << 2) + 2, x, y + 16);
    000000F4 F8 02            [12]  280 	ldhl	sp,	#2
    000000F6 7E               [ 8]  281 	ld	a, (hl)
    000000F7 C6 10            [ 8]  282 	add	a, #0x10
                                    283 ;../../../include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
                                    284 ;../../../include/gb/gb.h:1962: itm->y=y, itm->x=x;
    000000F9 21r08r00         [12]  285 	ld	hl, #(_shadow_OAM + 8)
    000000FC 22               [ 8]  286 	ld	(hl+), a
    000000FD 36 08            [12]  287 	ld	(hl), #0x08
                                    288 ;src/pong.c:100: if (joypads.joy1 & J_UP) {
    000000FF 21r02r00         [12]  289 	ld	hl, #(_joypads + 2)
    00000102 4E               [ 8]  290 	ld	c, (hl)
                                    291 ;src/pong.c:101: player2 -= 2;
    00000103 FAr06r00         [16]  292 	ld	a, (#_player2)
                                    293 ;src/pong.c:100: if (joypads.joy1 & J_UP) {
    00000106 CB 51            [ 8]  294 	bit	2, c
    00000108 28 0F            [12]  295 	jr	Z, 00119$
                                    296 ;src/pong.c:101: player2 -= 2;
    0000010A C6 FE            [ 8]  297 	add	a, #0xfe
    0000010C 21r06r00         [12]  298 	ld	hl, #_player2
    0000010F 77               [ 8]  299 	ld	(hl), a
                                    300 ;src/pong.c:102: if (player2 < YMIN) player2 = YMIN;
    00000110 7E               [ 8]  301 	ld	a, (hl)
    00000111 D6 1C            [ 8]  302 	sub	a, #0x1c
    00000113 30 15            [12]  303 	jr	NC, 00120$
    00000115 36 1C            [12]  304 	ld	(hl), #0x1c
    00000117 18 11            [12]  305 	jr	00120$
    00000119                        306 00119$:
                                    307 ;src/pong.c:103: } else if (joypads.joy1 & J_DOWN) {
    00000119 CB 59            [ 8]  308 	bit	3, c
    0000011B 28 0D            [12]  309 	jr	Z, 00120$
                                    310 ;src/pong.c:104: player2 += 2;
    0000011D C6 02            [ 8]  311 	add	a, #0x02
    0000011F 21r06r00         [12]  312 	ld	hl, #_player2
    00000122 77               [ 8]  313 	ld	(hl), a
                                    314 ;src/pong.c:105: if (player2 > YMAX) player2 = YMAX;            
    00000123 3E 64            [ 8]  315 	ld	a, #0x64
    00000125 96               [ 8]  316 	sub	a, (hl)
    00000126 30 02            [12]  317 	jr	NC, 00120$
    00000128 36 64            [12]  318 	ld	(hl), #0x64
    0000012A                        319 00120$:
                                    320 ;src/pong.c:107: draw_pad(1, PLAYER2_X, player2);
    0000012A 21r06r00         [12]  321 	ld	hl, #_player2
    0000012D 4E               [ 8]  322 	ld	c, (hl)
    0000012E 41               [ 4]  323 	ld	b, c
                                    324 ;../../../include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    0000012F 21r10r00         [12]  325 	ld	hl, #(_shadow_OAM + 16)
                                    326 ;../../../include/gb/gb.h:1962: itm->y=y, itm->x=x;
    00000132 71               [ 8]  327 	ld	(hl), c
    00000133 23               [ 8]  328 	inc	hl
    00000134 36 A0            [12]  329 	ld	(hl), #0xa0
                                    330 ;src/pong.c:25: move_sprite((n << 2) + 1, x, y + 8);
    00000136 F8 02            [12]  331 	ldhl	sp,	#2
    00000138 70               [ 8]  332 	ld	(hl), b
    00000139 7E               [ 8]  333 	ld	a, (hl)
    0000013A C6 08            [ 8]  334 	add	a, #0x08
    0000013C 4F               [ 4]  335 	ld	c, a
                                    336 ;../../../include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    0000013D 21r14r00         [12]  337 	ld	hl, #(_shadow_OAM + 20)
                                    338 ;../../../include/gb/gb.h:1962: itm->y=y, itm->x=x;
    00000140 71               [ 8]  339 	ld	(hl), c
    00000141 23               [ 8]  340 	inc	hl
    00000142 36 A0            [12]  341 	ld	(hl), #0xa0
                                    342 ;src/pong.c:26: move_sprite((n << 2) + 2, x, y + 16);
    00000144 F8 02            [12]  343 	ldhl	sp,	#2
    00000146 7E               [ 8]  344 	ld	a, (hl)
    00000147 C6 10            [ 8]  345 	add	a, #0x10
    00000149 4F               [ 4]  346 	ld	c, a
                                    347 ;../../../include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    0000014A 21r18r00         [12]  348 	ld	hl, #(_shadow_OAM + 24)
                                    349 ;../../../include/gb/gb.h:1962: itm->y=y, itm->x=x;
    0000014D 71               [ 8]  350 	ld	(hl), c
    0000014E 23               [ 8]  351 	inc	hl
    0000014F 36 A0            [12]  352 	ld	(hl), #0xa0
                                    353 ;src/pong.c:110: ballX += spd_ballX, ballY += spd_ballY;
    00000151 FAr0Br00         [16]  354 	ld	a, (#_ballX)
    00000154 21r0Dr00         [12]  355 	ld	hl, #_spd_ballX
    00000157 86               [ 8]  356 	add	a, (hl)
    00000158 EAr0Br00         [16]  357 	ld	(#_ballX),a
    0000015B FAr0Cr00         [16]  358 	ld	a, (#_ballY)
    0000015E 21r0Er00         [12]  359 	ld	hl, #_spd_ballY
    00000161 86               [ 8]  360 	add	a, (hl)
    00000162 21r0Cr00         [12]  361 	ld	hl, #_ballY
    00000165 77               [ 8]  362 	ld	(hl), a
                                    363 ;src/pong.c:112: if ((ballY < YMIN) || (ballY > (YMAX + 24))) {
    00000166 7E               [ 8]  364 	ld	a, (hl)
    00000167 D6 1C            [ 8]  365 	sub	a, #0x1c
    00000169 38 05            [12]  366 	jr	C, 00121$
    0000016B 3E 7C            [ 8]  367 	ld	a, #0x7c
    0000016D 96               [ 8]  368 	sub	a, (hl)
    0000016E 30 06            [12]  369 	jr	NC, 00122$
    00000170                        370 00121$:
                                    371 ;src/pong.c:113: spd_ballY = -spd_ballY; 
    00000170 AF               [ 4]  372 	xor	a, a
    00000171 21r0Er00         [12]  373 	ld	hl, #_spd_ballY
    00000174 96               [ 8]  374 	sub	a, (hl)
    00000175 77               [ 8]  375 	ld	(hl), a
    00000176                        376 00122$:
                                    377 ;src/pong.c:117: if ((ballY > player1) && (ballY < (player1 + 24)) && (spd_ballX < 0)) 
    00000176 FAr0Cr00         [16]  378 	ld	a, (#_ballY)
    00000179 F8 00            [12]  379 	ldhl	sp,	#0
    0000017B 22               [ 8]  380 	ld	(hl+), a
    0000017C 36 00            [12]  381 	ld	(hl), #0x00
                                    382 ;src/pong.c:118: spd_ballX = -spd_ballX;
    0000017E AF               [ 4]  383 	xor	a, a
    0000017F 21r0Dr00         [12]  384 	ld	hl, #_spd_ballX
    00000182 96               [ 8]  385 	sub	a, (hl)
    00000183 F8 02            [12]  386 	ldhl	sp,	#2
    00000185 77               [ 8]  387 	ld	(hl), a
                                    388 ;src/pong.c:116: if (ballX < (PLAYER1_X + 8)) {
    00000186 FAr0Br00         [16]  389 	ld	a, (#_ballX)
    00000189 D6 10            [ 8]  390 	sub	a, #0x10
    0000018B 30 3E            [12]  391 	jr	NC, 00135$
                                    392 ;src/pong.c:117: if ((ballY > player1) && (ballY < (player1 + 24)) && (spd_ballX < 0)) 
    0000018D FAr05r00         [16]  393 	ld	a, (#_player1)
    00000190 21r0Cr00         [12]  394 	ld	hl, #_ballY
    00000193 96               [ 8]  395 	sub	a, (hl)
    00000194 D2r21r02         [16]  396 	jp	NC, 00136$
    00000197 FAr05r00         [16]  397 	ld	a, (#_player1)
    0000019A 06 00            [ 8]  398 	ld	b, #0x00
    0000019C C6 18            [ 8]  399 	add	a, #0x18
    0000019E 4F               [ 4]  400 	ld	c, a
    0000019F 30 01            [12]  401 	jr	NC, 00309$
    000001A1 04               [ 4]  402 	inc	b
    000001A2                        403 00309$:
    000001A2 F8 00            [12]  404 	ldhl	sp,	#0
    000001A4 2A               [ 8]  405 	ld	a, (hl+)
    000001A5 91               [ 4]  406 	sub	a, c
    000001A6 7E               [ 8]  407 	ld	a, (hl)
    000001A7 98               [ 4]  408 	sbc	a, b
    000001A8 56               [ 8]  409 	ld	d, (hl)
    000001A9 78               [ 4]  410 	ld	a, b
    000001AA CB 7F            [ 8]  411 	bit	7,a
    000001AC 28 07            [12]  412 	jr	Z, 00310$
    000001AE CB 7A            [ 8]  413 	bit	7, d
    000001B0 20 08            [12]  414 	jr	NZ, 00311$
    000001B2 BF               [ 4]  415 	cp	a, a
    000001B3 18 05            [12]  416 	jr	00311$
    000001B5                        417 00310$:
    000001B5 CB 7A            [ 8]  418 	bit	7, d
    000001B7 28 01            [12]  419 	jr	Z, 00311$
    000001B9 37               [ 4]  420 	scf
    000001BA                        421 00311$:
    000001BA 30 65            [12]  422 	jr	NC, 00136$
    000001BC FAr0Dr00         [16]  423 	ld	a, (#_spd_ballX)
    000001BF CB 7F            [ 8]  424 	bit	7, a
    000001C1 28 5E            [12]  425 	jr	Z, 00136$
                                    426 ;src/pong.c:118: spd_ballX = -spd_ballX;
    000001C3 F8 02            [12]  427 	ldhl	sp,	#2
    000001C5 7E               [ 8]  428 	ld	a, (hl)
    000001C6 EAr0Dr00         [16]  429 	ld	(#_spd_ballX),a
    000001C9 18 56            [12]  430 	jr	00136$
    000001CB                        431 00135$:
                                    432 ;src/pong.c:119: } else if (ballX > (PLAYER2_X - 8)) {
    000001CB 3E 98            [ 8]  433 	ld	a, #0x98
    000001CD 21r0Br00         [12]  434 	ld	hl, #_ballX
    000001D0 96               [ 8]  435 	sub	a, (hl)
    000001D1 30 4E            [12]  436 	jr	NC, 00136$
                                    437 ;src/pong.c:120: if ((ballY > player2) && (ballY < (player2 + 24)) && (spd_ballX > 0)) 
    000001D3 FAr06r00         [16]  438 	ld	a, (#_player2)
    000001D6 21r0Cr00         [12]  439 	ld	hl, #_ballY
    000001D9 96               [ 8]  440 	sub	a, (hl)
    000001DA 30 45            [12]  441 	jr	NC, 00136$
    000001DC 21r06r00         [12]  442 	ld	hl, #_player2
    000001DF 4E               [ 8]  443 	ld	c, (hl)
    000001E0 06 00            [ 8]  444 	ld	b, #0x00
    000001E2 21 18 00         [12]  445 	ld	hl, #0x0018
    000001E5 09               [ 8]  446 	add	hl, bc
    000001E6 4D               [ 4]  447 	ld	c, l
    000001E7 44               [ 4]  448 	ld	b, h
    000001E8 F8 00            [12]  449 	ldhl	sp,	#0
    000001EA 2A               [ 8]  450 	ld	a, (hl+)
    000001EB 91               [ 4]  451 	sub	a, c
    000001EC 7E               [ 8]  452 	ld	a, (hl)
    000001ED 98               [ 4]  453 	sbc	a, b
    000001EE 56               [ 8]  454 	ld	d, (hl)
    000001EF 78               [ 4]  455 	ld	a, b
    000001F0 CB 7F            [ 8]  456 	bit	7,a
    000001F2 28 07            [12]  457 	jr	Z, 00312$
    000001F4 CB 7A            [ 8]  458 	bit	7, d
    000001F6 20 08            [12]  459 	jr	NZ, 00313$
    000001F8 BF               [ 4]  460 	cp	a, a
    000001F9 18 05            [12]  461 	jr	00313$
    000001FB                        462 00312$:
    000001FB CB 7A            [ 8]  463 	bit	7, d
    000001FD 28 01            [12]  464 	jr	Z, 00313$
    000001FF 37               [ 4]  465 	scf
    00000200                        466 00313$:
    00000200 30 1F            [12]  467 	jr	NC, 00136$
    00000202 21r0Dr00         [12]  468 	ld	hl, #_spd_ballX
    00000205 5E               [ 8]  469 	ld	e, (hl)
    00000206 AF               [ 4]  470 	xor	a, a
    00000207 57               [ 4]  471 	ld	d, a
    00000208 96               [ 8]  472 	sub	a, (hl)
    00000209 CB 7B            [ 8]  473 	bit	7, e
    0000020B 28 07            [12]  474 	jr	Z, 00314$
    0000020D CB 7A            [ 8]  475 	bit	7, d
    0000020F 20 08            [12]  476 	jr	NZ, 00315$
    00000211 BF               [ 4]  477 	cp	a, a
    00000212 18 05            [12]  478 	jr	00315$
    00000214                        479 00314$:
    00000214 CB 7A            [ 8]  480 	bit	7, d
    00000216 28 01            [12]  481 	jr	Z, 00315$
    00000218 37               [ 4]  482 	scf
    00000219                        483 00315$:
    00000219 30 06            [12]  484 	jr	NC, 00136$
                                    485 ;src/pong.c:121: spd_ballX = -spd_ballX;
    0000021B F8 02            [12]  486 	ldhl	sp,	#2
    0000021D 7E               [ 8]  487 	ld	a, (hl)
    0000021E EAr0Dr00         [16]  488 	ld	(#_spd_ballX),a
    00000221                        489 00136$:
                                    490 ;src/pong.c:118: spd_ballX = -spd_ballX;
    00000221 AF               [ 4]  491 	xor	a, a
    00000222 21r0Dr00         [12]  492 	ld	hl, #_spd_ballX
    00000225 96               [ 8]  493 	sub	a, (hl)
    00000226 4F               [ 4]  494 	ld	c, a
                                    495 ;src/pong.c:124: if (ballX <= PLAYER1_X) {
    00000227 3E 08            [ 8]  496 	ld	a, #0x08
    00000229 21r0Br00         [12]  497 	ld	hl, #_ballX
    0000022C 96               [ 8]  498 	sub	a, (hl)
    0000022D 38 33            [12]  499 	jr	C, 00140$
                                    500 ;src/pong.c:126: ballX = INITBALLX, ballY = INITBALLY;
    0000022F 36 54            [12]  501 	ld	(hl), #0x54
    00000231 21r0Cr00         [12]  502 	ld	hl, #_ballY
    00000234 36 48            [12]  503 	ld	(hl), #0x48
                                    504 ;src/pong.c:127: spd_ballX = -spd_ballX;
    00000236 21r0Dr00         [12]  505 	ld	hl, #_spd_ballX
    00000239 71               [ 8]  506 	ld	(hl), c
                                    507 ;src/pong.c:128: player2_score++;
    0000023A 21r09r00         [12]  508 	ld	hl, #_player2_score
    0000023D 34               [12]  509 	inc	(hl)
    0000023E 20 02            [12]  510 	jr	NZ, 00316$
    00000240 23               [ 8]  511 	inc	hl
    00000241 34               [12]  512 	inc	(hl)
    00000242                        513 00316$:
                                    514 ;src/pong.c:129: gotoxy(0, 0); printf(HUD, player1_score, player2_score);
    00000242 AF               [ 4]  515 	xor	a, a
    00000243 0F               [ 4]  516 	rrca
    00000244 F5               [16]  517 	push	af
    00000245 CDr00r00         [24]  518 	call	_gotoxy
    00000248 E1               [12]  519 	pop	hl
    00000249 21r09r00         [12]  520 	ld	hl, #_player2_score
    0000024C 2A               [ 8]  521 	ld	a, (hl+)
    0000024D 5F               [ 4]  522 	ld	e, a
    0000024E 56               [ 8]  523 	ld	d, (hl)
    0000024F D5               [16]  524 	push	de
    00000250 21r07r00         [12]  525 	ld	hl, #_player1_score
    00000253 2A               [ 8]  526 	ld	a, (hl+)
    00000254 5F               [ 4]  527 	ld	e, a
    00000255 56               [ 8]  528 	ld	d, (hl)
    00000256 D5               [16]  529 	push	de
    00000257 11rB4r02         [12]  530 	ld	de, #_HUD
    0000025A D5               [16]  531 	push	de
    0000025B CDr00r00         [24]  532 	call	_printf
    0000025E E8 06            [16]  533 	add	sp, #6
    00000260 18 39            [12]  534 	jr	00141$
    00000262                        535 00140$:
                                    536 ;src/pong.c:130: } else if (ballX > PLAYER2_X) {
    00000262 3E A0            [ 8]  537 	ld	a, #0xa0
    00000264 21r0Br00         [12]  538 	ld	hl, #_ballX
    00000267 96               [ 8]  539 	sub	a, (hl)
    00000268 30 31            [12]  540 	jr	NC, 00141$
                                    541 ;src/pong.c:132: ballX = INITBALLX, ballY = INITBALLY;
    0000026A 36 54            [12]  542 	ld	(hl), #0x54
    0000026C 21r0Cr00         [12]  543 	ld	hl, #_ballY
    0000026F 36 48            [12]  544 	ld	(hl), #0x48
                                    545 ;src/pong.c:133: spd_ballX = -spd_ballX;
    00000271 21r0Dr00         [12]  546 	ld	hl, #_spd_ballX
    00000274 71               [ 8]  547 	ld	(hl), c
                                    548 ;src/pong.c:134: player1_score++;
    00000275 21r07r00         [12]  549 	ld	hl, #_player1_score
    00000278 34               [12]  550 	inc	(hl)
    00000279 20 02            [12]  551 	jr	NZ, 00317$
    0000027B 23               [ 8]  552 	inc	hl
    0000027C 34               [12]  553 	inc	(hl)
    0000027D                        554 00317$:
                                    555 ;src/pong.c:135: gotoxy(0, 0); printf(HUD, player1_score, player2_score);
    0000027D AF               [ 4]  556 	xor	a, a
    0000027E 0F               [ 4]  557 	rrca
    0000027F F5               [16]  558 	push	af
    00000280 CDr00r00         [24]  559 	call	_gotoxy
    00000283 E1               [12]  560 	pop	hl
    00000284 21r09r00         [12]  561 	ld	hl, #_player2_score
    00000287 2A               [ 8]  562 	ld	a, (hl+)
    00000288 5F               [ 4]  563 	ld	e, a
    00000289 56               [ 8]  564 	ld	d, (hl)
    0000028A D5               [16]  565 	push	de
    0000028B 21r07r00         [12]  566 	ld	hl, #_player1_score
    0000028E 2A               [ 8]  567 	ld	a, (hl+)
    0000028F 5F               [ 4]  568 	ld	e, a
    00000290 56               [ 8]  569 	ld	d, (hl)
    00000291 D5               [16]  570 	push	de
    00000292 11rB4r02         [12]  571 	ld	de, #_HUD
    00000295 D5               [16]  572 	push	de
    00000296 CDr00r00         [24]  573 	call	_printf
    00000299 E8 06            [16]  574 	add	sp, #6
    0000029B                        575 00141$:
                                    576 ;src/pong.c:138: move_sprite(3, ballX, ballY);
    0000029B 21r0Cr00         [12]  577 	ld	hl, #_ballY
    0000029E 4E               [ 8]  578 	ld	c, (hl)
    0000029F 21r0Br00         [12]  579 	ld	hl, #_ballX
    000002A2 46               [ 8]  580 	ld	b, (hl)
                                    581 ;../../../include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
                                    582 ;../../../include/gb/gb.h:1962: itm->y=y, itm->x=x;
    000002A3 21r0Cr00         [12]  583 	ld	hl, #(_shadow_OAM + 12)
    000002A6 71               [ 8]  584 	ld	(hl), c
    000002A7 21r0Dr00         [12]  585 	ld	hl, #(_shadow_OAM + 13)
    000002AA 70               [ 8]  586 	ld	(hl), b
                                    587 ;src/pong.c:141: vsync();
    000002AB CDr00r00         [24]  588 	call	_vsync
    000002AE C3rABr00         [16]  589 	jp	00143$
    000002B1                        590 00155$:
                                    591 ;src/pong.c:143: }
    000002B1 E8 03            [16]  592 	add	sp, #3
    000002B3 C9               [16]  593 	ret
    000002B4                        594 _HUD:
    000002B4 20 70 31 3A 20 25 64   595 	.ascii " p1: %d   p2: %d"
             20 20 20 70 32 3A 20
             25 64
    000002C4 00                     596 	.db 0x00
    000002C5                        597 ___str_0:
    000002C5 44 65 76 69 63 65 20   598 	.ascii "Device must support"
             6D 75 73 74 20 73 75
             70 70 6F 72 74
    000002D8 0A                     599 	.db 0x0a
    000002D9 61 74 20 6C 65 61 73   600 	.ascii "at least two joypads"
             74 20 74 77 6F 20 6A
             6F 79 70 61 64 73
    000002ED 00                     601 	.db 0x00
                                    602 	.area _CODE
                                    603 	.area _INITIALIZER
    00000000                        604 __xinit__sprite_data:
    00000000 3C                     605 	.db #0x3c	; 60
    00000001 3C                     606 	.db #0x3c	; 60
    00000002 42                     607 	.db #0x42	; 66	'B'
    00000003 7E                     608 	.db #0x7e	; 126
    00000004 99                     609 	.db #0x99	; 153
    00000005 FF                     610 	.db #0xff	; 255
    00000006 A9                     611 	.db #0xa9	; 169
    00000007 FF                     612 	.db #0xff	; 255
    00000008 89                     613 	.db #0x89	; 137
    00000009 FF                     614 	.db #0xff	; 255
    0000000A 89                     615 	.db #0x89	; 137
    0000000B FF                     616 	.db #0xff	; 255
    0000000C 42                     617 	.db #0x42	; 66	'B'
    0000000D 7E                     618 	.db #0x7e	; 126
    0000000E 3C                     619 	.db #0x3c	; 60
    0000000F 3C                     620 	.db #0x3c	; 60
    00000010 3C                     621 	.db #0x3c	; 60
    00000011 3C                     622 	.db #0x3c	; 60
    00000012 42                     623 	.db #0x42	; 66	'B'
    00000013 7E                     624 	.db #0x7e	; 126
    00000014 B9                     625 	.db #0xb9	; 185
    00000015 FF                     626 	.db #0xff	; 255
    00000016 89                     627 	.db #0x89	; 137
    00000017 FF                     628 	.db #0xff	; 255
    00000018 91                     629 	.db #0x91	; 145
    00000019 FF                     630 	.db #0xff	; 255
    0000001A B9                     631 	.db #0xb9	; 185
    0000001B FF                     632 	.db #0xff	; 255
    0000001C 42                     633 	.db #0x42	; 66	'B'
    0000001D 7E                     634 	.db #0x7e	; 126
    0000001E 3C                     635 	.db #0x3c	; 60
    0000001F 3C                     636 	.db #0x3c	; 60
    00000020 3C                     637 	.db #0x3c	; 60
    00000021 3C                     638 	.db #0x3c	; 60
    00000022 42                     639 	.db #0x42	; 66	'B'
    00000023 7E                     640 	.db #0x7e	; 126
    00000024 99                     641 	.db #0x99	; 153
    00000025 FF                     642 	.db #0xff	; 255
    00000026 89                     643 	.db #0x89	; 137
    00000027 FF                     644 	.db #0xff	; 255
    00000028 99                     645 	.db #0x99	; 153
    00000029 FF                     646 	.db #0xff	; 255
    0000002A 89                     647 	.db #0x89	; 137
    0000002B FF                     648 	.db #0xff	; 255
    0000002C 5A                     649 	.db #0x5a	; 90	'Z'
    0000002D 7E                     650 	.db #0x7e	; 126
    0000002E 3C                     651 	.db #0x3c	; 60
    0000002F 3C                     652 	.db #0x3c	; 60
    00000030 3C                     653 	.db #0x3c	; 60
    00000031 3C                     654 	.db #0x3c	; 60
    00000032 42                     655 	.db #0x42	; 66	'B'
    00000033 7E                     656 	.db #0x7e	; 126
    00000034 A9                     657 	.db #0xa9	; 169
    00000035 FF                     658 	.db #0xff	; 255
    00000036 A9                     659 	.db #0xa9	; 169
    00000037 FF                     660 	.db #0xff	; 255
    00000038 B9                     661 	.db #0xb9	; 185
    00000039 FF                     662 	.db #0xff	; 255
    0000003A 89                     663 	.db #0x89	; 137
    0000003B FF                     664 	.db #0xff	; 255
    0000003C 42                     665 	.db #0x42	; 66	'B'
    0000003D 7E                     666 	.db #0x7e	; 126
    0000003E 3C                     667 	.db #0x3c	; 60
    0000003F 3C                     668 	.db #0x3c	; 60
                                    669 	.area _CABS (ABS)
