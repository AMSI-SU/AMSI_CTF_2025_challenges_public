                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module banks_nonintrinsic
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _set_RAM_bank1
                                     13 	.globl _set_RAM_bank0
                                     14 	.globl _set_ROM_bank2
                                     15 	.globl _set_ROM_bank1
                                     16 	.globl _puts
                                     17 	.globl _printf
                                     18 	.globl _putchar
                                     19 	.globl _add_num__ptr
                                     20 	.globl _hello_rom_1
                                     21 	.globl _hello_rom_2
                                     22 	.globl _add_num_sram_0
                                     23 	.globl _hello_sram_0
                                     24 	.globl _add_num_sram_1b
                                     25 	.globl _add_num_sram_1a
                                     26 	.globl _hello_sram_1
                                     27 	.globl _add_num_wram
                                     28 	.globl _data
                                     29 	.globl __current_ram_bank
                                     30 	.globl ___dummy_variable
                                     31 	.globl _hello_code
                                     32 ;--------------------------------------------------------
                                     33 ; special function registers
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area _DATA
    00000000                         39 ___dummy_variable::
    00000000                         40 	.ds 1
                                     41 ;--------------------------------------------------------
                                     42 ; ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area _INITIALIZED
    00000000                         45 __current_ram_bank::
    00000000                         46 	.ds 1
    00000001                         47 _data::
    00000001                         48 	.ds 20
    00000015                         49 _add_num_wram::
    00000015                         50 	.ds 2
                                     51 ;--------------------------------------------------------
                                     52 ; DATA_1 ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area _DATA_1
    00000000                         55 _hello_sram_1::
    00000000                         56 	.ds 20
    00000014                         57 _add_num_sram_1a::
    00000014                         58 	.ds 2
    00000016                         59 _add_num_sram_1b::
    00000016                         60 	.ds 2
                                     61 ;--------------------------------------------------------
                                     62 ; DATA_0 ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area _DATA_0
    00000000                         65 _hello_sram_0::
    00000000                         66 	.ds 20
    00000014                         67 _add_num_sram_0::
    00000014                         68 	.ds 2
                                     69 ;--------------------------------------------------------
                                     70 ; CODE_2 rom data
                                     71 ;--------------------------------------------------------
                                     72 	.area _CODE_2
    00000000                         73 _hello_rom_2:
    00000000 68 65 6C 6C 6F 20 66    74 	.ascii "hello from CODE_2"
             72 6F 6D 20 43 4F 44
             45 5F 32
    00000011 0A                      75 	.db 0x0a
    00000012 00                      76 	.db 0x00
                                     77 ;--------------------------------------------------------
                                     78 ; CODE_1 rom data
                                     79 ;--------------------------------------------------------
                                     80 	.area _CODE_1
    00000000                         81 _hello_rom_1:
    00000000 68 65 6C 6C 6F 20 66    82 	.ascii "hello from CODE_1"
             72 6F 6D 20 43 4F 44
             45 5F 31
    00000011 0A                      83 	.db 0x0a
    00000012 00                      84 	.db 0x00
    00000013                         85 _add_num__ptr:
    00000013r14r00                   86 	.dw _add_num_sram_1a
    00000015r16r00                   87 	.dw _add_num_sram_1b
                                     88 ;--------------------------------------------------------
                                     89 ; absolute external ram data
                                     90 ;--------------------------------------------------------
                                     91 	.area _DABS (ABS)
                                     92 ;--------------------------------------------------------
                                     93 ; global & static initialisations
                                     94 ;--------------------------------------------------------
                                     95 	.area _HOME
                                     96 	.area _GSINIT
                                     97 	.area _GSFINAL
                                     98 	.area _GSINIT
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area _HOME
                                    103 ;src/banks_nonintrinsic.c:21: void set_ROM_bank1(void) NONBANKED { SWITCH_ROM(1); }
                                    104 ;	---------------------------------
                                    105 ; Function set_ROM_bank1
                                    106 ; ---------------------------------
    00000000                        107 _set_ROM_bank1::
    00000000 3E 01            [ 8]  108 	ld	a, #0x01
    00000002 E0r00            [12]  109 	ldh	(__current_bank + 0), a
    00000004 21r00r00         [12]  110 	ld	hl, #_rROMB0
    00000007 36 01            [12]  111 	ld	(hl), #0x01
    00000009 C9               [16]  112 	ret
    0000000A                        113 _hello_code:
    0000000A 68 65 6C 6C 6F 20 66   114 	.ascii "hello from CODE"
             72 6F 6D 20 43 4F 44
             45
    00000019 0A                     115 	.db 0x0a
    0000001A 00                     116 	.db 0x00
                                    117 ;src/banks_nonintrinsic.c:22: void set_ROM_bank2(void) NONBANKED { SWITCH_ROM(2); }
                                    118 ;	---------------------------------
                                    119 ; Function set_ROM_bank2
                                    120 ; ---------------------------------
    0000001B                        121 _set_ROM_bank2::
    0000001B 3E 02            [ 8]  122 	ld	a, #0x02
    0000001D E0r00            [12]  123 	ldh	(__current_bank + 0), a
    0000001F 21r00r00         [12]  124 	ld	hl, #_rROMB0
    00000022 36 02            [12]  125 	ld	(hl), #0x02
    00000024 C9               [16]  126 	ret
                                    127 ;src/banks_nonintrinsic.c:31: void set_RAM_bank0(void) NONBANKED { SWITCH_RAM_BANK(0); }
                                    128 ;	---------------------------------
                                    129 ; Function set_RAM_bank0
                                    130 ; ---------------------------------
    00000025                        131 _set_RAM_bank0::
    00000025 21r00r00         [12]  132 	ld	hl, #__current_ram_bank
    00000028 36 00            [12]  133 	ld	(hl), #0x00
    0000002A C9               [16]  134 	ret
                                    135 ;src/banks_nonintrinsic.c:32: void set_RAM_bank1(void) NONBANKED { SWITCH_RAM_BANK(1); }
                                    136 ;	---------------------------------
                                    137 ; Function set_RAM_bank1
                                    138 ; ---------------------------------
    0000002B                        139 _set_RAM_bank1::
    0000002B 21r00r00         [12]  140 	ld	hl, #__current_ram_bank
    0000002E 36 01            [12]  141 	ld	(hl), #0x01
    00000030 C9               [16]  142 	ret
                                    143 	.area _HOME
                                    144 ;--------------------------------------------------------
                                    145 ; code
                                    146 ;--------------------------------------------------------
                                    147 	.area _CODE
                                    148 ;src/banks_nonintrinsic.c:50: void main(void) {
                                    149 ;	---------------------------------
                                    150 ; Function main
                                    151 ; ---------------------------------
    00000000                        152 _main::
    00000000 3B               [ 8]  153 	dec	sp
    00000001 3B               [ 8]  154 	dec	sp
                                    155 ;src/banks_nonintrinsic.c:53: add_num_sram_0 = 2;
    00000002 CDr25r00         [24]  156 	call	_set_RAM_bank0
    00000005 21r14r00         [12]  157 	ld	hl, #_add_num_sram_0
    00000008 3E 02            [ 8]  158 	ld	a, #0x02
    0000000A 22               [ 8]  159 	ld	(hl+), a
    0000000B AF               [ 4]  160 	xor	a, a
    0000000C 77               [ 8]  161 	ld	(hl), a
                                    162 ;src/banks_nonintrinsic.c:54: add_num_sram_1a = 4;
    0000000D CDr2Br00         [24]  163 	call	_set_RAM_bank1
    00000010 21r14r00         [12]  164 	ld	hl, #_add_num_sram_1a
    00000013 3E 04            [ 8]  165 	ld	a, #0x04
    00000015 22               [ 8]  166 	ld	(hl+), a
    00000016 AF               [ 4]  167 	xor	a, a
    00000017 77               [ 8]  168 	ld	(hl), a
                                    169 ;src/banks_nonintrinsic.c:55: add_num_sram_1b = 8;
    00000018 21r16r00         [12]  170 	ld	hl, #_add_num_sram_1b
    0000001B 3E 08            [ 8]  171 	ld	a, #0x08
    0000001D 22               [ 8]  172 	ld	(hl+), a
    0000001E AF               [ 4]  173 	xor	a, a
    0000001F 77               [ 8]  174 	ld	(hl), a
                                    175 ;src/banks_nonintrinsic.c:58: for (int8_t i = 0; (hello_code[i]); i++) putchar(hello_code[i]);
    00000020 06 00            [ 8]  176 	ld	b, #0x00
    00000022                        177 00119$:
    00000022 78               [ 4]  178 	ld	a, b
    00000023 5F               [ 4]  179 	ld	e, a
    00000024 07               [ 4]  180 	rlca
    00000025 9F               [ 4]  181 	sbc	a, a
    00000026 57               [ 4]  182 	ld	d, a
    00000027 21r0Ar00         [12]  183 	ld	hl, #_hello_code
    0000002A 19               [ 8]  184 	add	hl, de
    0000002B 7E               [ 8]  185 	ld	a, (hl)
    0000002C B7               [ 4]  186 	or	a, a
    0000002D 28 0B            [12]  187 	jr	Z, 00101$
    0000002F C5               [16]  188 	push	bc
    00000030 F5               [16]  189 	push	af
    00000031 33               [ 8]  190 	inc	sp
    00000032 CDr00r00         [24]  191 	call	_putchar
    00000035 33               [ 8]  192 	inc	sp
    00000036 C1               [12]  193 	pop	bc
    00000037 04               [ 4]  194 	inc	b
    00000038 18 E8            [12]  195 	jr	00119$
    0000003A                        196 00101$:
                                    197 ;src/banks_nonintrinsic.c:59: for (int8_t i = 0; (hello_rom_1[i]); i++) putchar(hello_rom_1[i]);
    0000003A 0E 00            [ 8]  198 	ld	c, #0x00
    0000003C                        199 00122$:
    0000003C 79               [ 4]  200 	ld	a, c
    0000003D 5F               [ 4]  201 	ld	e, a
    0000003E 07               [ 4]  202 	rlca
    0000003F 9F               [ 4]  203 	sbc	a, a
    00000040 57               [ 4]  204 	ld	d, a
    00000041 C5               [16]  205 	push	bc
    00000042 D5               [16]  206 	push	de
    00000043 CDr00r00         [24]  207 	call	_set_ROM_bank1
    00000046 D1               [12]  208 	pop	de
    00000047 C1               [12]  209 	pop	bc
    00000048 21r00r00         [12]  210 	ld	hl, #_hello_rom_1
    0000004B 19               [ 8]  211 	add	hl, de
    0000004C 7E               [ 8]  212 	ld	a, (hl)
    0000004D B7               [ 4]  213 	or	a, a
    0000004E 28 0B            [12]  214 	jr	Z, 00102$
    00000050 C5               [16]  215 	push	bc
    00000051 F5               [16]  216 	push	af
    00000052 33               [ 8]  217 	inc	sp
    00000053 CDr00r00         [24]  218 	call	_putchar
    00000056 33               [ 8]  219 	inc	sp
    00000057 C1               [12]  220 	pop	bc
    00000058 0C               [ 4]  221 	inc	c
    00000059 18 E1            [12]  222 	jr	00122$
    0000005B                        223 00102$:
                                    224 ;src/banks_nonintrinsic.c:60: for (int8_t i = 0; (hello_rom_2[i]); i++) putchar(hello_rom_2[i]);
    0000005B 0E 00            [ 8]  225 	ld	c, #0x00
    0000005D                        226 00125$:
    0000005D 79               [ 4]  227 	ld	a, c
    0000005E 5F               [ 4]  228 	ld	e, a
    0000005F 07               [ 4]  229 	rlca
    00000060 9F               [ 4]  230 	sbc	a, a
    00000061 57               [ 4]  231 	ld	d, a
    00000062 C5               [16]  232 	push	bc
    00000063 D5               [16]  233 	push	de
    00000064 CDr1Br00         [24]  234 	call	_set_ROM_bank2
    00000067 D1               [12]  235 	pop	de
    00000068 C1               [12]  236 	pop	bc
    00000069 21r00r00         [12]  237 	ld	hl, #_hello_rom_2
    0000006C 19               [ 8]  238 	add	hl, de
    0000006D 7E               [ 8]  239 	ld	a, (hl)
    0000006E B7               [ 4]  240 	or	a, a
    0000006F 28 0B            [12]  241 	jr	Z, 00103$
    00000071 C5               [16]  242 	push	bc
    00000072 F5               [16]  243 	push	af
    00000073 33               [ 8]  244 	inc	sp
    00000074 CDr00r00         [24]  245 	call	_putchar
    00000077 33               [ 8]  246 	inc	sp
    00000078 C1               [12]  247 	pop	bc
    00000079 0C               [ 4]  248 	inc	c
    0000007A 18 E1            [12]  249 	jr	00125$
    0000007C                        250 00103$:
                                    251 ;src/banks_nonintrinsic.c:63: for (int8_t i = 0; (i < sizeof(hello_rom_1)); i++) hello_sram_0[i] = hello_rom_1[i];
    0000007C 0E 00            [ 8]  252 	ld	c, #0x00
    0000007E                        253 00128$:
    0000007E 79               [ 4]  254 	ld	a, c
    0000007F EE 80            [ 8]  255 	xor	a, #0x80
    00000081 D6 93            [ 8]  256 	sub	a, #0x93
    00000083 3E 00            [ 8]  257 	ld	a, #0x00
    00000085 17               [ 4]  258 	rla
    00000086 47               [ 4]  259 	ld	b, a
    00000087 C5               [16]  260 	push	bc
    00000088 CDr00r00         [24]  261 	call	_set_ROM_bank1
    0000008B C1               [12]  262 	pop	bc
    0000008C 78               [ 4]  263 	ld	a, b
    0000008D B7               [ 4]  264 	or	a, a
    0000008E 28 1E            [12]  265 	jr	Z, 00104$
    00000090 79               [ 4]  266 	ld	a, c
    00000091 5F               [ 4]  267 	ld	e, a
    00000092 07               [ 4]  268 	rlca
    00000093 9F               [ 4]  269 	sbc	a, a
    00000094 57               [ 4]  270 	ld	d, a
    00000095 21r00r00         [12]  271 	ld	hl, #_hello_sram_0
    00000098 19               [ 8]  272 	add	hl, de
    00000099 7B               [ 4]  273 	ld	a, e
    0000009A C6r00            [ 8]  274 	add	a, #<(_hello_rom_1)
    0000009C 5F               [ 4]  275 	ld	e, a
    0000009D 7A               [ 4]  276 	ld	a, d
    0000009E CEs00            [ 8]  277 	adc	a, #>(_hello_rom_1)
    000000A0 57               [ 4]  278 	ld	d, a
    000000A1 1A               [ 8]  279 	ld	a, (de)
    000000A2 47               [ 4]  280 	ld	b, a
    000000A3 E5               [16]  281 	push	hl
    000000A4 C5               [16]  282 	push	bc
    000000A5 CDr25r00         [24]  283 	call	_set_RAM_bank0
    000000A8 C1               [12]  284 	pop	bc
    000000A9 E1               [12]  285 	pop	hl
    000000AA 70               [ 8]  286 	ld	(hl), b
    000000AB 0C               [ 4]  287 	inc	c
    000000AC 18 D0            [12]  288 	jr	00128$
    000000AE                        289 00104$:
                                    290 ;src/banks_nonintrinsic.c:64: for (int8_t i = 0; (i < 4); i++) hello_sram_0[i + 11] = data[i];
    000000AE 0E 00            [ 8]  291 	ld	c, #0x00
    000000B0 C5               [16]  292 	push	bc
    000000B1 CDr25r00         [24]  293 	call	_set_RAM_bank0
    000000B4 C1               [12]  294 	pop	bc
    000000B5                        295 00131$:
    000000B5 79               [ 4]  296 	ld	a, c
    000000B6 EE 80            [ 8]  297 	xor	a, #0x80
    000000B8 D6 84            [ 8]  298 	sub	a, #0x84
    000000BA 30 1D            [12]  299 	jr	NC, 00105$
    000000BC 79               [ 4]  300 	ld	a, c
    000000BD C6 0B            [ 8]  301 	add	a, #0x0b
    000000BF 5F               [ 4]  302 	ld	e, a
    000000C0 07               [ 4]  303 	rlca
    000000C1 9F               [ 4]  304 	sbc	a, a
    000000C2 57               [ 4]  305 	ld	d, a
    000000C3 21r00r00         [12]  306 	ld	hl, #_hello_sram_0
    000000C6 19               [ 8]  307 	add	hl, de
    000000C7 79               [ 4]  308 	ld	a, c
    000000C8 47               [ 4]  309 	ld	b, a
    000000C9 07               [ 4]  310 	rlca
    000000CA 9F               [ 4]  311 	sbc	a, a
    000000CB 57               [ 4]  312 	ld	d, a
    000000CC 78               [ 4]  313 	ld	a, b
    000000CD C6r01            [ 8]  314 	add	a, #<(_data)
    000000CF 5F               [ 4]  315 	ld	e, a
    000000D0 7A               [ 4]  316 	ld	a, d
    000000D1 CEs00            [ 8]  317 	adc	a, #>(_data)
    000000D3 57               [ 4]  318 	ld	d, a
    000000D4 1A               [ 8]  319 	ld	a, (de)
    000000D5 77               [ 8]  320 	ld	(hl), a
    000000D6 0C               [ 4]  321 	inc	c
    000000D7 18 DC            [12]  322 	jr	00131$
    000000D9                        323 00105$:
                                    324 ;src/banks_nonintrinsic.c:65: for (int8_t i = 0; (hello_sram_0[i]); i++) putchar(hello_sram_0[i]);
    000000D9 0E 00            [ 8]  325 	ld	c, #0x00
    000000DB                        326 00134$:
    000000DB 79               [ 4]  327 	ld	a, c
    000000DC 5F               [ 4]  328 	ld	e, a
    000000DD 07               [ 4]  329 	rlca
    000000DE 9F               [ 4]  330 	sbc	a, a
    000000DF 57               [ 4]  331 	ld	d, a
    000000E0 21r00r00         [12]  332 	ld	hl, #_hello_sram_0
    000000E3 19               [ 8]  333 	add	hl, de
    000000E4 7E               [ 8]  334 	ld	a, (hl)
    000000E5 B7               [ 4]  335 	or	a, a
    000000E6 28 0E            [12]  336 	jr	Z, 00106$
    000000E8 C5               [16]  337 	push	bc
    000000E9 F5               [16]  338 	push	af
    000000EA 33               [ 8]  339 	inc	sp
    000000EB CDr00r00         [24]  340 	call	_putchar
    000000EE 33               [ 8]  341 	inc	sp
    000000EF CDr25r00         [24]  342 	call	_set_RAM_bank0
    000000F2 C1               [12]  343 	pop	bc
    000000F3 0C               [ 4]  344 	inc	c
    000000F4 18 E5            [12]  345 	jr	00134$
    000000F6                        346 00106$:
                                    347 ;src/banks_nonintrinsic.c:68: for (int8_t i = 0; (i < sizeof(hello_rom_2)); i++) hello_sram_1[i] = hello_rom_2[i];
    000000F6 0E 00            [ 8]  348 	ld	c, #0x00
    000000F8                        349 00137$:
    000000F8 79               [ 4]  350 	ld	a, c
    000000F9 EE 80            [ 8]  351 	xor	a, #0x80
    000000FB D6 93            [ 8]  352 	sub	a, #0x93
    000000FD 3E 00            [ 8]  353 	ld	a, #0x00
    000000FF 17               [ 4]  354 	rla
    00000100 47               [ 4]  355 	ld	b, a
    00000101 C5               [16]  356 	push	bc
    00000102 CDr1Br00         [24]  357 	call	_set_ROM_bank2
    00000105 C1               [12]  358 	pop	bc
    00000106 78               [ 4]  359 	ld	a, b
    00000107 B7               [ 4]  360 	or	a, a
    00000108 28 1E            [12]  361 	jr	Z, 00107$
    0000010A 79               [ 4]  362 	ld	a, c
    0000010B 5F               [ 4]  363 	ld	e, a
    0000010C 07               [ 4]  364 	rlca
    0000010D 9F               [ 4]  365 	sbc	a, a
    0000010E 57               [ 4]  366 	ld	d, a
    0000010F 21r00r00         [12]  367 	ld	hl, #_hello_sram_1
    00000112 19               [ 8]  368 	add	hl, de
    00000113 7B               [ 4]  369 	ld	a, e
    00000114 C6r00            [ 8]  370 	add	a, #<(_hello_rom_2)
    00000116 5F               [ 4]  371 	ld	e, a
    00000117 7A               [ 4]  372 	ld	a, d
    00000118 CEs00            [ 8]  373 	adc	a, #>(_hello_rom_2)
    0000011A 57               [ 4]  374 	ld	d, a
    0000011B 1A               [ 8]  375 	ld	a, (de)
    0000011C 47               [ 4]  376 	ld	b, a
    0000011D E5               [16]  377 	push	hl
    0000011E C5               [16]  378 	push	bc
    0000011F CDr2Br00         [24]  379 	call	_set_RAM_bank1
    00000122 C1               [12]  380 	pop	bc
    00000123 E1               [12]  381 	pop	hl
    00000124 70               [ 8]  382 	ld	(hl), b
    00000125 0C               [ 4]  383 	inc	c
    00000126 18 D0            [12]  384 	jr	00137$
    00000128                        385 00107$:
                                    386 ;src/banks_nonintrinsic.c:69: for (int8_t i = 0; (i < 4); i++) hello_sram_1[i + 11] = data[i];
    00000128 0E 00            [ 8]  387 	ld	c, #0x00
    0000012A C5               [16]  388 	push	bc
    0000012B CDr2Br00         [24]  389 	call	_set_RAM_bank1
    0000012E C1               [12]  390 	pop	bc
    0000012F                        391 00140$:
    0000012F 79               [ 4]  392 	ld	a, c
    00000130 EE 80            [ 8]  393 	xor	a, #0x80
    00000132 D6 84            [ 8]  394 	sub	a, #0x84
    00000134 30 1D            [12]  395 	jr	NC, 00108$
    00000136 79               [ 4]  396 	ld	a, c
    00000137 C6 0B            [ 8]  397 	add	a, #0x0b
    00000139 5F               [ 4]  398 	ld	e, a
    0000013A 07               [ 4]  399 	rlca
    0000013B 9F               [ 4]  400 	sbc	a, a
    0000013C 57               [ 4]  401 	ld	d, a
    0000013D 21r00r00         [12]  402 	ld	hl, #_hello_sram_1
    00000140 19               [ 8]  403 	add	hl, de
    00000141 79               [ 4]  404 	ld	a, c
    00000142 47               [ 4]  405 	ld	b, a
    00000143 07               [ 4]  406 	rlca
    00000144 9F               [ 4]  407 	sbc	a, a
    00000145 57               [ 4]  408 	ld	d, a
    00000146 78               [ 4]  409 	ld	a, b
    00000147 C6r01            [ 8]  410 	add	a, #<(_data)
    00000149 5F               [ 4]  411 	ld	e, a
    0000014A 7A               [ 4]  412 	ld	a, d
    0000014B CEs00            [ 8]  413 	adc	a, #>(_data)
    0000014D 57               [ 4]  414 	ld	d, a
    0000014E 1A               [ 8]  415 	ld	a, (de)
    0000014F 77               [ 8]  416 	ld	(hl), a
    00000150 0C               [ 4]  417 	inc	c
    00000151 18 DC            [12]  418 	jr	00140$
    00000153                        419 00108$:
                                    420 ;src/banks_nonintrinsic.c:70: for (int8_t i = 0; (hello_sram_1[i]); i++) putchar(hello_sram_1[i]);
    00000153 0E 00            [ 8]  421 	ld	c, #0x00
    00000155                        422 00143$:
    00000155 79               [ 4]  423 	ld	a, c
    00000156 5F               [ 4]  424 	ld	e, a
    00000157 07               [ 4]  425 	rlca
    00000158 9F               [ 4]  426 	sbc	a, a
    00000159 57               [ 4]  427 	ld	d, a
    0000015A 21r00r00         [12]  428 	ld	hl, #_hello_sram_1
    0000015D 19               [ 8]  429 	add	hl, de
    0000015E 7E               [ 8]  430 	ld	a, (hl)
    0000015F B7               [ 4]  431 	or	a, a
    00000160 28 0E            [12]  432 	jr	Z, 00109$
    00000162 C5               [16]  433 	push	bc
    00000163 F5               [16]  434 	push	af
    00000164 33               [ 8]  435 	inc	sp
    00000165 CDr00r00         [24]  436 	call	_putchar
    00000168 33               [ 8]  437 	inc	sp
    00000169 CDr2Br00         [24]  438 	call	_set_RAM_bank1
    0000016C C1               [12]  439 	pop	bc
    0000016D 0C               [ 4]  440 	inc	c
    0000016E 18 E5            [12]  441 	jr	00143$
    00000170                        442 00109$:
                                    443 ;src/banks_nonintrinsic.c:72: printf("once more...\n");
    00000170 11rCBr02         [12]  444 	ld	de, #___str_2
    00000173 CDr00r00         [24]  445 	call	_puts
                                    446 ;src/banks_nonintrinsic.c:74: for (int8_t i = 0; (hello_code[i]); i++) putchar(hello_code[i]);
    00000176 0E 00            [ 8]  447 	ld	c, #0x00
    00000178                        448 00146$:
    00000178 79               [ 4]  449 	ld	a, c
    00000179 5F               [ 4]  450 	ld	e, a
    0000017A 07               [ 4]  451 	rlca
    0000017B 9F               [ 4]  452 	sbc	a, a
    0000017C 57               [ 4]  453 	ld	d, a
    0000017D 21r0Ar00         [12]  454 	ld	hl, #_hello_code
    00000180 19               [ 8]  455 	add	hl, de
    00000181 7E               [ 8]  456 	ld	a, (hl)
    00000182 B7               [ 4]  457 	or	a, a
    00000183 28 0B            [12]  458 	jr	Z, 00110$
    00000185 C5               [16]  459 	push	bc
    00000186 F5               [16]  460 	push	af
    00000187 33               [ 8]  461 	inc	sp
    00000188 CDr00r00         [24]  462 	call	_putchar
    0000018B 33               [ 8]  463 	inc	sp
    0000018C C1               [12]  464 	pop	bc
    0000018D 0C               [ 4]  465 	inc	c
    0000018E 18 E8            [12]  466 	jr	00146$
    00000190                        467 00110$:
                                    468 ;src/banks_nonintrinsic.c:75: for (int8_t i = 0; (hello_rom_1[i]); i++) putchar(hello_rom_1[i]);
    00000190 0E 00            [ 8]  469 	ld	c, #0x00
    00000192                        470 00149$:
    00000192 79               [ 4]  471 	ld	a, c
    00000193 5F               [ 4]  472 	ld	e, a
    00000194 07               [ 4]  473 	rlca
    00000195 9F               [ 4]  474 	sbc	a, a
    00000196 57               [ 4]  475 	ld	d, a
    00000197 C5               [16]  476 	push	bc
    00000198 D5               [16]  477 	push	de
    00000199 CDr00r00         [24]  478 	call	_set_ROM_bank1
    0000019C D1               [12]  479 	pop	de
    0000019D C1               [12]  480 	pop	bc
    0000019E 21r00r00         [12]  481 	ld	hl, #_hello_rom_1
    000001A1 19               [ 8]  482 	add	hl, de
    000001A2 7E               [ 8]  483 	ld	a, (hl)
    000001A3 B7               [ 4]  484 	or	a, a
    000001A4 28 0B            [12]  485 	jr	Z, 00111$
    000001A6 C5               [16]  486 	push	bc
    000001A7 F5               [16]  487 	push	af
    000001A8 33               [ 8]  488 	inc	sp
    000001A9 CDr00r00         [24]  489 	call	_putchar
    000001AC 33               [ 8]  490 	inc	sp
    000001AD C1               [12]  491 	pop	bc
    000001AE 0C               [ 4]  492 	inc	c
    000001AF 18 E1            [12]  493 	jr	00149$
    000001B1                        494 00111$:
                                    495 ;src/banks_nonintrinsic.c:76: for (int8_t i = 0; (hello_rom_2[i]); i++) putchar(hello_rom_2[i]);
    000001B1 0E 00            [ 8]  496 	ld	c, #0x00
    000001B3                        497 00152$:
    000001B3 79               [ 4]  498 	ld	a, c
    000001B4 5F               [ 4]  499 	ld	e, a
    000001B5 07               [ 4]  500 	rlca
    000001B6 9F               [ 4]  501 	sbc	a, a
    000001B7 57               [ 4]  502 	ld	d, a
    000001B8 C5               [16]  503 	push	bc
    000001B9 D5               [16]  504 	push	de
    000001BA CDr1Br00         [24]  505 	call	_set_ROM_bank2
    000001BD D1               [12]  506 	pop	de
    000001BE C1               [12]  507 	pop	bc
    000001BF 21r00r00         [12]  508 	ld	hl, #_hello_rom_2
    000001C2 19               [ 8]  509 	add	hl, de
    000001C3 7E               [ 8]  510 	ld	a, (hl)
    000001C4 B7               [ 4]  511 	or	a, a
    000001C5 28 0B            [12]  512 	jr	Z, 00112$
    000001C7 C5               [16]  513 	push	bc
    000001C8 F5               [16]  514 	push	af
    000001C9 33               [ 8]  515 	inc	sp
    000001CA CDr00r00         [24]  516 	call	_putchar
    000001CD 33               [ 8]  517 	inc	sp
    000001CE C1               [12]  518 	pop	bc
    000001CF 0C               [ 4]  519 	inc	c
    000001D0 18 E1            [12]  520 	jr	00152$
    000001D2                        521 00112$:
                                    522 ;src/banks_nonintrinsic.c:77: for (int8_t i = 0; (hello_sram_0[i]); i++) putchar(hello_sram_0[i]);
    000001D2 0E 00            [ 8]  523 	ld	c, #0x00
    000001D4                        524 00155$:
    000001D4 79               [ 4]  525 	ld	a, c
    000001D5 5F               [ 4]  526 	ld	e, a
    000001D6 07               [ 4]  527 	rlca
    000001D7 9F               [ 4]  528 	sbc	a, a
    000001D8 57               [ 4]  529 	ld	d, a
    000001D9 C5               [16]  530 	push	bc
    000001DA D5               [16]  531 	push	de
    000001DB CDr25r00         [24]  532 	call	_set_RAM_bank0
    000001DE D1               [12]  533 	pop	de
    000001DF C1               [12]  534 	pop	bc
    000001E0 21r00r00         [12]  535 	ld	hl, #_hello_sram_0
    000001E3 19               [ 8]  536 	add	hl, de
    000001E4 7E               [ 8]  537 	ld	a, (hl)
    000001E5 B7               [ 4]  538 	or	a, a
    000001E6 28 0B            [12]  539 	jr	Z, 00113$
    000001E8 C5               [16]  540 	push	bc
    000001E9 F5               [16]  541 	push	af
    000001EA 33               [ 8]  542 	inc	sp
    000001EB CDr00r00         [24]  543 	call	_putchar
    000001EE 33               [ 8]  544 	inc	sp
    000001EF C1               [12]  545 	pop	bc
    000001F0 0C               [ 4]  546 	inc	c
    000001F1 18 E1            [12]  547 	jr	00155$
    000001F3                        548 00113$:
                                    549 ;src/banks_nonintrinsic.c:78: for (int8_t i = 0; (hello_sram_1[i]); i++) putchar(hello_sram_1[i]);
    000001F3 0E 00            [ 8]  550 	ld	c, #0x00
    000001F5                        551 00158$:
    000001F5 79               [ 4]  552 	ld	a, c
    000001F6 5F               [ 4]  553 	ld	e, a
    000001F7 07               [ 4]  554 	rlca
    000001F8 9F               [ 4]  555 	sbc	a, a
    000001F9 57               [ 4]  556 	ld	d, a
    000001FA C5               [16]  557 	push	bc
    000001FB D5               [16]  558 	push	de
    000001FC CDr2Br00         [24]  559 	call	_set_RAM_bank1
    000001FF D1               [12]  560 	pop	de
    00000200 C1               [12]  561 	pop	bc
    00000201 21r00r00         [12]  562 	ld	hl, #_hello_sram_1
    00000204 19               [ 8]  563 	add	hl, de
    00000205 7E               [ 8]  564 	ld	a, (hl)
    00000206 B7               [ 4]  565 	or	a, a
    00000207 28 0B            [12]  566 	jr	Z, 00114$
    00000209 C5               [16]  567 	push	bc
    0000020A F5               [16]  568 	push	af
    0000020B 33               [ 8]  569 	inc	sp
    0000020C CDr00r00         [24]  570 	call	_putchar
    0000020F 33               [ 8]  571 	inc	sp
    00000210 C1               [12]  572 	pop	bc
    00000211 0C               [ 4]  573 	inc	c
    00000212 18 E1            [12]  574 	jr	00158$
    00000214                        575 00114$:
                                    576 ;src/banks_nonintrinsic.c:80: printf("once more...\n");
    00000214 11rCBr02         [12]  577 	ld	de, #___str_2
    00000217 CDr00r00         [24]  578 	call	_puts
                                    579 ;src/banks_nonintrinsic.c:82: printf("%s", hello_code);
    0000021A 11r0Ar00         [12]  580 	ld	de, #_hello_code
    0000021D D5               [16]  581 	push	de
    0000021E 11rD8r02         [12]  582 	ld	de, #___str_4
    00000221 D5               [16]  583 	push	de
    00000222 CDr00r00         [24]  584 	call	_printf
    00000225 E8 04            [16]  585 	add	sp, #4
                                    586 ;src/banks_nonintrinsic.c:83: printf("%s", switch_to(hello_rom_1));
    00000227 CDr00r00         [24]  587 	call	_set_ROM_bank1
    0000022A FAr00r00         [16]  588 	ld	a, (#_hello_rom_1 + 0)
    0000022D EAr00r00         [16]  589 	ld	(#___dummy_variable),a
    00000230 11r00r00         [12]  590 	ld	de, #_hello_rom_1
    00000233 D5               [16]  591 	push	de
    00000234 11rD8r02         [12]  592 	ld	de, #___str_4
    00000237 D5               [16]  593 	push	de
    00000238 CDr00r00         [24]  594 	call	_printf
    0000023B E8 04            [16]  595 	add	sp, #4
                                    596 ;src/banks_nonintrinsic.c:84: printf("%s", switch_to(hello_rom_2));
    0000023D CDr1Br00         [24]  597 	call	_set_ROM_bank2
    00000240 FAr00r00         [16]  598 	ld	a, (#_hello_rom_2 + 0)
    00000243 EAr00r00         [16]  599 	ld	(#___dummy_variable),a
    00000246 11r00r00         [12]  600 	ld	de, #_hello_rom_2
    00000249 D5               [16]  601 	push	de
    0000024A 11rD8r02         [12]  602 	ld	de, #___str_4
    0000024D D5               [16]  603 	push	de
    0000024E CDr00r00         [24]  604 	call	_printf
    00000251 E8 04            [16]  605 	add	sp, #4
                                    606 ;src/banks_nonintrinsic.c:85: printf("%s", switch_to(hello_sram_0));
    00000253 CDr25r00         [24]  607 	call	_set_RAM_bank0
    00000256 FAr00r00         [16]  608 	ld	a, (#_hello_sram_0 + 0)
    00000259 EAr00r00         [16]  609 	ld	(#___dummy_variable),a
    0000025C 11r00r00         [12]  610 	ld	de, #_hello_sram_0
    0000025F D5               [16]  611 	push	de
    00000260 11rD8r02         [12]  612 	ld	de, #___str_4
    00000263 D5               [16]  613 	push	de
    00000264 CDr00r00         [24]  614 	call	_printf
    00000267 E8 04            [16]  615 	add	sp, #4
                                    616 ;src/banks_nonintrinsic.c:86: printf("%s", switch_to(hello_sram_1));
    00000269 CDr2Br00         [24]  617 	call	_set_RAM_bank1
    0000026C FAr00r00         [16]  618 	ld	a, (#_hello_sram_1 + 0)
    0000026F EAr00r00         [16]  619 	ld	(#___dummy_variable),a
    00000272 11r00r00         [12]  620 	ld	de, #_hello_sram_1
    00000275 D5               [16]  621 	push	de
    00000276 11rD8r02         [12]  622 	ld	de, #___str_4
    00000279 D5               [16]  623 	push	de
    0000027A CDr00r00         [24]  624 	call	_printf
    0000027D E8 04            [16]  625 	add	sp, #4
                                    626 ;src/banks_nonintrinsic.c:89: printf("1+2+4+8=0x%x", (int)(add_num_wram + add_num_sram_0 + (*add_num__ptr[0]) + (*add_num__ptr[1])));
    0000027F CDr25r00         [24]  627 	call	_set_RAM_bank0
    00000282 21r15r00         [12]  628 	ld	hl, #_add_num_wram
    00000285 2A               [ 8]  629 	ld	a, (hl+)
    00000286 5F               [ 4]  630 	ld	e, a
    00000287 56               [ 8]  631 	ld	d, (hl)
    00000288 21r14r00         [12]  632 	ld	hl, #_add_num_sram_0
    0000028B 2A               [ 8]  633 	ld	a,	(hl+)
    0000028C 66               [ 8]  634 	ld	h, (hl)
    0000028D 6F               [ 4]  635 	ld	l, a
    0000028E 19               [ 8]  636 	add	hl, de
    0000028F 33               [ 8]  637 	inc	sp
    00000290 33               [ 8]  638 	inc	sp
    00000291 E5               [16]  639 	push	hl
    00000292 CDr00r00         [24]  640 	call	_set_ROM_bank1
    00000295 21r13r00         [12]  641 	ld	hl, #_add_num__ptr
    00000298 2A               [ 8]  642 	ld	a,	(hl+)
    00000299 66               [ 8]  643 	ld	h, (hl)
                                    644 ;	spillPairReg hl
    0000029A 6F               [ 4]  645 	ld	l, a
                                    646 ;	spillPairReg hl
                                    647 ;	spillPairReg hl
    0000029B E5               [16]  648 	push	hl
    0000029C CDr2Br00         [24]  649 	call	_set_RAM_bank1
    0000029F E1               [12]  650 	pop	hl
    000002A0 2A               [ 8]  651 	ld	a, (hl+)
    000002A1 4F               [ 4]  652 	ld	c, a
    000002A2 46               [ 8]  653 	ld	b, (hl)
    000002A3 C5               [16]  654 	push	bc
    000002A4 CDr00r00         [24]  655 	call	_set_ROM_bank1
    000002A7 C1               [12]  656 	pop	bc
    000002A8 E1               [12]  657 	pop	hl
    000002A9 E5               [16]  658 	push	hl
    000002AA 09               [ 8]  659 	add	hl, bc
    000002AB 4D               [ 4]  660 	ld	c, l
    000002AC 44               [ 4]  661 	ld	b, h
    000002AD 21r15r00         [12]  662 	ld	hl, #(_add_num__ptr + 2)
    000002B0 2A               [ 8]  663 	ld	a,	(hl+)
    000002B1 66               [ 8]  664 	ld	h, (hl)
                                    665 ;	spillPairReg hl
    000002B2 6F               [ 4]  666 	ld	l, a
                                    667 ;	spillPairReg hl
                                    668 ;	spillPairReg hl
    000002B3 E5               [16]  669 	push	hl
    000002B4 C5               [16]  670 	push	bc
    000002B5 CDr2Br00         [24]  671 	call	_set_RAM_bank1
    000002B8 C1               [12]  672 	pop	bc
    000002B9 E1               [12]  673 	pop	hl
    000002BA 2A               [ 8]  674 	ld	a,	(hl+)
    000002BB 66               [ 8]  675 	ld	h, (hl)
                                    676 ;	spillPairReg hl
    000002BC 6F               [ 4]  677 	ld	l, a
                                    678 ;	spillPairReg hl
                                    679 ;	spillPairReg hl
    000002BD 09               [ 8]  680 	add	hl, bc
    000002BE E5               [16]  681 	push	hl
    000002BF 11rDBr02         [12]  682 	ld	de, #___str_5
    000002C2 D5               [16]  683 	push	de
    000002C3 CDr00r00         [24]  684 	call	_printf
                                    685 ;src/banks_nonintrinsic.c:92: while(1);
    000002C6                        686 00116$:
    000002C6 18 FE            [12]  687 	jr	00116$
                                    688 ;src/banks_nonintrinsic.c:93: }
    000002C8 33               [ 8]  689 	inc	sp
    000002C9 33               [ 8]  690 	inc	sp
    000002CA C9               [16]  691 	ret
    000002CB                        692 ___str_2:
    000002CB 6F 6E 63 65 20 6D 6F   693 	.ascii "once more..."
             72 65 2E 2E 2E
    000002D7 00                     694 	.db 0x00
    000002D8                        695 ___str_4:
    000002D8 25 73                  696 	.ascii "%s"
    000002DA 00                     697 	.db 0x00
    000002DB                        698 ___str_5:
    000002DB 31 2B 32 2B 34 2B 38   699 	.ascii "1+2+4+8=0x%x"
             3D 30 78 25 78
    000002E7 00                     700 	.db 0x00
                                    701 	.area _CODE
                                    702 	.area _INITIALIZER
    00000000                        703 __xinit___current_ram_bank:
    00000000 00                     704 	.db #0x00	; 0
    00000001                        705 __xinit__data:
    00000001 44 41 54 41            706 	.ascii "DATA"
    00000005 00                     707 	.db 0x00
    00000006 00                     708 	.db 0x00
    00000007 00                     709 	.db 0x00
    00000008 00                     710 	.db 0x00
    00000009 00                     711 	.db 0x00
    0000000A 00                     712 	.db 0x00
    0000000B 00                     713 	.db 0x00
    0000000C 00                     714 	.db 0x00
    0000000D 00                     715 	.db 0x00
    0000000E 00                     716 	.db 0x00
    0000000F 00                     717 	.db 0x00
    00000010 00                     718 	.db 0x00
    00000011 00                     719 	.db 0x00
    00000012 00                     720 	.db 0x00
    00000013 00                     721 	.db 0x00
    00000014 00                     722 	.db 0x00
    00000015                        723 __xinit__add_num_wram:
    00000015 01 00                  724 	.dw #0x0001
                                    725 	.area _CABS (ABS)
