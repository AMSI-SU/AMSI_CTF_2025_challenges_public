                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module testrand
                                      6 	.optsdcc -mmos6502
                                      7 	
                                      8 ;; Ordering of segments for the linker.
                                      9 	.area _ZP      (PAG)
                                     10 	.area _OSEG    (PAG, OVR)
                                     11 	.area _HOME
                                     12 	.area _GSINIT
                                     13 	.area _GSFINAL
                                     14 	.area _CODE
                                     15 	.area _XINIT
                                     16 	.area _DATA
                                     17 	.area _DATA
                                     18 	.area _BSS
                                     19 ;--------------------------------------------------------
                                     20 ; Public variables in this module
                                     21 ;--------------------------------------------------------
                                     22 	.globl _main
                                     23 	.globl _waitpadup
                                     24 	.globl _waitpad
                                     25 	.globl _arand
                                     26 	.globl _initarand
                                     27 	.globl _rand
                                     28 	.globl _puts
                                     29 	.globl _printf
                                     30 	.globl _OAMDMA
                                     31 	.globl _PPUDATA
                                     32 	.globl _PPUADDR
                                     33 	.globl _PPUSCROLL
                                     34 	.globl _OAMDATA
                                     35 	.globl _OAMADDR
                                     36 	.globl _PPUSTATUS
                                     37 	.globl _PPUMASK
                                     38 	.globl _PPUCTRL
                                     39 ;--------------------------------------------------------
                                     40 ; ZP ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area _ZP      (PAG)
    00000000                         43 _main_sloc0_1_0:
    00000000                         44 	.ds 1
    00000001                         45 _main_sloc1_1_0:
    00000001                         46 	.ds 2
    00000003                         47 _main_sloc2_1_0:
    00000003                         48 	.ds 2
                                     49 ;--------------------------------------------------------
                                     50 ; overlayable items in ram
                                     51 ;--------------------------------------------------------
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area _BSS
                         00002000    56 _PPUCTRL	=	0x2000
                         00002001    57 _PPUMASK	=	0x2001
                         00002002    58 _PPUSTATUS	=	0x2002
                         00002003    59 _OAMADDR	=	0x2003
                         00002004    60 _OAMDATA	=	0x2004
                         00002005    61 _PPUSCROLL	=	0x2005
                         00002006    62 _PPUADDR	=	0x2006
                         00002007    63 _PPUDATA	=	0x2007
                         00004014    64 _OAMDMA	=	0x4014
                                     65 ;--------------------------------------------------------
                                     66 ; absolute external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area _DABS    (ABS)
                                     69 ;--------------------------------------------------------
                                     70 ; initialized external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area _DATA
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area _HOME
                                     77 	.area _GSINIT
                                     78 	.area _GSFINAL
                                     79 	.area _GSINIT
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area _HOME
                                     84 	.area _HOME
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area _CODE
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'main'
                                     91 ;------------------------------------------------------------
                                     92 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                     93 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                     94 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                     95 ;i                         Allocated to registers 
                                     96 ;------------------------------------------------------------
                                     97 ;	src/testrand.c: 14: void main(void)
                                     98 ;	-----------------------------------------
                                     99 ;	 function main
                                    100 ;	-----------------------------------------
                                    101 ;	Register assignment is optimal.
                                    102 ;	Stack space usage: 0 bytes.
    00000000                        103 _main:
                                    104 ;	src/testrand.c: 16: puts("press A...");
    00000000 A2s00            [ 2]  105 	ldx	#>___str_0
    00000002 A9r64            [ 2]  106 	lda	#___str_0
    00000004 20r00r00         [ 6]  107 	jsr	_puts
                                    108 ;	src/testrand.c: 17: waitpad(J_A);
    00000007 A9 80            [ 2]  109 	lda	#0x80
    00000009 20r00r00         [ 6]  110 	jsr	_waitpad
                                    111 ;	src/testrand.c: 18: initarand(sys_time);
    0000000C ADr00r00         [ 4]  112 	lda	_sys_time
    0000000F AEr01r00         [ 4]  113 	ldx	(_sys_time + 1)
    00000012 20r00r00         [ 6]  114 	jsr	_initarand
                                    115 ;	src/testrand.c: 19: while(TRUE) {
    00000015                        116 00103$:
                                    117 ;	src/testrand.c: 20: waitpadup();
    00000015 20r00r00         [ 6]  118 	jsr	_waitpadup
                                    119 ;	src/testrand.c: 21: for (uint8_t i = 0; i != 16; i++) 
    00000018 A2 00            [ 2]  120 	ldx	#0x00
    0000001A 86*00            [ 3]  121 	stx	*_main_sloc0_1_0
    0000001C                        122 00106$:
    0000001C A5*00            [ 3]  123 	lda	*_main_sloc0_1_0
    0000001E C9 10            [ 2]  124 	cmp	#0x10
    00000020 F0 32            [ 4]  125 	beq	00101$
                                    126 ;	src/testrand.c: 22: printf("r=%x a=%x\n", (uint16_t)rand(), (uint16_t)arand());
    00000022 20r00r00         [ 6]  127 	jsr	_arand
    00000025 85*01            [ 3]  128 	sta	*_main_sloc1_1_0
    00000027 A2 00            [ 2]  129 	ldx	#0x00
    00000029 86*02            [ 3]  130 	stx	*(_main_sloc1_1_0 + 1)
    0000002B 20r00r00         [ 6]  131 	jsr	_rand
    0000002E 85*03            [ 3]  132 	sta	*_main_sloc2_1_0
    00000030 A2 00            [ 2]  133 	ldx	#0x00
    00000032 86*04            [ 3]  134 	stx	*(_main_sloc2_1_0 + 1)
    00000034 A5*02            [ 3]  135 	lda	*(_main_sloc1_1_0 + 1)
    00000036 48               [ 3]  136 	pha
    00000037 A5*01            [ 3]  137 	lda	*_main_sloc1_1_0
    00000039 48               [ 3]  138 	pha
    0000003A A5*04            [ 3]  139 	lda	*(_main_sloc2_1_0 + 1)
    0000003C 48               [ 3]  140 	pha
    0000003D A5*03            [ 3]  141 	lda	*_main_sloc2_1_0
    0000003F 48               [ 3]  142 	pha
    00000040 A9s00            [ 2]  143 	lda	#>___str_1
    00000042 48               [ 3]  144 	pha
    00000043 A9r6F            [ 2]  145 	lda	#___str_1
    00000045 48               [ 3]  146 	pha
    00000046 20r00r00         [ 6]  147 	jsr	_printf
    00000049 68               [ 4]  148 	pla
    0000004A 68               [ 4]  149 	pla
    0000004B 68               [ 4]  150 	pla
    0000004C 68               [ 4]  151 	pla
    0000004D 68               [ 4]  152 	pla
    0000004E 68               [ 4]  153 	pla
                                    154 ;	src/testrand.c: 21: for (uint8_t i = 0; i != 16; i++) 
    0000004F E6*00            [ 5]  155 	inc	*_main_sloc0_1_0
    00000051 4Cr1Cr00         [ 3]  156 	jmp	00106$
    00000054                        157 00101$:
                                    158 ;	src/testrand.c: 23: puts("press A...");
    00000054 A2s00            [ 2]  159 	ldx	#>___str_0
    00000056 A9r64            [ 2]  160 	lda	#___str_0
    00000058 20r00r00         [ 6]  161 	jsr	_puts
                                    162 ;	src/testrand.c: 24: waitpad(J_A);
    0000005B A9 80            [ 2]  163 	lda	#0x80
    0000005D 20r00r00         [ 6]  164 	jsr	_waitpad
    00000060 4Cr15r00         [ 3]  165 	jmp	00103$
                                    166 ;	src/testrand.c: 26: }
    00000063 60               [ 6]  167 	rts
                                    168 	.area _CODE
    00000064                        169 ___str_0:
    00000064 70 72 65 73 73 20 41   170 	.ascii "press A..."
             2E 2E 2E
    0000006E 00                     171 	.db 0x00
    0000006F                        172 ___str_1:
    0000006F 72 3D 25 78 20 61 3D   173 	.ascii "r=%x a=%x"
             25 78
    00000078 0A                     174 	.db 0x0a
    00000079 00                     175 	.db 0x00
                                    176 	.area _XINIT
                                    177 	.area _CABS    (ABS)
