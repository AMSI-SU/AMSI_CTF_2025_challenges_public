                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module testrand
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _waitpadup
                                     13 	.globl _waitpad
                                     14 	.globl _arand
                                     15 	.globl _initarand
                                     16 	.globl _rand
                                     17 	.globl _puts
                                     18 	.globl _printf
                                     19 ;--------------------------------------------------------
                                     20 ; special function registers
                                     21 ;--------------------------------------------------------
                                     22 ;--------------------------------------------------------
                                     23 ; ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area _DATA
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area _INITIALIZED
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area _DABS (ABS)
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area _HOME
                                     38 	.area _GSINIT
                                     39 	.area _GSFINAL
                                     40 	.area _GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area _HOME
                                     45 	.area _HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area _CODE
                                     50 ;src/testrand.c:14: void main(void)
                                     51 ;	---------------------------------
                                     52 ; Function main
                                     53 ; ---------------------------------
    00000000                         54 _main::
    00000000 E8 FD            [16]   55 	add	sp, #-3
                                     56 ;src/testrand.c:16: puts("press A...");
    00000002 11r56r00         [12]   57 	ld	de, #___str_0
    00000005 CDr00r00         [24]   58 	call	_puts
                                     59 ;src/testrand.c:17: waitpad(J_A);
    00000008 3E 10            [ 8]   60 	ld	a, #0x10
    0000000A CDr00r00         [24]   61 	call	_waitpad
                                     62 ;src/testrand.c:18: initarand(sys_time);
    0000000D 21r00r00         [12]   63 	ld	hl, #_sys_time
    00000010 2A               [ 8]   64 	ld	a, (hl+)
    00000011 5F               [ 4]   65 	ld	e, a
    00000012 56               [ 8]   66 	ld	d, (hl)
    00000013 D5               [16]   67 	push	de
    00000014 CDr00r00         [24]   68 	call	_initarand
    00000017 E1               [12]   69 	pop	hl
                                     70 ;src/testrand.c:19: while(TRUE) {
    00000018                         71 00103$:
                                     72 ;src/testrand.c:20: waitpadup();
    00000018 CDr00r00         [24]   73 	call	_waitpadup
                                     74 ;src/testrand.c:21: for (uint8_t i = 0; i != 16; i++) 
    0000001B F8 02            [12]   75 	ldhl	sp,	#2
    0000001D 36 00            [12]   76 	ld	(hl), #0x00
    0000001F                         77 00106$:
    0000001F F8 02            [12]   78 	ldhl	sp,	#2
    00000021 7E               [ 8]   79 	ld	a, (hl)
    00000022 D6 10            [ 8]   80 	sub	a, #0x10
    00000024 28 20            [12]   81 	jr	Z, 00101$
                                     82 ;src/testrand.c:22: printf("r=%x a=%x\n", (uint16_t)rand(), (uint16_t)arand());
    00000026 CDr00r00         [24]   83 	call	_arand
    00000029 F8 00            [12]   84 	ldhl	sp,	#0
    0000002B 7B               [ 4]   85 	ld	a, e
    0000002C 22               [ 8]   86 	ld	(hl+), a
    0000002D 36 00            [12]   87 	ld	(hl), #0x00
    0000002F CDr00r00         [24]   88 	call	_rand
    00000032 AF               [ 4]   89 	xor	a, a
    00000033 C1               [12]   90 	pop	bc
    00000034 C5               [16]   91 	push	bc
    00000035 C5               [16]   92 	push	bc
    00000036 57               [ 4]   93 	ld	d, a
    00000037 D5               [16]   94 	push	de
    00000038 11r61r00         [12]   95 	ld	de, #___str_1
    0000003B D5               [16]   96 	push	de
    0000003C CDr00r00         [24]   97 	call	_printf
    0000003F E8 06            [16]   98 	add	sp, #6
                                     99 ;src/testrand.c:21: for (uint8_t i = 0; i != 16; i++) 
    00000041 F8 02            [12]  100 	ldhl	sp,	#2
    00000043 34               [12]  101 	inc	(hl)
    00000044 18 D9            [12]  102 	jr	00106$
    00000046                        103 00101$:
                                    104 ;src/testrand.c:23: puts("press A...");
    00000046 11r56r00         [12]  105 	ld	de, #___str_0
    00000049 CDr00r00         [24]  106 	call	_puts
                                    107 ;src/testrand.c:24: waitpad(J_A);
    0000004C 3E 10            [ 8]  108 	ld	a, #0x10
    0000004E CDr00r00         [24]  109 	call	_waitpad
    00000051 18 C5            [12]  110 	jr	00103$
                                    111 ;src/testrand.c:26: }
    00000053 E8 03            [16]  112 	add	sp, #3
    00000055 C9               [16]  113 	ret
    00000056                        114 ___str_0:
    00000056 70 72 65 73 73 20 41   115 	.ascii "press A..."
             2E 2E 2E
    00000060 00                     116 	.db 0x00
    00000061                        117 ___str_1:
    00000061 72 3D 25 78 20 61 3D   118 	.ascii "r=%x a=%x"
             25 78
    0000006A 0A                     119 	.db 0x0a
    0000006B 00                     120 	.db 0x00
                                    121 	.area _CODE
                                    122 	.area _INITIALIZER
                                    123 	.area _CABS (ABS)
