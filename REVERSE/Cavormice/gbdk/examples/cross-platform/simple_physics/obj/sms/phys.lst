                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module phys
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _set_tile_2bpp_data
                                     13 	.globl _joypad
                                     14 	.globl _vsync
                                     15 	.globl _joy
                                     16 	.globl _old_joy
                                     17 	.globl _SpdY
                                     18 	.globl _SpdX
                                     19 	.globl _PosY
                                     20 	.globl _PosX
                                     21 	.globl _sprite_data
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                         00000000    25 _GG_STATE	=	0x0000
                         00000001    26 _GG_EXT_7BIT	=	0x0001
                         00000002    27 _GG_EXT_CTL	=	0x0002
                         00000003    28 _GG_SIO_SEND	=	0x0003
                         00000004    29 _GG_SIO_RECV	=	0x0004
                         00000005    30 _GG_SIO_CTL	=	0x0005
                         00000006    31 _GG_SOUND_PAN	=	0x0006
                         0000003E    32 _MEMORY_CTL	=	0x003e
                         0000003F    33 _JOY_CTL	=	0x003f
                         0000007E    34 _VCOUNTER	=	0x007e
                         0000007F    35 _PSG	=	0x007f
                         0000007F    36 _HCOUNTER	=	0x007f
                         000000BE    37 _VDP_DATA	=	0x00be
                         000000BF    38 _VDP_CMD	=	0x00bf
                         000000BF    39 _VDP_STATUS	=	0x00bf
                         000000DC    40 _JOY_PORT1	=	0x00dc
                         000000DD    41 _JOY_PORT2	=	0x00dd
                         000000F0    42 _FMADDRESS	=	0x00f0
                         000000F1    43 _FMDATA	=	0x00f1
                         000000F2    44 _AUDIOCTRL	=	0x00f2
                                     45 ;--------------------------------------------------------
                                     46 ; ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area _DATA
                         0000FFFC    49 _RAM_CONTROL	=	0xfffc
                         0000FFF8    50 _GLASSES_3D	=	0xfff8
                         0000FFFD    51 _MAP_FRAME0	=	0xfffd
                         0000FFFE    52 _MAP_FRAME1	=	0xfffe
                         0000FFFF    53 _MAP_FRAME2	=	0xffff
    00000000                         54 _PosX::
    00000000                         55 	.ds 2
    00000002                         56 _PosY::
    00000002                         57 	.ds 2
    00000004                         58 _SpdX::
    00000004                         59 	.ds 2
    00000006                         60 _SpdY::
    00000006                         61 	.ds 2
    00000008                         62 _old_joy::
    00000008                         63 	.ds 1
                                     64 ;--------------------------------------------------------
                                     65 ; ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area _INITIALIZED
    00000000                         68 _joy::
    00000000                         69 	.ds 1
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area _DABS (ABS)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area _HOME
                                     78 	.area _GSINIT
                                     79 	.area _GSFINAL
                                     80 	.area _GSINIT
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area _HOME
                                     85 	.area _HOME
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area _CODE
                                     90 ;src/phys.c:45: void main(void) {
                                     91 ;	---------------------------------
                                     92 ; Function main
                                     93 ; ---------------------------------
    00000000                         94 _main::
                                     95 ;src/phys.c:51: set_sprite_data(0, 4, sprite_data);
                                     96 ;../../../include/sms/sms.h:636: set_tile_2bpp_data((uint8_t)(start) + 0x100u, ntiles, src, _current_2bpp_palette);
    00000000 2Ar00r00         [16]   97 	ld	hl, (__current_2bpp_palette)
    00000003 E5               [11]   98 	push	hl
    00000004 21r7Dr01         [10]   99 	ld	hl, #_sprite_data
    00000007 E5               [11]  100 	push	hl
    00000008 21 04 00         [10]  101 	ld	hl, #0x0004
    0000000B E5               [11]  102 	push	hl
    0000000C 21 00 01         [10]  103 	ld	hl, #0x0100
    0000000F E5               [11]  104 	push	hl
    00000010 CDr00r00         [17]  105 	call	_set_tile_2bpp_data
                                    106 ;../../../include/sms/sms.h:807: shadow_OAM[0x41+(nb << 1)] = tile;
    00000013 21r41r00         [10]  107 	ld	hl, #_shadow_OAM+65
    00000016 36 00            [10]  108 	ld	(hl), #0x00
                                    109 ;src/phys.c:57: SHOW_BKG; SHOW_SPRITES;
    00000018 21r00r00         [10]  110 	ld	hl, #__sprites_OFF
    0000001B 36 00            [10]  111 	ld	(hl), #0x00
                                    112 ;src/phys.c:59: PosX = PosY = PIXELS_TO_SUBPIXELS(64);
    0000001D 21 00 04         [10]  113 	ld	hl, #0x0400
    00000020 22r02r00         [16]  114 	ld	(_PosY), hl
    00000023 22r00r00         [16]  115 	ld	(_PosX), hl
                                    116 ;src/phys.c:60: SpdX = SpdY = PIXELS_TO_SUBPIXELS(0);
    00000026 65               [ 4]  117 	ld	h, l
    00000027 22r06r00         [16]  118 	ld	(_SpdY), hl
    0000002A 22r04r00         [16]  119 	ld	(_SpdX), hl
                                    120 ;src/phys.c:62: while(TRUE) {
    0000002D                        121 00132$:
                                    122 ;src/phys.c:64: INPUT_PROCESS;
    0000002D 3Ar00r00         [13]  123 	ld	a, (_joy+0)
    00000030 32r08r00         [13]  124 	ld	(_old_joy+0), a
    00000033 CDr00r00         [17]  125 	call	_joypad
    00000036 7D               [ 4]  126 	ld	a, l
    00000037 32r00r00         [13]  127 	ld	(_joy+0), a
    0000003A 3Ar00r00         [13]  128 	ld	a, (_joy+0)
    0000003D 4F               [ 4]  129 	ld	c, a
                                    130 ;src/phys.c:68: SpdY -= Y_ACCELERATION_IN_SUBPIXELS;
    0000003E 2Ar06r00         [16]  131 	ld	hl, (_SpdY)
                                    132 ;src/phys.c:67: if (INPUT_KEY(J_UP)) {
    00000041 CB 41            [ 8]  133 	bit	0, c
    00000043 28 1C            [12]  134 	jr	Z, 00108$
                                    135 ;src/phys.c:68: SpdY -= Y_ACCELERATION_IN_SUBPIXELS;
    00000045 2B               [ 6]  136 	dec	hl
    00000046 2B               [ 6]  137 	dec	hl
    00000047 22r06r00         [16]  138 	ld	(_SpdY), hl
                                    139 ;src/phys.c:69: if (SpdY < -MAX_Y_SPEED_IN_SUBPIXELS) SpdY = -MAX_Y_SPEED_IN_SUBPIXELS;
    0000004A 3Ar06r00         [13]  140 	ld	a, (_SpdY+0)
    0000004D D6 C0            [ 7]  141 	sub	a, #0xc0
    0000004F 3Ar07r00         [13]  142 	ld	a, (_SpdY+1)
    00000052 17               [ 4]  143 	rla
    00000053 3F               [ 4]  144 	ccf
    00000054 1F               [ 4]  145 	rra
    00000055 DE 7F            [ 7]  146 	sbc	a, #0x7f
    00000057 30 28            [12]  147 	jr	NC, 00109$
    00000059 21 C0 FF         [10]  148 	ld	hl, #0xffc0
    0000005C 22r06r00         [16]  149 	ld	(_SpdY), hl
    0000005F 18 20            [12]  150 	jr	00109$
    00000061                        151 00108$:
                                    152 ;src/phys.c:70: } else if (INPUT_KEY(J_DOWN)) {
    00000061 CB 49            [ 8]  153 	bit	1, c
    00000063 28 1C            [12]  154 	jr	Z, 00109$
                                    155 ;src/phys.c:71: SpdY += Y_ACCELERATION_IN_SUBPIXELS;
    00000065 23               [ 6]  156 	inc	hl
    00000066 23               [ 6]  157 	inc	hl
    00000067 22r06r00         [16]  158 	ld	(_SpdY), hl
                                    159 ;src/phys.c:72: if (SpdY > MAX_Y_SPEED_IN_SUBPIXELS) SpdY = MAX_Y_SPEED_IN_SUBPIXELS;
    0000006A 2Ar06r00         [16]  160 	ld	hl, (_SpdY)
    0000006D 3E 40            [ 7]  161 	ld	a, #0x40
    0000006F BD               [ 4]  162 	cp	a, l
    00000070 3E 00            [ 7]  163 	ld	a, #0x00
    00000072 9C               [ 4]  164 	sbc	a, h
    00000073 E2r78r00         [10]  165 	jp	PO, 00248$
    00000076 EE 80            [ 7]  166 	xor	a, #0x80
    00000078                        167 00248$:
    00000078 F2r81r00         [10]  168 	jp	P, 00109$
    0000007B 21 40 00         [10]  169 	ld	hl, #0x0040
    0000007E 22r06r00         [16]  170 	ld	(_SpdY), hl
    00000081                        171 00109$:
                                    172 ;src/phys.c:75: SpdX -= X_ACCELERATION_IN_SUBPIXELS;
    00000081 2Ar04r00         [16]  173 	ld	hl, (_SpdX)
                                    174 ;src/phys.c:74: if (INPUT_KEY(J_LEFT)) {
    00000084 CB 51            [ 8]  175 	bit	2, c
    00000086 28 1C            [12]  176 	jr	Z, 00117$
                                    177 ;src/phys.c:75: SpdX -= X_ACCELERATION_IN_SUBPIXELS;
    00000088 2B               [ 6]  178 	dec	hl
    00000089 2B               [ 6]  179 	dec	hl
    0000008A 22r04r00         [16]  180 	ld	(_SpdX), hl
                                    181 ;src/phys.c:76: if (SpdX < -MAX_X_SPEED_IN_SUBPIXELS) SpdX = -MAX_X_SPEED_IN_SUBPIXELS;
    0000008D 3Ar04r00         [13]  182 	ld	a, (_SpdX+0)
    00000090 D6 C0            [ 7]  183 	sub	a, #0xc0
    00000092 3Ar05r00         [13]  184 	ld	a, (_SpdX+1)
    00000095 17               [ 4]  185 	rla
    00000096 3F               [ 4]  186 	ccf
    00000097 1F               [ 4]  187 	rra
    00000098 DE 7F            [ 7]  188 	sbc	a, #0x7f
    0000009A 30 28            [12]  189 	jr	NC, 00118$
    0000009C 21 C0 FF         [10]  190 	ld	hl, #0xffc0
    0000009F 22r04r00         [16]  191 	ld	(_SpdX), hl
    000000A2 18 20            [12]  192 	jr	00118$
    000000A4                        193 00117$:
                                    194 ;src/phys.c:77: } else if (INPUT_KEY(J_RIGHT)) {
    000000A4 CB 59            [ 8]  195 	bit	3, c
    000000A6 28 1C            [12]  196 	jr	Z, 00118$
                                    197 ;src/phys.c:78: SpdX += X_ACCELERATION_IN_SUBPIXELS;
    000000A8 23               [ 6]  198 	inc	hl
    000000A9 23               [ 6]  199 	inc	hl
    000000AA 22r04r00         [16]  200 	ld	(_SpdX), hl
                                    201 ;src/phys.c:79: if (SpdX > MAX_X_SPEED_IN_SUBPIXELS) SpdX = MAX_X_SPEED_IN_SUBPIXELS;
    000000AD 2Ar04r00         [16]  202 	ld	hl, (_SpdX)
    000000B0 3E 40            [ 7]  203 	ld	a, #0x40
    000000B2 BD               [ 4]  204 	cp	a, l
    000000B3 3E 00            [ 7]  205 	ld	a, #0x00
    000000B5 9C               [ 4]  206 	sbc	a, h
    000000B6 E2rBBr00         [10]  207 	jp	PO, 00251$
    000000B9 EE 80            [ 7]  208 	xor	a, #0x80
    000000BB                        209 00251$:
    000000BB F2rC4r00         [10]  210 	jp	P, 00118$
    000000BE 21 40 00         [10]  211 	ld	hl, #0x0040
    000000C1 22r04r00         [16]  212 	ld	(_SpdX), hl
    000000C4                        213 00118$:
                                    214 ;src/phys.c:82: if (INPUT_KEYPRESS(J_A)) {
    000000C4 3Ar08r00         [13]  215 	ld	a, (_old_joy+0)
    000000C7 06 00            [ 7]  216 	ld	b, #0x00
    000000C9 2F               [ 4]  217 	cpl
    000000CA 4F               [ 4]  218 	ld	c, a
    000000CB 78               [ 4]  219 	ld	a, b
    000000CC 2F               [ 4]  220 	cpl
    000000CD 3Ar00r00         [13]  221 	ld	a, (_joy+0)
    000000D0 1E 00            [ 7]  222 	ld	e, #0x00
    000000D2 A1               [ 4]  223 	and	a, c
    000000D3 CB 6F            [ 8]  224 	bit	5,a
    000000D5 28 06            [12]  225 	jr	Z, 00120$
                                    226 ;src/phys.c:83: SpdY = -JUMP_ACCELERATION_IN_SUBPIXELS;
    000000D7 21 E0 FF         [10]  227 	ld	hl, #0xffe0
    000000DA 22r06r00         [16]  228 	ld	(_SpdY), hl
    000000DD                        229 00120$:
                                    230 ;src/phys.c:87: PosX += SpdX, PosY += SpdY;
    000000DD 21r04r00         [10]  231 	ld	hl, #_SpdX
    000000E0 D5               [11]  232 	push	de
    000000E1 11r00r00         [10]  233 	ld	de, #_PosX
    000000E4 1A               [ 7]  234 	ld	a, (de)
    000000E5 86               [ 7]  235 	add	a, (hl)
    000000E6 23               [ 6]  236 	inc	hl
    000000E7 12               [ 7]  237 	ld	(de), a
    000000E8 13               [ 6]  238 	inc	de
    000000E9 1A               [ 7]  239 	ld	a, (de)
    000000EA 8E               [ 7]  240 	adc	a, (hl)
    000000EB 12               [ 7]  241 	ld	(de), a
    000000EC D1               [10]  242 	pop	de
    000000ED 21r06r00         [10]  243 	ld	hl, #_SpdY
    000000F0 D5               [11]  244 	push	de
    000000F1 11r02r00         [10]  245 	ld	de, #_PosY
    000000F4 1A               [ 7]  246 	ld	a, (de)
    000000F5 86               [ 7]  247 	add	a, (hl)
    000000F6 23               [ 6]  248 	inc	hl
    000000F7 12               [ 7]  249 	ld	(de), a
    000000F8 13               [ 6]  250 	inc	de
    000000F9 1A               [ 7]  251 	ld	a, (de)
    000000FA 8E               [ 7]  252 	adc	a, (hl)
    000000FB 12               [ 7]  253 	ld	(de), a
    000000FC D1               [10]  254 	pop	de
                                    255 ;src/phys.c:90: move_sprite(0, SUBPIXELS_TO_PIXELS(PosX), SUBPIXELS_TO_PIXELS(PosY));
    000000FD 2Ar02r00         [16]  256 	ld	hl, (_PosY)
    00000100 CB 2C            [ 8]  257 	sra	h
    00000102 CB 1D            [ 8]  258 	rr	l
    00000104 CB 2C            [ 8]  259 	sra	h
    00000106 CB 1D            [ 8]  260 	rr	l
    00000108 CB 2C            [ 8]  261 	sra	h
    0000010A CB 1D            [ 8]  262 	rr	l
    0000010C CB 2C            [ 8]  263 	sra	h
    0000010E CB 1D            [ 8]  264 	rr	l
    00000110 45               [ 4]  265 	ld	b, l
    00000111 2Ar00r00         [16]  266 	ld	hl, (_PosX)
    00000114 CB 2C            [ 8]  267 	sra	h
    00000116 CB 1D            [ 8]  268 	rr	l
    00000118 CB 2C            [ 8]  269 	sra	h
    0000011A CB 1D            [ 8]  270 	rr	l
    0000011C CB 2C            [ 8]  271 	sra	h
    0000011E CB 1D            [ 8]  272 	rr	l
    00000120 CB 2C            [ 8]  273 	sra	h
    00000122 CB 1D            [ 8]  274 	rr	l
    00000124 4D               [ 4]  275 	ld	c, l
                                    276 ;../../../include/sms/sms.h:848: shadow_OAM[nb] = (y < VDP_SAT_TERM) ? y : 0xC0;
    00000125 78               [ 4]  277 	ld	a, b
    00000126 D6 D0            [ 7]  278 	sub	a, #0xd0
    00000128 38 02            [12]  279 	jr	C, 00140$
    0000012A 06 C0            [ 7]  280 	ld	b, #0xc0
    0000012C                        281 00140$:
    0000012C 21r00r00         [10]  282 	ld	hl, #_shadow_OAM
    0000012F 70               [ 7]  283 	ld	(hl), b
                                    284 ;../../../include/sms/sms.h:849: shadow_OAM[0x40+(nb << 1)] = x;
    00000130 21r40r00         [10]  285 	ld	hl, #(_shadow_OAM + 64)
    00000133 71               [ 7]  286 	ld	(hl), c
                                    287 ;src/phys.c:93: if (SpdY < 0) SpdY++; else if (SpdY) SpdY--;
    00000134 2Ar06r00         [16]  288 	ld	hl, (_SpdY)
    00000137 CB 7C            [ 8]  289 	bit	7, h
    00000139 28 09            [12]  290 	jr	Z, 00124$
    0000013B 2Ar06r00         [16]  291 	ld	hl, (_SpdY)
    0000013E 23               [ 6]  292 	inc	hl
    0000013F 22r06r00         [16]  293 	ld	(_SpdY), hl
    00000142 18 10            [12]  294 	jr	00125$
    00000144                        295 00124$:
    00000144 3Ar07r00         [13]  296 	ld	a, (_SpdY+1)
    00000147 21r06r00         [10]  297 	ld	hl, #_SpdY
    0000014A B6               [ 7]  298 	or	a, (hl)
    0000014B 28 07            [12]  299 	jr	Z, 00125$
    0000014D 2Ar06r00         [16]  300 	ld	hl, (_SpdY)
    00000150 2B               [ 6]  301 	dec	hl
    00000151 22r06r00         [16]  302 	ld	(_SpdY), hl
    00000154                        303 00125$:
                                    304 ;src/phys.c:94: if (SpdX < 0) SpdX++; else if (SpdX) SpdX--;
    00000154 2Ar04r00         [16]  305 	ld	hl, (_SpdX)
    00000157 CB 7C            [ 8]  306 	bit	7, h
    00000159 28 09            [12]  307 	jr	Z, 00129$
    0000015B 2Ar04r00         [16]  308 	ld	hl, (_SpdX)
    0000015E 23               [ 6]  309 	inc	hl
    0000015F 22r04r00         [16]  310 	ld	(_SpdX), hl
    00000162 18 13            [12]  311 	jr	00130$
    00000164                        312 00129$:
    00000164 3Ar05r00         [13]  313 	ld	a, (_SpdX+1)
    00000167 FD 21r04r00      [14]  314 	ld	iy, #_SpdX
    0000016B FD B6 00         [19]  315 	or	a, 0 (iy)
    0000016E 28 07            [12]  316 	jr	Z, 00130$
    00000170 2Ar04r00         [16]  317 	ld	hl, (_SpdX)
    00000173 2B               [ 6]  318 	dec	hl
    00000174 22r04r00         [16]  319 	ld	(_SpdX), hl
    00000177                        320 00130$:
                                    321 ;src/phys.c:97: vsync();
    00000177 CDr00r00         [17]  322 	call	_vsync
                                    323 ;src/phys.c:99: }
    0000017A C3r2Dr00         [10]  324 	jp	00132$
    0000017D                        325 _sprite_data:
    0000017D 3C                     326 	.db #0x3c	; 60
    0000017E 3C                     327 	.db #0x3c	; 60
    0000017F 42                     328 	.db #0x42	; 66	'B'
    00000180 7E                     329 	.db #0x7e	; 126
    00000181 99                     330 	.db #0x99	; 153
    00000182 FF                     331 	.db #0xff	; 255
    00000183 A9                     332 	.db #0xa9	; 169
    00000184 FF                     333 	.db #0xff	; 255
    00000185 89                     334 	.db #0x89	; 137
    00000186 FF                     335 	.db #0xff	; 255
    00000187 89                     336 	.db #0x89	; 137
    00000188 FF                     337 	.db #0xff	; 255
    00000189 42                     338 	.db #0x42	; 66	'B'
    0000018A 7E                     339 	.db #0x7e	; 126
    0000018B 3C                     340 	.db #0x3c	; 60
    0000018C 3C                     341 	.db #0x3c	; 60
    0000018D 3C                     342 	.db #0x3c	; 60
    0000018E 3C                     343 	.db #0x3c	; 60
    0000018F 42                     344 	.db #0x42	; 66	'B'
    00000190 7E                     345 	.db #0x7e	; 126
    00000191 B9                     346 	.db #0xb9	; 185
    00000192 FF                     347 	.db #0xff	; 255
    00000193 89                     348 	.db #0x89	; 137
    00000194 FF                     349 	.db #0xff	; 255
    00000195 91                     350 	.db #0x91	; 145
    00000196 FF                     351 	.db #0xff	; 255
    00000197 B9                     352 	.db #0xb9	; 185
    00000198 FF                     353 	.db #0xff	; 255
    00000199 42                     354 	.db #0x42	; 66	'B'
    0000019A 7E                     355 	.db #0x7e	; 126
    0000019B 3C                     356 	.db #0x3c	; 60
    0000019C 3C                     357 	.db #0x3c	; 60
    0000019D 3C                     358 	.db #0x3c	; 60
    0000019E 3C                     359 	.db #0x3c	; 60
    0000019F 42                     360 	.db #0x42	; 66	'B'
    000001A0 7E                     361 	.db #0x7e	; 126
    000001A1 99                     362 	.db #0x99	; 153
    000001A2 FF                     363 	.db #0xff	; 255
    000001A3 89                     364 	.db #0x89	; 137
    000001A4 FF                     365 	.db #0xff	; 255
    000001A5 99                     366 	.db #0x99	; 153
    000001A6 FF                     367 	.db #0xff	; 255
    000001A7 89                     368 	.db #0x89	; 137
    000001A8 FF                     369 	.db #0xff	; 255
    000001A9 5A                     370 	.db #0x5a	; 90	'Z'
    000001AA 7E                     371 	.db #0x7e	; 126
    000001AB 3C                     372 	.db #0x3c	; 60
    000001AC 3C                     373 	.db #0x3c	; 60
    000001AD 3C                     374 	.db #0x3c	; 60
    000001AE 3C                     375 	.db #0x3c	; 60
    000001AF 42                     376 	.db #0x42	; 66	'B'
    000001B0 7E                     377 	.db #0x7e	; 126
    000001B1 A9                     378 	.db #0xa9	; 169
    000001B2 FF                     379 	.db #0xff	; 255
    000001B3 A9                     380 	.db #0xa9	; 169
    000001B4 FF                     381 	.db #0xff	; 255
    000001B5 B9                     382 	.db #0xb9	; 185
    000001B6 FF                     383 	.db #0xff	; 255
    000001B7 89                     384 	.db #0x89	; 137
    000001B8 FF                     385 	.db #0xff	; 255
    000001B9 42                     386 	.db #0x42	; 66	'B'
    000001BA 7E                     387 	.db #0x7e	; 126
    000001BB 3C                     388 	.db #0x3c	; 60
    000001BC 3C                     389 	.db #0x3c	; 60
                                    390 	.area _CODE
                                    391 	.area _INITIALIZER
    00000000                        392 __xinit__joy:
    00000000 00                     393 	.db #0x00	; 0
                                    394 	.area _CABS (ABS)
