                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module phys
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _set_sprite_data
                                     13 	.globl _vsync
                                     14 	.globl _joypad
                                     15 	.globl _joy
                                     16 	.globl _old_joy
                                     17 	.globl _SpdY
                                     18 	.globl _SpdX
                                     19 	.globl _PosY
                                     20 	.globl _PosX
                                     21 	.globl _sprite_data
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _DATA
    00000000                         29 _PosX::
    00000000                         30 	.ds 2
    00000002                         31 _PosY::
    00000002                         32 	.ds 2
    00000004                         33 _SpdX::
    00000004                         34 	.ds 2
    00000006                         35 _SpdY::
    00000006                         36 	.ds 2
    00000008                         37 _old_joy::
    00000008                         38 	.ds 1
                                     39 ;--------------------------------------------------------
                                     40 ; ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area _INITIALIZED
    00000000                         43 _joy::
    00000000                         44 	.ds 1
                                     45 ;--------------------------------------------------------
                                     46 ; absolute external ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area _DABS (ABS)
                                     49 ;--------------------------------------------------------
                                     50 ; global & static initialisations
                                     51 ;--------------------------------------------------------
                                     52 	.area _HOME
                                     53 	.area _GSINIT
                                     54 	.area _GSFINAL
                                     55 	.area _GSINIT
                                     56 ;--------------------------------------------------------
                                     57 ; Home
                                     58 ;--------------------------------------------------------
                                     59 	.area _HOME
                                     60 	.area _HOME
                                     61 ;--------------------------------------------------------
                                     62 ; code
                                     63 ;--------------------------------------------------------
                                     64 	.area _CODE
                                     65 ;src/phys.c:45: void main(void) {
                                     66 ;	---------------------------------
                                     67 ; Function main
                                     68 ; ---------------------------------
    00000000                         69 _main::
    00000000 3B               [ 8]   70 	dec	sp
                                     71 ;src/phys.c:48: BGP_REG = OBP0_REG = OBP1_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
    00000001 3E E4            [ 8]   72 	ld	a, #0xe4
    00000003 E0r00            [12]   73 	ldh	(_OBP1_REG + 0), a
    00000005 3E E4            [ 8]   74 	ld	a, #0xe4
    00000007 E0r00            [12]   75 	ldh	(_OBP0_REG + 0), a
    00000009 3E E4            [ 8]   76 	ld	a, #0xe4
    0000000B E0r00            [12]   77 	ldh	(_BGP_REG + 0), a
                                     78 ;src/phys.c:51: set_sprite_data(0, 4, sprite_data);
    0000000D 11rF3r01         [12]   79 	ld	de, #_sprite_data
    00000010 D5               [16]   80 	push	de
    00000011 21 00 04         [12]   81 	ld	hl, #0x400
    00000014 E5               [16]   82 	push	hl
    00000015 CDr00r00         [24]   83 	call	_set_sprite_data
    00000018 E8 04            [16]   84 	add	sp, #4
                                     85 ;../../../include/gb/gb.h:1875: shadow_OAM[nb].tile=tile;
    0000001A 21r02r00         [12]   86 	ld	hl, #(_shadow_OAM + 2)
    0000001D 36 00            [12]   87 	ld	(hl), #0x00
                                     88 ;src/phys.c:57: SHOW_BKG; SHOW_SPRITES;
    0000001F F0r00            [12]   89 	ldh	a, (_LCDC_REG + 0)
    00000021 F6 80            [ 8]   90 	or	a, #0x80
    00000023 E0r00            [12]   91 	ldh	(_LCDC_REG + 0), a
    00000025 F0r00            [12]   92 	ldh	a, (_LCDC_REG + 0)
    00000027 F6 40            [ 8]   93 	or	a, #0x40
    00000029 E0r00            [12]   94 	ldh	(_LCDC_REG + 0), a
                                     95 ;src/phys.c:59: PosX = PosY = PIXELS_TO_SUBPIXELS(64);
    0000002B 21r02r00         [12]   96 	ld	hl, #_PosY
    0000002E AF               [ 4]   97 	xor	a, a
    0000002F 22               [ 8]   98 	ld	(hl+), a
    00000030 36 04            [12]   99 	ld	(hl), #0x04
    00000032 21r00r00         [12]  100 	ld	hl, #_PosX
    00000035 AF               [ 4]  101 	xor	a, a
    00000036 22               [ 8]  102 	ld	(hl+), a
    00000037 36 04            [12]  103 	ld	(hl), #0x04
                                    104 ;src/phys.c:60: SpdX = SpdY = PIXELS_TO_SUBPIXELS(0);
    00000039 AF               [ 4]  105 	xor	a, a
    0000003A 21r06r00         [12]  106 	ld	hl, #_SpdY
    0000003D 22               [ 8]  107 	ld	(hl+), a
    0000003E 77               [ 8]  108 	ld	(hl), a
    0000003F AF               [ 4]  109 	xor	a, a
    00000040 21r04r00         [12]  110 	ld	hl, #_SpdX
    00000043 22               [ 8]  111 	ld	(hl+), a
    00000044 77               [ 8]  112 	ld	(hl), a
                                    113 ;src/phys.c:62: while(TRUE) {
    00000045                        114 00132$:
                                    115 ;src/phys.c:64: INPUT_PROCESS;
    00000045 FAr00r00         [16]  116 	ld	a, (#_joy)
    00000048 EAr08r00         [16]  117 	ld	(#_old_joy),a
    0000004B CDr00r00         [24]  118 	call	_joypad
    0000004E 21r00r00         [12]  119 	ld	hl, #_joy
    00000051 77               [ 8]  120 	ld	(hl), a
                                    121 ;src/phys.c:67: if (INPUT_KEY(J_UP)) {
    00000052 7E               [ 8]  122 	ld	a, (hl)
    00000053 F8 00            [12]  123 	ldhl	sp,	#0
    00000055 77               [ 8]  124 	ld	(hl), a
                                    125 ;src/phys.c:68: SpdY -= Y_ACCELERATION_IN_SUBPIXELS;
    00000056 21r06r00         [12]  126 	ld	hl, #_SpdY
    00000059 2A               [ 8]  127 	ld	a, (hl+)
    0000005A 5F               [ 4]  128 	ld	e, a
    0000005B 56               [ 8]  129 	ld	d, (hl)
                                    130 ;src/phys.c:67: if (INPUT_KEY(J_UP)) {
    0000005C E5               [16]  131 	push	hl
    0000005D F8 02            [12]  132 	ldhl	sp,	#2
    0000005F CB 56            [12]  133 	bit	2, (hl)
    00000061 E1               [12]  134 	pop	hl
    00000062 28 2E            [12]  135 	jr	Z, 00108$
                                    136 ;src/phys.c:68: SpdY -= Y_ACCELERATION_IN_SUBPIXELS;
    00000064 1B               [ 8]  137 	dec	de
    00000065 1B               [ 8]  138 	dec	de
    00000066 21r06r00         [12]  139 	ld	hl, #_SpdY
    00000069 7B               [ 4]  140 	ld	a, e
    0000006A 22               [ 8]  141 	ld	(hl+), a
                                    142 ;src/phys.c:69: if (SpdY < -MAX_Y_SPEED_IN_SUBPIXELS) SpdY = -MAX_Y_SPEED_IN_SUBPIXELS;
    0000006B 7A               [ 4]  143 	ld	a, d
    0000006C 32               [ 8]  144 	ld	(hl-), a
    0000006D 2A               [ 8]  145 	ld	a, (hl+)
    0000006E D6 C0            [ 8]  146 	sub	a, #0xc0
    00000070 7E               [ 8]  147 	ld	a, (hl)
    00000071 DE FF            [ 8]  148 	sbc	a, #0xff
    00000073 56               [ 8]  149 	ld	d, (hl)
    00000074 3E FF            [ 8]  150 	ld	a, #0xff
    00000076 CB 7F            [ 8]  151 	bit	7,a
    00000078 28 07            [12]  152 	jr	Z, 00237$
    0000007A CB 7A            [ 8]  153 	bit	7, d
    0000007C 20 08            [12]  154 	jr	NZ, 00238$
    0000007E BF               [ 4]  155 	cp	a, a
    0000007F 18 05            [12]  156 	jr	00238$
    00000081                        157 00237$:
    00000081 CB 7A            [ 8]  158 	bit	7, d
    00000083 28 01            [12]  159 	jr	Z, 00238$
    00000085 37               [ 4]  160 	scf
    00000086                        161 00238$:
    00000086 30 41            [12]  162 	jr	NC, 00109$
    00000088 21r06r00         [12]  163 	ld	hl, #_SpdY
    0000008B 3E C0            [ 8]  164 	ld	a, #0xc0
    0000008D 22               [ 8]  165 	ld	(hl+), a
    0000008E 36 FF            [12]  166 	ld	(hl), #0xff
    00000090 18 37            [12]  167 	jr	00109$
    00000092                        168 00108$:
                                    169 ;src/phys.c:70: } else if (INPUT_KEY(J_DOWN)) {
    00000092 E5               [16]  170 	push	hl
    00000093 F8 02            [12]  171 	ldhl	sp,	#2
    00000095 CB 5E            [12]  172 	bit	3, (hl)
    00000097 E1               [12]  173 	pop	hl
    00000098 28 2F            [12]  174 	jr	Z, 00109$
                                    175 ;src/phys.c:71: SpdY += Y_ACCELERATION_IN_SUBPIXELS;
    0000009A 13               [ 8]  176 	inc	de
    0000009B 13               [ 8]  177 	inc	de
    0000009C 21r06r00         [12]  178 	ld	hl, #_SpdY
    0000009F 7B               [ 4]  179 	ld	a, e
    000000A0 22               [ 8]  180 	ld	(hl+), a
                                    181 ;src/phys.c:72: if (SpdY > MAX_Y_SPEED_IN_SUBPIXELS) SpdY = MAX_Y_SPEED_IN_SUBPIXELS;
    000000A1 7A               [ 4]  182 	ld	a, d
    000000A2 32               [ 8]  183 	ld	(hl-), a
    000000A3 2A               [ 8]  184 	ld	a, (hl+)
    000000A4 4F               [ 4]  185 	ld	c, a
    000000A5 46               [ 8]  186 	ld	b, (hl)
    000000A6 58               [ 4]  187 	ld	e, b
    000000A7 16 00            [ 8]  188 	ld	d, #0x00
    000000A9 3E 40            [ 8]  189 	ld	a, #0x40
    000000AB B9               [ 4]  190 	cp	a, c
    000000AC 3E 00            [ 8]  191 	ld	a, #0x00
    000000AE 98               [ 4]  192 	sbc	a, b
    000000AF CB 7B            [ 8]  193 	bit	7, e
    000000B1 28 07            [12]  194 	jr	Z, 00240$
    000000B3 CB 7A            [ 8]  195 	bit	7, d
    000000B5 20 08            [12]  196 	jr	NZ, 00241$
    000000B7 BF               [ 4]  197 	cp	a, a
    000000B8 18 05            [12]  198 	jr	00241$
    000000BA                        199 00240$:
    000000BA CB 7A            [ 8]  200 	bit	7, d
    000000BC 28 01            [12]  201 	jr	Z, 00241$
    000000BE 37               [ 4]  202 	scf
    000000BF                        203 00241$:
    000000BF 30 08            [12]  204 	jr	NC, 00109$
    000000C1 21r06r00         [12]  205 	ld	hl, #_SpdY
    000000C4 3E 40            [ 8]  206 	ld	a, #0x40
    000000C6 22               [ 8]  207 	ld	(hl+), a
    000000C7 AF               [ 4]  208 	xor	a, a
    000000C8 77               [ 8]  209 	ld	(hl), a
    000000C9                        210 00109$:
                                    211 ;src/phys.c:75: SpdX -= X_ACCELERATION_IN_SUBPIXELS;
    000000C9 21r04r00         [12]  212 	ld	hl, #_SpdX
    000000CC 2A               [ 8]  213 	ld	a, (hl+)
    000000CD 4F               [ 4]  214 	ld	c, a
    000000CE 46               [ 8]  215 	ld	b, (hl)
                                    216 ;src/phys.c:74: if (INPUT_KEY(J_LEFT)) {
    000000CF E5               [16]  217 	push	hl
    000000D0 F8 02            [12]  218 	ldhl	sp,	#2
    000000D2 CB 4E            [12]  219 	bit	1, (hl)
    000000D4 E1               [12]  220 	pop	hl
    000000D5 28 2E            [12]  221 	jr	Z, 00117$
                                    222 ;src/phys.c:75: SpdX -= X_ACCELERATION_IN_SUBPIXELS;
    000000D7 0B               [ 8]  223 	dec	bc
    000000D8 0B               [ 8]  224 	dec	bc
    000000D9 21r04r00         [12]  225 	ld	hl, #_SpdX
    000000DC 79               [ 4]  226 	ld	a, c
    000000DD 22               [ 8]  227 	ld	(hl+), a
                                    228 ;src/phys.c:76: if (SpdX < -MAX_X_SPEED_IN_SUBPIXELS) SpdX = -MAX_X_SPEED_IN_SUBPIXELS;
    000000DE 78               [ 4]  229 	ld	a, b
    000000DF 32               [ 8]  230 	ld	(hl-), a
    000000E0 2A               [ 8]  231 	ld	a, (hl+)
    000000E1 D6 C0            [ 8]  232 	sub	a, #0xc0
    000000E3 7E               [ 8]  233 	ld	a, (hl)
    000000E4 DE FF            [ 8]  234 	sbc	a, #0xff
    000000E6 56               [ 8]  235 	ld	d, (hl)
    000000E7 3E FF            [ 8]  236 	ld	a, #0xff
    000000E9 CB 7F            [ 8]  237 	bit	7,a
    000000EB 28 07            [12]  238 	jr	Z, 00243$
    000000ED CB 7A            [ 8]  239 	bit	7, d
    000000EF 20 08            [12]  240 	jr	NZ, 00244$
    000000F1 BF               [ 4]  241 	cp	a, a
    000000F2 18 05            [12]  242 	jr	00244$
    000000F4                        243 00243$:
    000000F4 CB 7A            [ 8]  244 	bit	7, d
    000000F6 28 01            [12]  245 	jr	Z, 00244$
    000000F8 37               [ 4]  246 	scf
    000000F9                        247 00244$:
    000000F9 30 41            [12]  248 	jr	NC, 00118$
    000000FB 21r04r00         [12]  249 	ld	hl, #_SpdX
    000000FE 3E C0            [ 8]  250 	ld	a, #0xc0
    00000100 22               [ 8]  251 	ld	(hl+), a
    00000101 36 FF            [12]  252 	ld	(hl), #0xff
    00000103 18 37            [12]  253 	jr	00118$
    00000105                        254 00117$:
                                    255 ;src/phys.c:77: } else if (INPUT_KEY(J_RIGHT)) {
    00000105 E5               [16]  256 	push	hl
    00000106 F8 02            [12]  257 	ldhl	sp,	#2
    00000108 CB 46            [12]  258 	bit	0, (hl)
    0000010A E1               [12]  259 	pop	hl
    0000010B 28 2F            [12]  260 	jr	Z, 00118$
                                    261 ;src/phys.c:78: SpdX += X_ACCELERATION_IN_SUBPIXELS;
    0000010D 03               [ 8]  262 	inc	bc
    0000010E 03               [ 8]  263 	inc	bc
    0000010F 21r04r00         [12]  264 	ld	hl, #_SpdX
    00000112 79               [ 4]  265 	ld	a, c
    00000113 22               [ 8]  266 	ld	(hl+), a
                                    267 ;src/phys.c:79: if (SpdX > MAX_X_SPEED_IN_SUBPIXELS) SpdX = MAX_X_SPEED_IN_SUBPIXELS;
    00000114 78               [ 4]  268 	ld	a, b
    00000115 32               [ 8]  269 	ld	(hl-), a
    00000116 2A               [ 8]  270 	ld	a, (hl+)
    00000117 4F               [ 4]  271 	ld	c, a
    00000118 46               [ 8]  272 	ld	b, (hl)
    00000119 58               [ 4]  273 	ld	e, b
    0000011A 16 00            [ 8]  274 	ld	d, #0x00
    0000011C 3E 40            [ 8]  275 	ld	a, #0x40
    0000011E B9               [ 4]  276 	cp	a, c
    0000011F 3E 00            [ 8]  277 	ld	a, #0x00
    00000121 98               [ 4]  278 	sbc	a, b
    00000122 CB 7B            [ 8]  279 	bit	7, e
    00000124 28 07            [12]  280 	jr	Z, 00246$
    00000126 CB 7A            [ 8]  281 	bit	7, d
    00000128 20 08            [12]  282 	jr	NZ, 00247$
    0000012A BF               [ 4]  283 	cp	a, a
    0000012B 18 05            [12]  284 	jr	00247$
    0000012D                        285 00246$:
    0000012D CB 7A            [ 8]  286 	bit	7, d
    0000012F 28 01            [12]  287 	jr	Z, 00247$
    00000131 37               [ 4]  288 	scf
    00000132                        289 00247$:
    00000132 30 08            [12]  290 	jr	NC, 00118$
    00000134 21r04r00         [12]  291 	ld	hl, #_SpdX
    00000137 3E 40            [ 8]  292 	ld	a, #0x40
    00000139 22               [ 8]  293 	ld	(hl+), a
    0000013A AF               [ 4]  294 	xor	a, a
    0000013B 77               [ 8]  295 	ld	(hl), a
    0000013C                        296 00118$:
                                    297 ;src/phys.c:82: if (INPUT_KEYPRESS(J_A)) {
    0000013C FAr08r00         [16]  298 	ld	a, (#_old_joy)
    0000013F 0E 00            [ 8]  299 	ld	c, #0x00
    00000141 2F               [ 4]  300 	cpl
    00000142 5F               [ 4]  301 	ld	e, a
    00000143 79               [ 4]  302 	ld	a, c
    00000144 2F               [ 4]  303 	cpl
    00000145 FAr00r00         [16]  304 	ld	a, (#_joy)
    00000148 A3               [ 4]  305 	and	a, e
    00000149 CB 67            [ 8]  306 	bit	4,a
    0000014B 28 08            [12]  307 	jr	Z, 00120$
                                    308 ;src/phys.c:83: SpdY = -JUMP_ACCELERATION_IN_SUBPIXELS;
    0000014D 21r06r00         [12]  309 	ld	hl, #_SpdY
    00000150 3E E0            [ 8]  310 	ld	a, #0xe0
    00000152 22               [ 8]  311 	ld	(hl+), a
    00000153 36 FF            [12]  312 	ld	(hl), #0xff
    00000155                        313 00120$:
                                    314 ;src/phys.c:87: PosX += SpdX, PosY += SpdY;
    00000155 FAr00r00         [16]  315 	ld	a, (#_PosX)
    00000158 21r04r00         [12]  316 	ld	hl, #_SpdX
    0000015B 86               [ 8]  317 	add	a, (hl)
    0000015C 21r00r00         [12]  318 	ld	hl, #_PosX
    0000015F 22               [ 8]  319 	ld	(hl+), a
    00000160 7E               [ 8]  320 	ld	a, (hl)
    00000161 21r05r00         [12]  321 	ld	hl, #_SpdX + 1
    00000164 8E               [ 8]  322 	adc	a, (hl)
    00000165 EAr01r00         [16]  323 	ld	(#_PosX + 1),a
    00000168 FAr02r00         [16]  324 	ld	a, (#_PosY)
    0000016B 21r06r00         [12]  325 	ld	hl, #_SpdY
    0000016E 86               [ 8]  326 	add	a, (hl)
    0000016F 21r02r00         [12]  327 	ld	hl, #_PosY
    00000172 22               [ 8]  328 	ld	(hl+), a
    00000173 7E               [ 8]  329 	ld	a, (hl)
    00000174 21r07r00         [12]  330 	ld	hl, #_SpdY + 1
    00000177 8E               [ 8]  331 	adc	a, (hl)
    00000178 21r03r00         [12]  332 	ld	hl, #_PosY + 1
                                    333 ;src/phys.c:90: move_sprite(0, SUBPIXELS_TO_PIXELS(PosX), SUBPIXELS_TO_PIXELS(PosY));
    0000017B 32               [ 8]  334 	ld	(hl-), a
    0000017C 2A               [ 8]  335 	ld	a, (hl+)
    0000017D 4F               [ 4]  336 	ld	c, a
    0000017E 46               [ 8]  337 	ld	b, (hl)
    0000017F CB 28            [ 8]  338 	sra	b
    00000181 CB 19            [ 8]  339 	rr	c
    00000183 CB 28            [ 8]  340 	sra	b
    00000185 CB 19            [ 8]  341 	rr	c
    00000187 CB 28            [ 8]  342 	sra	b
    00000189 CB 19            [ 8]  343 	rr	c
    0000018B CB 28            [ 8]  344 	sra	b
    0000018D CB 19            [ 8]  345 	rr	c
    0000018F 21r00r00         [12]  346 	ld	hl, #_PosX
    00000192 2A               [ 8]  347 	ld	a, (hl+)
    00000193 47               [ 4]  348 	ld	b, a
    00000194 5E               [ 8]  349 	ld	e, (hl)
    00000195 CB 2B            [ 8]  350 	sra	e
    00000197 CB 18            [ 8]  351 	rr	b
    00000199 CB 2B            [ 8]  352 	sra	e
    0000019B CB 18            [ 8]  353 	rr	b
    0000019D CB 2B            [ 8]  354 	sra	e
    0000019F CB 18            [ 8]  355 	rr	b
    000001A1 CB 2B            [ 8]  356 	sra	e
    000001A3 CB 18            [ 8]  357 	rr	b
                                    358 ;../../../include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
                                    359 ;../../../include/gb/gb.h:1962: itm->y=y, itm->x=x;
    000001A5 21r00r00         [12]  360 	ld	hl, #_shadow_OAM
    000001A8 71               [ 8]  361 	ld	(hl), c
    000001A9 21r01r00         [12]  362 	ld	hl, #(_shadow_OAM + 1)
    000001AC 70               [ 8]  363 	ld	(hl), b
                                    364 ;src/phys.c:93: if (SpdY < 0) SpdY++; else if (SpdY) SpdY--;
    000001AD 21r06r00         [12]  365 	ld	hl, #_SpdY
    000001B0 2A               [ 8]  366 	ld	a, (hl+)
    000001B1 CB 7E            [12]  367 	bit	7, (hl)
    000001B3 28 08            [12]  368 	jr	Z, 00124$
    000001B5 2B               [ 8]  369 	dec	hl
    000001B6 34               [12]  370 	inc	(hl)
    000001B7 20 13            [12]  371 	jr	NZ, 00125$
    000001B9 23               [ 8]  372 	inc	hl
    000001BA 34               [12]  373 	inc	(hl)
    000001BB 18 0F            [12]  374 	jr	00125$
    000001BD                        375 00124$:
    000001BD 21r07r00         [12]  376 	ld	hl, #_SpdY + 1
    000001C0 3A               [ 8]  377 	ld	a, (hl-)
    000001C1 B6               [ 8]  378 	or	a, (hl)
    000001C2 28 08            [12]  379 	jr	Z, 00125$
    000001C4 2A               [ 8]  380 	ld	a, (hl+)
    000001C5 5F               [ 4]  381 	ld	e, a
    000001C6 3A               [ 8]  382 	ld	a, (hl-)
    000001C7 57               [ 4]  383 	ld	d, a
    000001C8 1B               [ 8]  384 	dec	de
    000001C9 7B               [ 4]  385 	ld	a, e
    000001CA 22               [ 8]  386 	ld	(hl+), a
    000001CB 72               [ 8]  387 	ld	(hl), d
    000001CC                        388 00125$:
                                    389 ;src/phys.c:94: if (SpdX < 0) SpdX++; else if (SpdX) SpdX--;
    000001CC 21r04r00         [12]  390 	ld	hl, #_SpdX
    000001CF 2A               [ 8]  391 	ld	a, (hl+)
    000001D0 CB 7E            [12]  392 	bit	7, (hl)
    000001D2 28 08            [12]  393 	jr	Z, 00129$
    000001D4 2B               [ 8]  394 	dec	hl
    000001D5 34               [12]  395 	inc	(hl)
    000001D6 20 13            [12]  396 	jr	NZ, 00130$
    000001D8 23               [ 8]  397 	inc	hl
    000001D9 34               [12]  398 	inc	(hl)
    000001DA 18 0F            [12]  399 	jr	00130$
    000001DC                        400 00129$:
    000001DC 21r05r00         [12]  401 	ld	hl, #_SpdX + 1
    000001DF 3A               [ 8]  402 	ld	a, (hl-)
    000001E0 B6               [ 8]  403 	or	a, (hl)
    000001E1 28 08            [12]  404 	jr	Z, 00130$
    000001E3 2A               [ 8]  405 	ld	a, (hl+)
    000001E4 5F               [ 4]  406 	ld	e, a
    000001E5 3A               [ 8]  407 	ld	a, (hl-)
    000001E6 57               [ 4]  408 	ld	d, a
    000001E7 1B               [ 8]  409 	dec	de
    000001E8 7B               [ 4]  410 	ld	a, e
    000001E9 22               [ 8]  411 	ld	(hl+), a
    000001EA 72               [ 8]  412 	ld	(hl), d
    000001EB                        413 00130$:
                                    414 ;src/phys.c:97: vsync();
    000001EB CDr00r00         [24]  415 	call	_vsync
    000001EE C3r45r00         [16]  416 	jp	00132$
                                    417 ;src/phys.c:99: }
    000001F1 33               [ 8]  418 	inc	sp
    000001F2 C9               [16]  419 	ret
    000001F3                        420 _sprite_data:
    000001F3 3C                     421 	.db #0x3c	; 60
    000001F4 3C                     422 	.db #0x3c	; 60
    000001F5 42                     423 	.db #0x42	; 66	'B'
    000001F6 7E                     424 	.db #0x7e	; 126
    000001F7 99                     425 	.db #0x99	; 153
    000001F8 FF                     426 	.db #0xff	; 255
    000001F9 A9                     427 	.db #0xa9	; 169
    000001FA FF                     428 	.db #0xff	; 255
    000001FB 89                     429 	.db #0x89	; 137
    000001FC FF                     430 	.db #0xff	; 255
    000001FD 89                     431 	.db #0x89	; 137
    000001FE FF                     432 	.db #0xff	; 255
    000001FF 42                     433 	.db #0x42	; 66	'B'
    00000200 7E                     434 	.db #0x7e	; 126
    00000201 3C                     435 	.db #0x3c	; 60
    00000202 3C                     436 	.db #0x3c	; 60
    00000203 3C                     437 	.db #0x3c	; 60
    00000204 3C                     438 	.db #0x3c	; 60
    00000205 42                     439 	.db #0x42	; 66	'B'
    00000206 7E                     440 	.db #0x7e	; 126
    00000207 B9                     441 	.db #0xb9	; 185
    00000208 FF                     442 	.db #0xff	; 255
    00000209 89                     443 	.db #0x89	; 137
    0000020A FF                     444 	.db #0xff	; 255
    0000020B 91                     445 	.db #0x91	; 145
    0000020C FF                     446 	.db #0xff	; 255
    0000020D B9                     447 	.db #0xb9	; 185
    0000020E FF                     448 	.db #0xff	; 255
    0000020F 42                     449 	.db #0x42	; 66	'B'
    00000210 7E                     450 	.db #0x7e	; 126
    00000211 3C                     451 	.db #0x3c	; 60
    00000212 3C                     452 	.db #0x3c	; 60
    00000213 3C                     453 	.db #0x3c	; 60
    00000214 3C                     454 	.db #0x3c	; 60
    00000215 42                     455 	.db #0x42	; 66	'B'
    00000216 7E                     456 	.db #0x7e	; 126
    00000217 99                     457 	.db #0x99	; 153
    00000218 FF                     458 	.db #0xff	; 255
    00000219 89                     459 	.db #0x89	; 137
    0000021A FF                     460 	.db #0xff	; 255
    0000021B 99                     461 	.db #0x99	; 153
    0000021C FF                     462 	.db #0xff	; 255
    0000021D 89                     463 	.db #0x89	; 137
    0000021E FF                     464 	.db #0xff	; 255
    0000021F 5A                     465 	.db #0x5a	; 90	'Z'
    00000220 7E                     466 	.db #0x7e	; 126
    00000221 3C                     467 	.db #0x3c	; 60
    00000222 3C                     468 	.db #0x3c	; 60
    00000223 3C                     469 	.db #0x3c	; 60
    00000224 3C                     470 	.db #0x3c	; 60
    00000225 42                     471 	.db #0x42	; 66	'B'
    00000226 7E                     472 	.db #0x7e	; 126
    00000227 A9                     473 	.db #0xa9	; 169
    00000228 FF                     474 	.db #0xff	; 255
    00000229 A9                     475 	.db #0xa9	; 169
    0000022A FF                     476 	.db #0xff	; 255
    0000022B B9                     477 	.db #0xb9	; 185
    0000022C FF                     478 	.db #0xff	; 255
    0000022D 89                     479 	.db #0x89	; 137
    0000022E FF                     480 	.db #0xff	; 255
    0000022F 42                     481 	.db #0x42	; 66	'B'
    00000230 7E                     482 	.db #0x7e	; 126
    00000231 3C                     483 	.db #0x3c	; 60
    00000232 3C                     484 	.db #0x3c	; 60
                                    485 	.area _CODE
                                    486 	.area _INITIALIZER
    00000000                        487 __xinit__joy:
    00000000 00                     488 	.db #0x00	; 0
                                    489 	.area _CABS (ABS)
