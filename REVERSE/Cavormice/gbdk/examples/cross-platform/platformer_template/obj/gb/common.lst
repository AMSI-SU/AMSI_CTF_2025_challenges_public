                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module common
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _hide_sprites_range
                                     12 	.globl _set_bkg_palette
                                     13 	.globl _fill_bkg_rect
                                     14 	.globl _set_bkg_tiles
                                     15 	.globl _set_bkg_data
                                     16 	.globl _display_off
                                     17 	.globl _vsync
                                     18 	.globl _joypad
                                     19 	.globl _joypadPrevious
                                     20 	.globl _joypadCurrent
                                     21 	.globl _WaitForStartOrA
                                     22 	.globl _setBKGPalettes
                                     23 	.globl _ShowCentered
                                     24 ;--------------------------------------------------------
                                     25 ; special function registers
                                     26 ;--------------------------------------------------------
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _DATA
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area _INITIALIZED
    00000000                         35 _joypadCurrent::
    00000000                         36 	.ds 1
    00000001                         37 _joypadPrevious::
    00000001                         38 	.ds 1
                                     39 ;--------------------------------------------------------
                                     40 ; absolute external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area _DABS (ABS)
                                     43 ;--------------------------------------------------------
                                     44 ; global & static initialisations
                                     45 ;--------------------------------------------------------
                                     46 	.area _HOME
                                     47 	.area _GSINIT
                                     48 	.area _GSFINAL
                                     49 	.area _GSINIT
                                     50 ;--------------------------------------------------------
                                     51 ; Home
                                     52 ;--------------------------------------------------------
                                     53 	.area _HOME
                                     54 ;src/common.c:24: void setBKGPalettes(uint8_t count, const palette_color_t *palettes) NONBANKED{
                                     55 ;	---------------------------------
                                     56 ; Function setBKGPalettes
                                     57 ; ---------------------------------
    00000000                         58 _setBKGPalettes::
    00000000 47               [ 4]   59 	ld	b, a
                                     60 ;src/common.c:31: if (_cpu == CGB_TYPE) {
    00000001 FAr00r00         [16]   61 	ld	a, (#__cpu)
    00000004 D6 11            [ 8]   62 	sub	a, #0x11
    00000006 C0               [20]   63 	ret	NZ
                                     64 ;src/common.c:32: set_bkg_palette(OAMF_CGB_PAL0, count, palettes);
    00000007 D5               [16]   65 	push	de
    00000008 C5               [16]   66 	push	bc
    00000009 33               [ 8]   67 	inc	sp
    0000000A AF               [ 4]   68 	xor	a, a
    0000000B F5               [16]   69 	push	af
    0000000C 33               [ 8]   70 	inc	sp
    0000000D CDr00r00         [24]   71 	call	_set_bkg_palette
    00000010 E8 04            [16]   72 	add	sp, #4
                                     73 ;src/common.c:37: }
    00000012 C9               [16]   74 	ret
                                     75 ;src/common.c:40: void ShowCentered(uint8_t width,uint8_t height,uint8_t bank, uint8_t* tileData, uint8_t tileCount, uint8_t* mapData, const palette_color_t* palettes) NONBANKED{
                                     76 ;	---------------------------------
                                     77 ; Function ShowCentered
                                     78 ; ---------------------------------
    00000013                         79 _ShowCentered::
    00000013 E8 F9            [16]   80 	add	sp, #-7
    00000015 F8 06            [12]   81 	ldhl	sp,	#6
    00000017 77               [ 8]   82 	ld	(hl), a
                                     83 ;src/common.c:43: DISPLAY_OFF;
    00000018 CDr00r00         [24]   84 	call	_display_off
                                     85 ;src/common.c:45: uint8_t _previous_bank = CURRENT_BANK;
    0000001B F0r00            [12]   86 	ldh	a, (__current_bank + 0)
    0000001D F8 00            [12]   87 	ldhl	sp,	#0
    0000001F 77               [ 8]   88 	ld	(hl), a
                                     89 ;src/common.c:49: hide_sprites_range(0,MAX_HARDWARE_SPRITES);
    00000020 D5               [16]   90 	push	de
    00000021 1E 28            [ 8]   91 	ld	e, #0x28
    00000023 AF               [ 4]   92 	xor	a, a
    00000024 CDr00r00         [24]   93 	call	_hide_sprites_range
    00000027 D1               [12]   94 	pop	de
                                     95 ;../../../include/gb/gb.h:1449: SCX_REG=x, SCY_REG=y;
    00000028 AF               [ 4]   96 	xor	a, a
    00000029 E0r00            [12]   97 	ldh	(_SCX_REG + 0), a
    0000002B AF               [ 4]   98 	xor	a, a
    0000002C E0r00            [12]   99 	ldh	(_SCY_REG + 0), a
                                    100 ;src/common.c:54: uint8_t titleRow = (DEVICE_SCREEN_HEIGHT-(height>>3))/2;
    0000002E 7B               [ 4]  101 	ld	a, e
    0000002F CB 37            [ 8]  102 	swap	a
    00000031 07               [ 4]  103 	rlca
    00000032 E6 1F            [ 8]  104 	and	a, #0x1f
    00000034 F8 01            [12]  105 	ldhl	sp,	#1
    00000036 77               [ 8]  106 	ld	(hl), a
    00000037 4E               [ 8]  107 	ld	c, (hl)
    00000038 06 00            [ 8]  108 	ld	b, #0x00
    0000003A 3E 12            [ 8]  109 	ld	a, #0x12
    0000003C 91               [ 4]  110 	sub	a, c
    0000003D 4F               [ 4]  111 	ld	c, a
    0000003E 9F               [ 4]  112 	sbc	a, a
    0000003F 90               [ 4]  113 	sub	a, b
    00000040 47               [ 4]  114 	ld	b, a
    00000041 F8 04            [12]  115 	ldhl	sp,	#4
    00000043 79               [ 4]  116 	ld	a, c
    00000044 22               [ 8]  117 	ld	(hl+), a
    00000045 70               [ 8]  118 	ld	(hl), b
    00000046 CB 78            [ 8]  119 	bit	7, b
    00000048 28 05            [12]  120 	jr	Z, 00108$
    0000004A 2B               [ 8]  121 	dec	hl
    0000004B 03               [ 8]  122 	inc	bc
    0000004C 79               [ 4]  123 	ld	a, c
    0000004D 22               [ 8]  124 	ld	(hl+), a
    0000004E 70               [ 8]  125 	ld	(hl), b
    0000004F                        126 00108$:
    0000004F F8 04            [12]  127 	ldhl	sp,#4
    00000051 2A               [ 8]  128 	ld	a, (hl+)
    00000052 4F               [ 4]  129 	ld	c, a
    00000053 46               [ 8]  130 	ld	b, (hl)
    00000054 CB 28            [ 8]  131 	sra	b
    00000056 CB 19            [ 8]  132 	rr	c
    00000058 F8 02            [12]  133 	ldhl	sp,	#2
    0000005A 71               [ 8]  134 	ld	(hl), c
                                    135 ;src/common.c:55: uint8_t titleColumn = (DEVICE_SCREEN_WIDTH-(width>>3))/2;
    0000005B F8 06            [12]  136 	ldhl	sp,	#6
    0000005D 7E               [ 8]  137 	ld	a, (hl)
    0000005E CB 37            [ 8]  138 	swap	a
    00000060 07               [ 4]  139 	rlca
    00000061 E6 1F            [ 8]  140 	and	a, #0x1f
    00000063 F8 03            [12]  141 	ldhl	sp,	#3
    00000065 77               [ 8]  142 	ld	(hl), a
    00000066 2A               [ 8]  143 	ld	a, (hl+)
    00000067 4F               [ 4]  144 	ld	c, a
    00000068 06 00            [ 8]  145 	ld	b, #0x00
    0000006A 3E 14            [ 8]  146 	ld	a, #0x14
    0000006C 91               [ 4]  147 	sub	a, c
    0000006D 4F               [ 4]  148 	ld	c, a
    0000006E 9F               [ 4]  149 	sbc	a, a
    0000006F 90               [ 4]  150 	sub	a, b
    00000070 47               [ 4]  151 	ld	b, a
    00000071 79               [ 4]  152 	ld	a, c
    00000072 22               [ 8]  153 	ld	(hl+), a
    00000073 70               [ 8]  154 	ld	(hl), b
    00000074 CB 78            [ 8]  155 	bit	7, b
    00000076 28 05            [12]  156 	jr	Z, 00109$
    00000078 2B               [ 8]  157 	dec	hl
    00000079 03               [ 8]  158 	inc	bc
    0000007A 79               [ 4]  159 	ld	a, c
    0000007B 22               [ 8]  160 	ld	(hl+), a
    0000007C 70               [ 8]  161 	ld	(hl), b
    0000007D                        162 00109$:
    0000007D F8 04            [12]  163 	ldhl	sp,	#4
    0000007F 2A               [ 8]  164 	ld	a, (hl+)
    00000080 47               [ 4]  165 	ld	b, a
    00000081 4E               [ 8]  166 	ld	c, (hl)
    00000082 CB 29            [ 8]  167 	sra	c
    00000084 CB 18            [ 8]  168 	rr	b
                                    169 ;src/common.c:57: SWITCH_ROM(bank);
    00000086 F8 09            [12]  170 	ldhl	sp,	#9
    00000088 7E               [ 8]  171 	ld	a, (hl)
    00000089 E0r00            [12]  172 	ldh	(__current_bank + 0), a
    0000008B EAr00r00         [16]  173 	ld	(#_rROMB0),a
                                    174 ;src/common.c:59: setBKGPalettes(1,palettes);
    0000008E C5               [16]  175 	push	bc
    0000008F F8 11            [12]  176 	ldhl	sp,	#17
    00000091 2A               [ 8]  177 	ld	a, (hl+)
    00000092 5F               [ 4]  178 	ld	e, a
    00000093 56               [ 8]  179 	ld	d, (hl)
    00000094 3E 01            [ 8]  180 	ld	a, #0x01
    00000096 CDr00r00         [24]  181 	call	_setBKGPalettes
    00000099 C1               [12]  182 	pop	bc
                                    183 ;src/common.c:61: set_native_tile_data(0,tileCount,tileData);
    0000009A F8 0A            [12]  184 	ldhl	sp,	#10
    0000009C 2A               [ 8]  185 	ld	a, (hl+)
    0000009D 5F               [ 4]  186 	ld	e, a
    0000009E 2A               [ 8]  187 	ld	a, (hl+)
    0000009F 57               [ 4]  188 	ld	d, a
    000000A0 7E               [ 8]  189 	ld	a, (hl)
                                    190 ;../../../include/gb/gb.h:2134: set_bkg_data(first_tile, nb_tiles, data);
    000000A1 D5               [16]  191 	push	de
    000000A2 67               [ 4]  192 	ld	h, a
    000000A3 2E 00            [ 8]  193 	ld	l, #0x00
    000000A5 E5               [16]  194 	push	hl
    000000A6 CDr00r00         [24]  195 	call	_set_bkg_data
    000000A9 E8 04            [16]  196 	add	sp, #4
                                    197 ;src/common.c:62: fill_bkg_rect(0,0,DEVICE_SCREEN_WIDTH,DEVICE_SCREEN_HEIGHT,0);
    000000AB AF               [ 4]  198 	xor	a, a
    000000AC 67               [ 4]  199 	ld	h, a
    000000AD 2E 12            [ 8]  200 	ld	l, #0x12
    000000AF E5               [16]  201 	push	hl
    000000B0 3E 14            [ 8]  202 	ld	a, #0x14
    000000B2 F5               [16]  203 	push	af
    000000B3 33               [ 8]  204 	inc	sp
    000000B4 AF               [ 4]  205 	xor	a, a
    000000B5 0F               [ 4]  206 	rrca
    000000B6 F5               [16]  207 	push	af
    000000B7 CDr00r00         [24]  208 	call	_fill_bkg_rect
    000000BA E8 05            [16]  209 	add	sp, #5
                                    210 ;src/common.c:63: set_bkg_tiles(titleColumn,titleRow,width>>3,height>>3,mapData);
    000000BC F8 0D            [12]  211 	ldhl	sp,	#13
    000000BE 2A               [ 8]  212 	ld	a, (hl+)
    000000BF 5F               [ 4]  213 	ld	e, a
    000000C0 56               [ 8]  214 	ld	d, (hl)
    000000C1 D5               [16]  215 	push	de
    000000C2 F8 03            [12]  216 	ldhl	sp,	#3
    000000C4 2A               [ 8]  217 	ld	a, (hl+)
    000000C5 23               [ 8]  218 	inc	hl
    000000C6 F5               [16]  219 	push	af
    000000C7 33               [ 8]  220 	inc	sp
    000000C8 3A               [ 8]  221 	ld	a, (hl-)
    000000C9 57               [ 4]  222 	ld	d, a
    000000CA 5E               [ 8]  223 	ld	e, (hl)
    000000CB D5               [16]  224 	push	de
    000000CC C5               [16]  225 	push	bc
    000000CD 33               [ 8]  226 	inc	sp
    000000CE CDr00r00         [24]  227 	call	_set_bkg_tiles
    000000D1 E8 06            [16]  228 	add	sp, #6
                                    229 ;src/common.c:64: SWITCH_ROM(_previous_bank);
    000000D3 F8 00            [12]  230 	ldhl	sp,	#0
    000000D5 7E               [ 8]  231 	ld	a, (hl)
    000000D6 E0r00            [12]  232 	ldh	(__current_bank + 0), a
    000000D8 7E               [ 8]  233 	ld	a, (hl)
    000000D9 EAr00r00         [16]  234 	ld	(#_rROMB0),a
                                    235 ;src/common.c:66: DISPLAY_ON;
    000000DC F0r00            [12]  236 	ldh	a, (_LCDC_REG + 0)
    000000DE F6 80            [ 8]  237 	or	a, #0x80
    000000E0 E0r00            [12]  238 	ldh	(_LCDC_REG + 0), a
                                    239 ;src/common.c:67: }
    000000E2 E8 07            [16]  240 	add	sp, #7
    000000E4 E1               [12]  241 	pop	hl
    000000E5 E8 08            [16]  242 	add	sp, #8
    000000E7 E9               [ 4]  243 	jp	(hl)
                                    244 	.area _HOME
                                    245 ;--------------------------------------------------------
                                    246 ; code
                                    247 ;--------------------------------------------------------
                                    248 	.area _CODE
                                    249 ;src/common.c:9: void WaitForStartOrA(void){
                                    250 ;	---------------------------------
                                    251 ; Function WaitForStartOrA
                                    252 ; ---------------------------------
    00000000                        253 _WaitForStartOrA::
                                    254 ;src/common.c:10: while(1){
    00000000                        255 00108$:
                                    256 ;src/common.c:13: joypadPrevious = joypadCurrent;
    00000000 FAr00r00         [16]  257 	ld	a, (#_joypadCurrent)
    00000003 EAr01r00         [16]  258 	ld	(#_joypadPrevious),a
                                    259 ;src/common.c:14: joypadCurrent = joypad();
    00000006 CDr00r00         [24]  260 	call	_joypad
                                    261 ;src/common.c:16: if((joypadCurrent & J_START) && !(joypadPrevious & J_START))break;
    00000009 EAr00r00         [16]  262 	ld	(#_joypadCurrent),a
    0000000C 21r01r00         [12]  263 	ld	hl, #_joypadPrevious
    0000000F 4E               [ 8]  264 	ld	c, (hl)
    00000010 CB 7F            [ 8]  265 	bit	7, a
    00000012 28 03            [12]  266 	jr	Z, 00102$
    00000014 CB 79            [ 8]  267 	bit	7, c
    00000016 C8               [20]  268 	ret	Z
    00000017                        269 00102$:
                                    270 ;src/common.c:17: if((joypadCurrent & J_A) && !(joypadPrevious & J_A))break;
    00000017 CB 67            [ 8]  271 	bit	4, a
    00000019 28 03            [12]  272 	jr	Z, 00105$
    0000001B CB 61            [ 8]  273 	bit	4, c
    0000001D C8               [20]  274 	ret	Z
    0000001E                        275 00105$:
                                    276 ;src/common.c:19: vsync();
    0000001E CDr00r00         [24]  277 	call	_vsync
                                    278 ;src/common.c:22: }
    00000021 18 DD            [12]  279 	jr	00108$
                                    280 	.area _CODE
                                    281 	.area _INITIALIZER
    00000000                        282 __xinit__joypadCurrent:
    00000000 00                     283 	.db #0x00	; 0
    00000001                        284 __xinit__joypadPrevious:
    00000001 00                     285 	.db #0x00	; 0
                                    286 	.area _CABS (ABS)
