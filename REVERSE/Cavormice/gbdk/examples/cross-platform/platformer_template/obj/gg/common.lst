                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module common
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _hide_sprites_range
                                     12 	.globl _fill_rect_compat
                                     13 	.globl _set_tile_map_compat
                                     14 	.globl _set_native_tile_data
                                     15 	.globl _set_palette
                                     16 	.globl _joypad
                                     17 	.globl _vsync
                                     18 	.globl _joypadPrevious
                                     19 	.globl _joypadCurrent
                                     20 	.globl _WaitForStartOrA
                                     21 	.globl _setBKGPalettes
                                     22 	.globl _ShowCentered
                                     23 ;--------------------------------------------------------
                                     24 ; special function registers
                                     25 ;--------------------------------------------------------
                         00000000    26 _GG_STATE	=	0x0000
                         00000001    27 _GG_EXT_7BIT	=	0x0001
                         00000002    28 _GG_EXT_CTL	=	0x0002
                         00000003    29 _GG_SIO_SEND	=	0x0003
                         00000004    30 _GG_SIO_RECV	=	0x0004
                         00000005    31 _GG_SIO_CTL	=	0x0005
                         00000006    32 _GG_SOUND_PAN	=	0x0006
                         0000003E    33 _MEMORY_CTL	=	0x003e
                         0000003F    34 _JOY_CTL	=	0x003f
                         0000007E    35 _VCOUNTER	=	0x007e
                         0000007F    36 _PSG	=	0x007f
                         0000007F    37 _HCOUNTER	=	0x007f
                         000000BE    38 _VDP_DATA	=	0x00be
                         000000BF    39 _VDP_CMD	=	0x00bf
                         000000BF    40 _VDP_STATUS	=	0x00bf
                         000000DC    41 _JOY_PORT1	=	0x00dc
                         000000DD    42 _JOY_PORT2	=	0x00dd
                         000000F0    43 _FMADDRESS	=	0x00f0
                         000000F1    44 _FMDATA	=	0x00f1
                         000000F2    45 _AUDIOCTRL	=	0x00f2
                                     46 ;--------------------------------------------------------
                                     47 ; ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area _DATA
                         0000FFFC    50 _RAM_CONTROL	=	0xfffc
                         0000FFF8    51 _GLASSES_3D	=	0xfff8
                         0000FFFD    52 _MAP_FRAME0	=	0xfffd
                         0000FFFE    53 _MAP_FRAME1	=	0xfffe
                         0000FFFF    54 _MAP_FRAME2	=	0xffff
                                     55 ;--------------------------------------------------------
                                     56 ; ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area _INITIALIZED
    00000000                         59 _joypadCurrent::
    00000000                         60 	.ds 1
    00000001                         61 _joypadPrevious::
    00000001                         62 	.ds 1
                                     63 ;--------------------------------------------------------
                                     64 ; absolute external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area _DABS (ABS)
                                     67 ;--------------------------------------------------------
                                     68 ; global & static initialisations
                                     69 ;--------------------------------------------------------
                                     70 	.area _HOME
                                     71 	.area _GSINIT
                                     72 	.area _GSFINAL
                                     73 	.area _GSINIT
                                     74 ;--------------------------------------------------------
                                     75 ; Home
                                     76 ;--------------------------------------------------------
                                     77 	.area _HOME
                                     78 ;src/common.c:24: void setBKGPalettes(uint8_t count, const palette_color_t *palettes) NONBANKED{
                                     79 ;	---------------------------------
                                     80 ; Function setBKGPalettes
                                     81 ; ---------------------------------
    00000000                         82 _setBKGPalettes::
                                     83 ;src/common.c:29: set_bkg_palette(0, count, palettes);
    00000000 D5               [11]   84 	push	de
    00000001 67               [ 4]   85 	ld	h, a
    00000002 2E 00            [ 7]   86 	ld	l, #0x00
    00000004 E5               [11]   87 	push	hl
    00000005 CDr00r00         [17]   88 	call	_set_palette
                                     89 ;src/common.c:37: }
    00000008 C9               [10]   90 	ret
                                     91 ;src/common.c:40: void ShowCentered(uint8_t width,uint8_t height,uint8_t bank, uint8_t* tileData, uint8_t tileCount, uint8_t* mapData, const palette_color_t* palettes) NONBANKED{
                                     92 ;	---------------------------------
                                     93 ; Function ShowCentered
                                     94 ; ---------------------------------
    00000009                         95 _ShowCentered::
    00000009 DD E5            [15]   96 	push	ix
    0000000B DD 21 00 00      [14]   97 	ld	ix,#0
    0000000F DD 39            [15]   98 	add	ix,sp
    00000011 F5               [11]   99 	push	af
    00000012 F5               [11]  100 	push	af
    00000013 F5               [11]  101 	push	af
    00000014 DD 77 FF         [19]  102 	ld	-1 (ix), a
                                    103 ;../../../include/sms/sms.h:254: __WRITE_VDP_REG(VDP_R1, __READ_VDP_REG(VDP_R1) &= (~R1_DISP_ON));
    00000017 3Ar00r00         [13]  104 	ld	a, (_shadow_VDP_R1+0)
    0000001A E6 BF            [ 7]  105 	and	a, #0xbf
    0000001C 32r00r00         [13]  106 	ld	(_shadow_VDP_R1+0), a
    0000001F F3               [ 4]  107 	di
    00000020 3Ar00r00         [13]  108 	ld	a, (_shadow_VDP_R1+0)
    00000023 D3 BF            [11]  109 	out	(_VDP_CMD), a
    00000025 3E 81            [ 7]  110 	ld	a, #0x81
    00000027 D3 BF            [11]  111 	out	(_VDP_CMD), a
    00000029 FB               [ 4]  112 	ei
                                    113 ;src/common.c:45: uint8_t _previous_bank = CURRENT_BANK;
    0000002A 3A FE FF         [13]  114 	ld	a, (_MAP_FRAME1+0)
    0000002D DD 77 FA         [19]  115 	ld	-6 (ix), a
                                    116 ;src/common.c:49: hide_sprites_range(0,MAX_HARDWARE_SPRITES);
    00000030 E5               [11]  117 	push	hl
    00000031 2E 40            [ 7]  118 	ld	l, #0x40
                                    119 ;	spillPairReg hl
                                    120 ;	spillPairReg hl
    00000033 AF               [ 4]  121 	xor	a, a
    00000034 CDr00r00         [17]  122 	call	_hide_sprites_range
    00000037 E1               [10]  123 	pop	hl
                                    124 ;../../../include/sms/sms.h:223: __WRITE_VDP_REG(VDP_RSCX, -x);
    00000038 FD 21r00r00      [14]  125 	ld	iy, #_shadow_VDP_RSCX
    0000003C FD 36 00 00      [19]  126 	ld	0 (iy), #0x00
    00000040 F3               [ 4]  127 	di
    00000041 3E 00            [ 7]  128 	ld	a, #0x00
    00000043 D3 BF            [11]  129 	out	(_VDP_CMD), a
    00000045 3E 88            [ 7]  130 	ld	a, #0x88
    00000047 D3 BF            [11]  131 	out	(_VDP_CMD), a
    00000049 FB               [ 4]  132 	ei
                                    133 ;../../../include/sms/sms.h:224: __WRITE_VDP_REG(VDP_RSCY, y);
    0000004A FD 21r00r00      [14]  134 	ld	iy, #_shadow_VDP_RSCY
    0000004E FD 36 00 00      [19]  135 	ld	0 (iy), #0x00
    00000052 F3               [ 4]  136 	di
    00000053 3E 00            [ 7]  137 	ld	a, #0x00
    00000055 D3 BF            [11]  138 	out	(_VDP_CMD), a
    00000057 3E 89            [ 7]  139 	ld	a, #0x89
    00000059 D3 BF            [11]  140 	out	(_VDP_CMD), a
    0000005B FB               [ 4]  141 	ei
                                    142 ;src/common.c:54: uint8_t titleRow = (DEVICE_SCREEN_HEIGHT-(height>>3))/2;
    0000005C 7D               [ 4]  143 	ld	a, l
    0000005D 0F               [ 4]  144 	rrca
    0000005E 0F               [ 4]  145 	rrca
    0000005F 0F               [ 4]  146 	rrca
    00000060 E6 1F            [ 7]  147 	and	a, #0x1f
    00000062 DD 77 FB         [19]  148 	ld	-5 (ix), a
    00000065 6F               [ 4]  149 	ld	l, a
                                    150 ;	spillPairReg hl
                                    151 ;	spillPairReg hl
    00000066 26 00            [ 7]  152 	ld	h, #0x00
                                    153 ;	spillPairReg hl
                                    154 ;	spillPairReg hl
    00000068 3E 12            [ 7]  155 	ld	a, #0x12
    0000006A 95               [ 4]  156 	sub	a, l
    0000006B 5F               [ 4]  157 	ld	e, a
    0000006C 9F               [ 4]  158 	sbc	a, a
    0000006D 94               [ 4]  159 	sub	a, h
    0000006E 57               [ 4]  160 	ld	d, a
    0000006F 4B               [ 4]  161 	ld	c, e
    00000070 42               [ 4]  162 	ld	b, d
    00000071 CB 7A            [ 8]  163 	bit	7, d
    00000073 28 03            [12]  164 	jr	Z, 00105$
    00000075 4B               [ 4]  165 	ld	c, e
    00000076 42               [ 4]  166 	ld	b, d
    00000077 03               [ 6]  167 	inc	bc
    00000078                        168 00105$:
    00000078 CB 28            [ 8]  169 	sra	b
    0000007A CB 19            [ 8]  170 	rr	c
    0000007C DD 71 FC         [19]  171 	ld	-4 (ix), c
                                    172 ;src/common.c:55: uint8_t titleColumn = (DEVICE_SCREEN_WIDTH-(width>>3))/2;
    0000007F DD 7E FF         [19]  173 	ld	a, -1 (ix)
    00000082 0F               [ 4]  174 	rrca
    00000083 0F               [ 4]  175 	rrca
    00000084 0F               [ 4]  176 	rrca
    00000085 E6 1F            [ 7]  177 	and	a, #0x1f
    00000087 DD 77 FD         [19]  178 	ld	-3 (ix), a
    0000008A 6F               [ 4]  179 	ld	l, a
                                    180 ;	spillPairReg hl
                                    181 ;	spillPairReg hl
    0000008B 26 00            [ 7]  182 	ld	h, #0x00
                                    183 ;	spillPairReg hl
                                    184 ;	spillPairReg hl
    0000008D 3E 14            [ 7]  185 	ld	a, #0x14
    0000008F 95               [ 4]  186 	sub	a, l
    00000090 5F               [ 4]  187 	ld	e, a
    00000091 9F               [ 4]  188 	sbc	a, a
    00000092 94               [ 4]  189 	sub	a, h
    00000093 57               [ 4]  190 	ld	d, a
    00000094 4B               [ 4]  191 	ld	c, e
    00000095 42               [ 4]  192 	ld	b, d
    00000096 CB 7A            [ 8]  193 	bit	7, d
    00000098 28 03            [12]  194 	jr	Z, 00106$
    0000009A 4B               [ 4]  195 	ld	c, e
    0000009B 42               [ 4]  196 	ld	b, d
    0000009C 03               [ 6]  197 	inc	bc
    0000009D                        198 00106$:
    0000009D CB 28            [ 8]  199 	sra	b
    0000009F CB 19            [ 8]  200 	rr	c
    000000A1 DD 71 FE         [19]  201 	ld	-2 (ix), c
                                    202 ;src/common.c:57: SWITCH_ROM(bank);
    000000A4 DD 7E 04         [19]  203 	ld	a, 4 (ix)
    000000A7 32 FE FF         [13]  204 	ld	(_MAP_FRAME1+0), a
                                    205 ;src/common.c:59: setBKGPalettes(1,palettes);
    000000AA DD 5E 0A         [19]  206 	ld	e, 10 (ix)
    000000AD DD 56 0B         [19]  207 	ld	d, 11 (ix)
    000000B0 3E 01            [ 7]  208 	ld	a, #0x01
    000000B2 CDr00r00         [17]  209 	call	_setBKGPalettes
                                    210 ;src/common.c:61: set_native_tile_data(0,tileCount,tileData);
    000000B5 DD 4E 05         [19]  211 	ld	c, 5 (ix)
    000000B8 DD 46 06         [19]  212 	ld	b, 6 (ix)
    000000BB DD 5E 07         [19]  213 	ld	e, 7 (ix)
    000000BE 16 00            [ 7]  214 	ld	d, #0x00
    000000C0 C5               [11]  215 	push	bc
    000000C1 21 00 00         [10]  216 	ld	hl, #0x0000
    000000C4 CDr00r00         [17]  217 	call	_set_native_tile_data
                                    218 ;src/common.c:62: fill_bkg_rect(0,0,DEVICE_SCREEN_WIDTH,DEVICE_SCREEN_HEIGHT,0);
    000000C7 21 00 00         [10]  219 	ld	hl, #0x0000
    000000CA E5               [11]  220 	push	hl
    000000CB 21 14 12         [10]  221 	ld	hl, #0x1214
    000000CE E5               [11]  222 	push	hl
    000000CF 21 00 00         [10]  223 	ld	hl, #0x00
    000000D2 E5               [11]  224 	push	hl
    000000D3 CDr00r00         [17]  225 	call	_fill_rect_compat
                                    226 ;src/common.c:63: set_bkg_tiles(titleColumn,titleRow,width>>3,height>>3,mapData);
    000000D6 DD 6E 08         [19]  227 	ld	l, 8 (ix)
                                    228 ;	spillPairReg hl
                                    229 ;	spillPairReg hl
    000000D9 DD 66 09         [19]  230 	ld	h, 9 (ix)
                                    231 ;	spillPairReg hl
                                    232 ;	spillPairReg hl
    000000DC E5               [11]  233 	push	hl
    000000DD DD 66 FB         [19]  234 	ld	h, -5 (ix)
    000000E0 DD 6E FD         [19]  235 	ld	l, -3 (ix)
    000000E3 E5               [11]  236 	push	hl
    000000E4 DD 66 FC         [19]  237 	ld	h, -4 (ix)
    000000E7 DD 6E FE         [19]  238 	ld	l, -2 (ix)
    000000EA E5               [11]  239 	push	hl
    000000EB CDr00r00         [17]  240 	call	_set_tile_map_compat
                                    241 ;src/common.c:64: SWITCH_ROM(_previous_bank);
    000000EE DD 7E FA         [19]  242 	ld	a, -6 (ix)
    000000F1 32 FE FF         [13]  243 	ld	(_MAP_FRAME1+0), a
                                    244 ;src/common.c:66: DISPLAY_ON;
    000000F4 3Ar00r00         [13]  245 	ld	a, (_shadow_VDP_R1+0)
    000000F7 F6 40            [ 7]  246 	or	a, #0x40
    000000F9 32r00r00         [13]  247 	ld	(_shadow_VDP_R1+0), a
    000000FC F3               [ 4]  248 	di
    000000FD 3Ar00r00         [13]  249 	ld	a, (_shadow_VDP_R1+0)
    00000100 D3 BF            [11]  250 	out	(_VDP_CMD), a
    00000102 3E 81            [ 7]  251 	ld	a, #0x81
    00000104 D3 BF            [11]  252 	out	(_VDP_CMD), a
    00000106 FB               [ 4]  253 	ei
                                    254 ;src/common.c:67: }
    00000107 DD F9            [10]  255 	ld	sp, ix
    00000109 DD E1            [14]  256 	pop	ix
    0000010B E1               [10]  257 	pop	hl
    0000010C F1               [10]  258 	pop	af
    0000010D F1               [10]  259 	pop	af
    0000010E F1               [10]  260 	pop	af
    0000010F F1               [10]  261 	pop	af
    00000110 E9               [ 4]  262 	jp	(hl)
                                    263 	.area _HOME
                                    264 ;--------------------------------------------------------
                                    265 ; code
                                    266 ;--------------------------------------------------------
                                    267 	.area _CODE
                                    268 ;src/common.c:9: void WaitForStartOrA(void){
                                    269 ;	---------------------------------
                                    270 ; Function WaitForStartOrA
                                    271 ; ---------------------------------
    00000000                        272 _WaitForStartOrA::
                                    273 ;src/common.c:10: while(1){
    00000000                        274 00108$:
                                    275 ;src/common.c:13: joypadPrevious = joypadCurrent;
    00000000 3Ar00r00         [13]  276 	ld	a, (_joypadCurrent+0)
    00000003 32r01r00         [13]  277 	ld	(_joypadPrevious+0), a
                                    278 ;src/common.c:14: joypadCurrent = joypad();
    00000006 CDr00r00         [17]  279 	call	_joypad
    00000009 7D               [ 4]  280 	ld	a, l
                                    281 ;src/common.c:16: if((joypadCurrent & J_START) && !(joypadPrevious & J_START))break;
    0000000A 32r00r00         [13]  282 	ld	(_joypadCurrent+0), a
    0000000D 4F               [ 4]  283 	ld	c, a
    0000000E 3Ar01r00         [13]  284 	ld	a, (_joypadPrevious+0)
    00000011 CB 71            [ 8]  285 	bit	6, c
    00000013 28 03            [12]  286 	jr	Z, 00102$
    00000015 CB 77            [ 8]  287 	bit	6, a
    00000017 C8               [11]  288 	ret	Z
    00000018                        289 00102$:
                                    290 ;src/common.c:17: if((joypadCurrent & J_A) && !(joypadPrevious & J_A))break;
    00000018 CB 69            [ 8]  291 	bit	5, c
    0000001A 28 03            [12]  292 	jr	Z, 00105$
    0000001C CB 6F            [ 8]  293 	bit	5, a
    0000001E C8               [11]  294 	ret	Z
    0000001F                        295 00105$:
                                    296 ;src/common.c:19: vsync();
    0000001F CDr00r00         [17]  297 	call	_vsync
                                    298 ;src/common.c:22: }
    00000022 18 DC            [12]  299 	jr	00108$
                                    300 	.area _CODE
                                    301 	.area _INITIALIZER
    00000000                        302 __xinit__joypadCurrent:
    00000000 00                     303 	.db #0x00	; 0
    00000001                        304 __xinit__joypadPrevious:
    00000001 00                     305 	.db #0x00	; 0
                                    306 	.area _CABS (ABS)
