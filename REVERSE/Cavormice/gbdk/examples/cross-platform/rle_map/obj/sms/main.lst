                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl b___func_map_compressed
                                     13 	.globl ___func_map_compressed
                                     14 	.globl b___func_map_tiles
                                     15 	.globl ___func_map_tiles
                                     16 	.globl _rle_decompress
                                     17 	.globl _rle_init
                                     18 	.globl _set_tile_map_compat
                                     19 	.globl _set_tile_2bpp_data
                                     20 	.globl _vsync
                                     21 	.globl _datapos
                                     22 	.globl _scrollpos
                                     23 	.globl _data
                                     24 ;--------------------------------------------------------
                                     25 ; special function registers
                                     26 ;--------------------------------------------------------
                         00000000    27 _GG_STATE	=	0x0000
                         00000001    28 _GG_EXT_7BIT	=	0x0001
                         00000002    29 _GG_EXT_CTL	=	0x0002
                         00000003    30 _GG_SIO_SEND	=	0x0003
                         00000004    31 _GG_SIO_RECV	=	0x0004
                         00000005    32 _GG_SIO_CTL	=	0x0005
                         00000006    33 _GG_SOUND_PAN	=	0x0006
                         0000003E    34 _MEMORY_CTL	=	0x003e
                         0000003F    35 _JOY_CTL	=	0x003f
                         0000007E    36 _VCOUNTER	=	0x007e
                         0000007F    37 _PSG	=	0x007f
                         0000007F    38 _HCOUNTER	=	0x007f
                         000000BE    39 _VDP_DATA	=	0x00be
                         000000BF    40 _VDP_CMD	=	0x00bf
                         000000BF    41 _VDP_STATUS	=	0x00bf
                         000000DC    42 _JOY_PORT1	=	0x00dc
                         000000DD    43 _JOY_PORT2	=	0x00dd
                         000000F0    44 _FMADDRESS	=	0x00f0
                         000000F1    45 _FMDATA	=	0x00f1
                         000000F2    46 _AUDIOCTRL	=	0x00f2
                                     47 ;--------------------------------------------------------
                                     48 ; ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area _DATA
                         0000FFFC    51 _RAM_CONTROL	=	0xfffc
                         0000FFF8    52 _GLASSES_3D	=	0xfff8
                         0000FFFD    53 _MAP_FRAME0	=	0xfffd
                         0000FFFE    54 _MAP_FRAME1	=	0xfffe
                         0000FFFF    55 _MAP_FRAME2	=	0xffff
    00000000                         56 _data::
    00000000                         57 	.ds 18
                                     58 ;--------------------------------------------------------
                                     59 ; ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area _INITIALIZED
    00000000                         62 _scrollpos::
    00000000                         63 	.ds 1
    00000001                         64 _datapos::
    00000001                         65 	.ds 1
                                     66 ;--------------------------------------------------------
                                     67 ; absolute external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area _DABS (ABS)
                                     70 ;--------------------------------------------------------
                                     71 ; global & static initialisations
                                     72 ;--------------------------------------------------------
                                     73 	.area _HOME
                                     74 	.area _GSINIT
                                     75 	.area _GSFINAL
                                     76 	.area _GSINIT
                                     77 ;--------------------------------------------------------
                                     78 ; Home
                                     79 ;--------------------------------------------------------
                                     80 	.area _HOME
                                     81 	.area _HOME
                                     82 ;--------------------------------------------------------
                                     83 ; code
                                     84 ;--------------------------------------------------------
                                     85 	.area _CODE
                                     86 ;src/main.c:8: INCBIN(map_tiles, "res/map_tiles.bin")
                                     87 ;	---------------------------------
                                     88 ; Function __func_map_tiles
                                     89 ; ---------------------------------
                         00000000    90 	b___func_map_tiles	= 0
    00000000                         91 ___func_map_tiles::
    00000000                         92 _map_tiles::
    00000000                         93 1$:
    00000000 FF 00 FF 00 FF 00 FF    94 	.incbin "res/map_tiles.bin" 
             00 FF 00 FF 00 DF 20
             FF 00 FF 00 FF 00 FF
             00 FF 00 3F C0 BF 00
             FF 00 FF 00 FF 00 FF
             00 FF 00 FF 00 FF 00
             FF 00 FF 00 FF 00 FF
             00 EF 10 F8 00 F0 00
             F0 00 E1 00 C5 22 F3
             0C FD 03 F8 07 78 07
             5A 25 BC 43 7C 83 FC
             03 E0 07 FF FF FF FF
             FF FF FF FF FF FF FF
             FF FF FF FF FF FF FF
             FF FF FF FF FF FF FF
             FF FF FF DF FF FF FF
             FF FF FF FF FF FF FF
             FF 3F FF BF FF FF FF
             FF FF
    00000780                         95 2$:
                         00000780    96 	___size_map_tiles = (2$-1$) 
                                     97 	.globl ___size_map_tiles 
                                     98 	.local b___func_map_tiles 
                         00000000    99 	___bank_map_tiles = b___func_map_tiles 
                                    100 	.globl ___bank_map_tiles 
                                    101 ;src/main.c:15: INCBIN(map_compressed, "res/map.bin.rle")
                                    102 ;	---------------------------------
                                    103 ; Function __func_map_compressed
                                    104 ; ---------------------------------
                         00000000   105 	b___func_map_compressed	= 0
    00000780                        106 ___func_map_compressed::
    00000780                        107 _map_compressed::
    00000780                        108 1$:
    00000780 08 00 0D 03 0F 02 02   109 	.incbin "res/map.bin.rle" 
             26 38 FC 05 0E 06 11
             05 05 1E 0D 01 0E 0C
             23 02 02 0B 16 FC 05
             78 07 12 05 05 1F 0E
             02 02 00 0D 26 2A 00
             19 08 13 06 11 4A 5D
             62 41 35 42 02 02 01
             0E 0B 2B 01 1A 09 14
             07 12 1F 0E 0C 1C 37
             23 03 0F 00 0D 02 02
             00 39 06 11 05 05 1E
             02 26 38 1E 02 04 10
             1D 0E 02 02 01 3A 07
             12 05 05 20 24 63 6A
             1F 02 05 05 1E 02 00
             0D 02 3B 06 11 4A 53
             4A 5E 64 02 03 0F 05
             05 1F
    00000E45                        110 2$:
                         000006C5   111 	___size_map_compressed = (2$-1$) 
                                    112 	.globl ___size_map_compressed 
                                    113 	.local b___func_map_compressed 
                         00000000   114 	___bank_map_compressed = b___func_map_compressed 
                                    115 	.globl ___bank_map_compressed 
                                    116 ;src/main.c:22: void main(void) {
                                    117 ;	---------------------------------
                                    118 ; Function main
                                    119 ; ---------------------------------
    00000E45                        120 _main::
    00000E45 DD E5            [15]  121 	push	ix
    00000E47 DD 21 00 00      [14]  122 	ld	ix,#0
    00000E4B DD 39            [15]  123 	add	ix,sp
    00000E4D 3B               [ 6]  124 	dec	sp
                                    125 ;src/main.c:28: HIDE_LEFT_COLUMN;
    00000E4E 3Ar00r00         [13]  126 	ld	a, (_shadow_VDP_R0+0)
    00000E51 F6 20            [ 7]  127 	or	a, #0x20
    00000E53 32r00r00         [13]  128 	ld	(_shadow_VDP_R0+0), a
    00000E56 F3               [ 4]  129 	di
    00000E57 3Ar00r00         [13]  130 	ld	a, (_shadow_VDP_R0+0)
    00000E5A D3 BF            [11]  131 	out	(_VDP_CMD), a
    00000E5C 3E 80            [ 7]  132 	ld	a, #0x80
    00000E5E D3 BF            [11]  133 	out	(_VDP_CMD), a
    00000E60 FB               [ 4]  134 	ei
                                    135 ;src/main.c:33: set_bkg_data(0, INCBIN_SIZE(map_tiles) >> 4, map_tiles);
    00000E61 11r00r00         [10]  136 	ld	de, #_map_tiles+0
    00000E64 01r00r00         [10]  137 	ld	bc, #___size_map_tiles+0
    00000E67 CB 38            [ 8]  138 	srl	b
    00000E69 CB 19            [ 8]  139 	rr	c
    00000E6B CB 38            [ 8]  140 	srl	b
    00000E6D CB 19            [ 8]  141 	rr	c
    00000E6F CB 38            [ 8]  142 	srl	b
    00000E71 CB 19            [ 8]  143 	rr	c
    00000E73 CB 38            [ 8]  144 	srl	b
    00000E75 CB 19            [ 8]  145 	rr	c
                                    146 ;../../../include/sms/sms.h:633: set_tile_2bpp_data(start, ntiles, src, _current_2bpp_palette);
    00000E77 2Ar00r00         [16]  147 	ld	hl, (__current_2bpp_palette)
    00000E7A E5               [11]  148 	push	hl
    00000E7B D5               [11]  149 	push	de
    00000E7C C5               [11]  150 	push	bc
    00000E7D 21 00 00         [10]  151 	ld	hl, #0x0000
    00000E80 E5               [11]  152 	push	hl
    00000E81 CDr00r00         [17]  153 	call	_set_tile_2bpp_data
                                    154 ;src/main.c:36: rle_init(map_compressed);
    00000E84 21r80r07         [10]  155 	ld	hl, #_map_compressed
    00000E87 CDr00r00         [17]  156 	call	_rle_init
                                    157 ;src/main.c:41: for (uint8_t i = 0; (i != DEVICE_SCREEN_WIDTH + 1); i++) {
    00000E8A DD 36 FF 00      [19]  158 	ld	-1 (ix), #0x00
    00000E8E                        159 00114$:
    00000E8E DD 7E FF         [19]  160 	ld	a, -1 (ix)
    00000E91 D6 21            [ 7]  161 	sub	a, #0x21
    00000E93 28 2A            [12]  162 	jr	Z, 00103$
                                    163 ;src/main.c:42: rle_decompress(data, MAP_DATA_HEIGHT);
    00000E95 3E 12            [ 7]  164 	ld	a, #0x12
    00000E97 F5               [11]  165 	push	af
    00000E98 33               [ 6]  166 	inc	sp
    00000E99 21r00r00         [10]  167 	ld	hl, #_data
    00000E9C E5               [11]  168 	push	hl
    00000E9D CDr00r00         [17]  169 	call	_rle_decompress
                                    170 ;src/main.c:47: set_bkg_tiles(i & (DEVICE_SCREEN_BUFFER_WIDTH-1), 0, 1, MAP_DATA_HEIGHT, data);
    00000EA0 01r00r00         [10]  171 	ld	bc, #_data
    00000EA3 DD 7E FF         [19]  172 	ld	a, -1 (ix)
    00000EA6 E6 1F            [ 7]  173 	and	a, #0x1f
    00000EA8 C5               [11]  174 	push	bc
    00000EA9 26 12            [ 7]  175 	ld	h, #0x12
                                    176 ;	spillPairReg hl
                                    177 ;	spillPairReg hl
    00000EAB E5               [11]  178 	push	hl
    00000EAC 33               [ 6]  179 	inc	sp
    00000EAD 26 01            [ 7]  180 	ld	h, #0x01
                                    181 ;	spillPairReg hl
                                    182 ;	spillPairReg hl
    00000EAF E5               [11]  183 	push	hl
    00000EB0 33               [ 6]  184 	inc	sp
    00000EB1 26 00            [ 7]  185 	ld	h, #0x00
                                    186 ;	spillPairReg hl
                                    187 ;	spillPairReg hl
    00000EB3 E5               [11]  188 	push	hl
    00000EB4 33               [ 6]  189 	inc	sp
    00000EB5 F5               [11]  190 	push	af
    00000EB6 33               [ 6]  191 	inc	sp
    00000EB7 CDr00r00         [17]  192 	call	_set_tile_map_compat
                                    193 ;src/main.c:41: for (uint8_t i = 0; (i != DEVICE_SCREEN_WIDTH + 1); i++) {
    00000EBA DD 34 FF         [23]  194 	inc	-1 (ix)
    00000EBD 18 CF            [12]  195 	jr	00114$
    00000EBF                        196 00103$:
                                    197 ;src/main.c:51: datapos = 0;
    00000EBF 21r01r00         [10]  198 	ld	hl, #_datapos
    00000EC2 36 00            [10]  199 	ld	(hl), #0x00
                                    200 ;src/main.c:52: scrollpos = 1;
    00000EC4 21r00r00         [10]  201 	ld	hl, #_scrollpos
    00000EC7 36 01            [10]  202 	ld	(hl), #0x01
                                    203 ;src/main.c:53: while(TRUE) {
    00000EC9                        204 00109$:
                                    205 ;src/main.c:55: vsync();
    00000EC9 CDr00r00         [17]  206 	call	_vsync
                                    207 ;src/main.c:60: scrollpos++;
    00000ECC FD 21r00r00      [14]  208 	ld	iy, #_scrollpos
    00000ED0 FD 34 00         [23]  209 	inc	0 (iy)
                                    210 ;src/main.c:61: move_bkg(scrollpos, 0);
    00000ED3 3Ar00r00         [13]  211 	ld	a, (_scrollpos+0)
                                    212 ;../../../include/sms/sms.h:223: __WRITE_VDP_REG(VDP_RSCX, -x);
    00000ED6 21r00r00         [10]  213 	ld	hl, #_shadow_VDP_RSCX
    00000ED9 ED 44            [ 8]  214 	neg
    00000EDB 77               [ 7]  215 	ld	(hl), a
    00000EDC F3               [ 4]  216 	di
    00000EDD 3Ar00r00         [13]  217 	ld	a, (_shadow_VDP_RSCX+0)
    00000EE0 D3 BF            [11]  218 	out	(_VDP_CMD), a
    00000EE2 3E 88            [ 7]  219 	ld	a, #0x88
    00000EE4 D3 BF            [11]  220 	out	(_VDP_CMD), a
    00000EE6 FB               [ 4]  221 	ei
                                    222 ;../../../include/sms/sms.h:224: __WRITE_VDP_REG(VDP_RSCY, y);
    00000EE7 FD 21r00r00      [14]  223 	ld	iy, #_shadow_VDP_RSCY
    00000EEB FD 36 00 00      [19]  224 	ld	0 (iy), #0x00
    00000EEF F3               [ 4]  225 	di
    00000EF0 3E 00            [ 7]  226 	ld	a, #0x00
    00000EF2 D3 BF            [11]  227 	out	(_VDP_CMD), a
    00000EF4 3E 89            [ 7]  228 	ld	a, #0x89
    00000EF6 D3 BF            [11]  229 	out	(_VDP_CMD), a
    00000EF8 FB               [ 4]  230 	ei
                                    231 ;src/main.c:65: if ((scrollpos & 0x07u) == 0) {
    00000EF9 3Ar00r00         [13]  232 	ld	a, (_scrollpos+0)
    00000EFC E6 07            [ 7]  233 	and	a, #0x07
    00000EFE 20 C9            [12]  234 	jr	NZ, 00109$
                                    235 ;src/main.c:69: datapos = (scrollpos >> 3);
    00000F00 3Ar00r00         [13]  236 	ld	a, (_scrollpos+0)
    00000F03 0F               [ 4]  237 	rrca
    00000F04 0F               [ 4]  238 	rrca
    00000F05 0F               [ 4]  239 	rrca
    00000F06 E6 1F            [ 7]  240 	and	a, #0x1f
    00000F08 32r01r00         [13]  241 	ld	(_datapos+0), a
                                    242 ;src/main.c:70: uint8_t map_x_column = (datapos + DEVICE_SCREEN_WIDTH) & (DEVICE_SCREEN_BUFFER_WIDTH-1);
    00000F0B 3Ar01r00         [13]  243 	ld	a, (_datapos+0)
    00000F0E C6 20            [ 7]  244 	add	a, #0x20
    00000F10 E6 1F            [ 7]  245 	and	a, #0x1f
    00000F12 DD 77 FF         [19]  246 	ld	-1 (ix), a
                                    247 ;src/main.c:75: if (!rle_decompress(data, MAP_DATA_HEIGHT)) {
    00000F15 3E 12            [ 7]  248 	ld	a, #0x12
    00000F17 F5               [11]  249 	push	af
    00000F18 33               [ 6]  250 	inc	sp
    00000F19 21r00r00         [10]  251 	ld	hl, #_data
    00000F1C E5               [11]  252 	push	hl
    00000F1D CDr00r00         [17]  253 	call	_rle_decompress
    00000F20 7D               [ 4]  254 	ld	a, l
    00000F21 B7               [ 4]  255 	or	a, a
    00000F22 20 11            [12]  256 	jr	NZ, 00105$
                                    257 ;src/main.c:76: rle_init(map_compressed);
    00000F24 21r80r07         [10]  258 	ld	hl, #_map_compressed
    00000F27 CDr00r00         [17]  259 	call	_rle_init
                                    260 ;src/main.c:77: rle_decompress(data, MAP_DATA_HEIGHT);
    00000F2A 3E 12            [ 7]  261 	ld	a, #0x12
    00000F2C F5               [11]  262 	push	af
    00000F2D 33               [ 6]  263 	inc	sp
    00000F2E 21r00r00         [10]  264 	ld	hl, #_data
    00000F31 E5               [11]  265 	push	hl
    00000F32 CDr00r00         [17]  266 	call	_rle_decompress
    00000F35                        267 00105$:
                                    268 ;src/main.c:83: set_bkg_tiles(map_x_column, 0, 1, MAP_DATA_HEIGHT, data);
    00000F35 21r00r00         [10]  269 	ld	hl, #_data
    00000F38 E5               [11]  270 	push	hl
    00000F39 21 01 12         [10]  271 	ld	hl, #0x1201
    00000F3C E5               [11]  272 	push	hl
    00000F3D AF               [ 4]  273 	xor	a, a
    00000F3E F5               [11]  274 	push	af
    00000F3F 33               [ 6]  275 	inc	sp
    00000F40 DD 7E FF         [19]  276 	ld	a, -1 (ix)
    00000F43 F5               [11]  277 	push	af
    00000F44 33               [ 6]  278 	inc	sp
    00000F45 CDr00r00         [17]  279 	call	_set_tile_map_compat
    00000F48 C3rC9r0E         [10]  280 	jp	00109$
                                    281 ;src/main.c:86: }
    00000F4B 33               [ 6]  282 	inc	sp
    00000F4C DD E1            [14]  283 	pop	ix
    00000F4E C9               [10]  284 	ret
                                    285 	.area _CODE
                                    286 	.area _INITIALIZER
    00000000                        287 __xinit__scrollpos:
    00000000 00                     288 	.db #0x00	; 0
    00000001                        289 __xinit__datapos:
    00000001 00                     290 	.db #0x00	; 0
                                    291 	.area _CABS (ABS)
