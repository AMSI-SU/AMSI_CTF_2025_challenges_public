                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _hicolor_start
                                     13 	.globl _cpu_fast
                                     14 	.globl _fill_bkg_rect
                                     15 	.globl _set_bkg_data
                                     16 	.globl _display_off
                                     17 	.globl _vsync
                                     18 	.globl _joypad
                                     19 	.globl _buttons_prev
                                     20 	.globl _buttons
                                     21 	.globl _hicolors
                                     22 	.globl _blank_tile
                                     23 ;--------------------------------------------------------
                                     24 ; special function registers
                                     25 ;--------------------------------------------------------
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area _DATA
    00000000                         30 _buttons::
    00000000                         31 	.ds 1
    00000001                         32 _buttons_prev::
    00000001                         33 	.ds 1
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area _INITIALIZED
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area _DABS (ABS)
                                     42 ;--------------------------------------------------------
                                     43 ; global & static initialisations
                                     44 ;--------------------------------------------------------
                                     45 	.area _HOME
                                     46 	.area _GSINIT
                                     47 	.area _GSFINAL
                                     48 	.area _GSINIT
                                     49 ;--------------------------------------------------------
                                     50 ; Home
                                     51 ;--------------------------------------------------------
                                     52 	.area _HOME
                                     53 	.area _HOME
                                     54 ;--------------------------------------------------------
                                     55 ; code
                                     56 ;--------------------------------------------------------
                                     57 	.area _CODE
                                     58 ;src/main.c:36: void main(void) {
                                     59 ;	---------------------------------
                                     60 ; Function main
                                     61 ; ---------------------------------
    00000000                         62 _main::
    00000000 E8 F6            [16]   63 	add	sp, #-10
                                     64 ;src/main.c:38: uint8_t  img_select = 0;
    00000002 F8 09            [12]   65 	ldhl	sp,	#9
    00000004 36 00            [12]   66 	ld	(hl), #0x00
                                     67 ;src/main.c:39: bool     first_pass = true;
    00000006 F8 01            [12]   68 	ldhl	sp,	#1
    00000008 36 01            [12]   69 	ld	(hl), #0x01
                                     70 ;src/main.c:40: uint8_t  scroll_limit = 0;
    0000000A F8 06            [12]   71 	ldhl	sp,	#6
    0000000C 36 00            [12]   72 	ld	(hl), #0x00
                                     73 ;src/main.c:44: SHOW_BKG;
    0000000E F0r00            [12]   74 	ldh	a, (_LCDC_REG + 0)
    00000010 F6 01            [ 8]   75 	or	a, #0x01
    00000012 E0r00            [12]   76 	ldh	(_LCDC_REG + 0), a
                                     77 ;src/main.c:47: if (_cpu == CGB_TYPE) {
    00000014 FAr00r00         [16]   78 	ld	a, (#__cpu)
    00000017 D6 11            [ 8]   79 	sub	a, #0x11
    00000019 C2rADr01         [16]   80 	jp	NZ,00128$
                                     81 ;src/main.c:49: cpu_fast();
    0000001C CDr00r00         [24]   82 	call	_cpu_fast
                                     83 ;src/main.c:51: while(true) {
    0000001F                         84 00124$:
                                     85 ;src/main.c:53: vsync();
    0000001F CDr00r00         [24]   86 	call	_vsync
                                     87 ;src/main.c:54: UPDATE_BUTTONS();
    00000022 FAr00r00         [16]   88 	ld	a, (#_buttons)
    00000025 EAr01r00         [16]   89 	ld	(#_buttons_prev),a
    00000028 CDr00r00         [24]   90 	call	_joypad
    0000002B F8 08            [12]   91 	ldhl	sp,#8
    0000002D 77               [ 8]   92 	ld	(hl), a
    0000002E 7E               [ 8]   93 	ld	a, (hl)
    0000002F EAr00r00         [16]   94 	ld	(#_buttons),a
                                     95 ;src/main.c:57: if (BUTTON_TOGGLED(J_A | J_B) || first_pass) {
    00000032 FAr01r00         [16]   96 	ld	a, (#_buttons_prev)
    00000035 F8 07            [12]   97 	ldhl	sp,	#7
    00000037 22               [ 8]   98 	ld	(hl+), a
    00000038 AF               [ 4]   99 	xor	a, a
    00000039 32               [ 8]  100 	ld	(hl-), a
    0000003A 7E               [ 8]  101 	ld	a, (hl)
    0000003B 2F               [ 4]  102 	cpl
    0000003C F8 02            [12]  103 	ldhl	sp,	#2
    0000003E 22               [ 8]  104 	ld	(hl+), a
    0000003F AF               [ 4]  105 	xor	a, a
    00000040 2F               [ 4]  106 	cpl
    00000041 77               [ 8]  107 	ld	(hl), a
    00000042 FAr00r00         [16]  108 	ld	a, (#_buttons)
    00000045 F8 04            [12]  109 	ldhl	sp,	#4
    00000047 22               [ 8]  110 	ld	(hl+), a
    00000048 AF               [ 4]  111 	xor	a, a
    00000049 32               [ 8]  112 	ld	(hl-), a
    0000004A 3A               [ 8]  113 	ld	a, (hl-)
    0000004B 2B               [ 8]  114 	dec	hl
    0000004C A6               [ 8]  115 	and	a, (hl)
    0000004D F8 07            [12]  116 	ldhl	sp,	#7
    0000004F 77               [ 8]  117 	ld	(hl), a
    00000050 AF               [ 4]  118 	xor	a, a
    00000051 F8 03            [12]  119 	ldhl	sp,	#3
    00000053 A6               [ 8]  120 	and	a, (hl)
    00000054 F8 08            [12]  121 	ldhl	sp,	#8
    00000056 32               [ 8]  122 	ld	(hl-), a
    00000057 7E               [ 8]  123 	ld	a, (hl)
    00000058 E6 30            [ 8]  124 	and	a, #0x30
    0000005A 20 07            [12]  125 	jr	NZ, 00119$
    0000005C F8 01            [12]  126 	ldhl	sp,	#1
    0000005E CB 46            [12]  127 	bit	0, (hl)
    00000060 CAr82r01         [16]  128 	jp	Z, 00120$
    00000063                        129 00119$:
                                    130 ;src/main.c:59: vsync();
    00000063 CDr00r00         [24]  131 	call	_vsync
                                    132 ;src/main.c:60: DISPLAY_OFF;
    00000066 CDr00r00         [24]  133 	call	_display_off
                                    134 ;src/main.c:63: hicolor_bank = hicolors[img_select].bank;
    00000069 F8 09            [12]  135 	ldhl	sp,	#9
    0000006B 4E               [ 8]  136 	ld	c, (hl)
    0000006C 06 00            [ 8]  137 	ld	b, #0x00
    0000006E 69               [ 4]  138 	ld	l, c
    0000006F 60               [ 4]  139 	ld	h, b
    00000070 29               [ 8]  140 	add	hl, hl
    00000071 09               [ 8]  141 	add	hl, bc
    00000072 4D               [ 4]  142 	ld	c, l
    00000073 44               [ 4]  143 	ld	b, h
    00000074 21rC0r01         [12]  144 	ld	hl, #_hicolors
    00000077 09               [ 8]  145 	add	hl, bc
    00000078 E5               [16]  146 	push	hl
    00000079 7D               [ 4]  147 	ld	a, l
    0000007A F8 07            [12]  148 	ldhl	sp,	#7
    0000007C 77               [ 8]  149 	ld	(hl), a
    0000007D E1               [12]  150 	pop	hl
    0000007E 7C               [ 4]  151 	ld	a, h
    0000007F F8 06            [12]  152 	ldhl	sp,	#6
    00000081 32               [ 8]  153 	ld	(hl-), a
    00000082 2A               [ 8]  154 	ld	a, (hl+)
    00000083 5F               [ 4]  155 	ld	e, a
    00000084 56               [ 8]  156 	ld	d, (hl)
    00000085 1A               [ 8]  157 	ld	a, (de)
    00000086 F8 00            [12]  158 	ldhl	sp,	#0
    00000088 77               [ 8]  159 	ld	(hl), a
                                    160 ;src/main.c:64: p_hicolor = (const hicolor_data *)hicolors[img_select].ptr;
    00000089 F8 05            [12]  161 	ldhl	sp,#5
    0000008B 2A               [ 8]  162 	ld	a, (hl+)
    0000008C 5F               [ 4]  163 	ld	e, a
    0000008D 56               [ 8]  164 	ld	d, (hl)
    0000008E 6B               [ 4]  165 	ld	l, e
    0000008F 62               [ 4]  166 	ld	h, d
    00000090 23               [ 8]  167 	inc	hl
    00000091 E5               [16]  168 	push	hl
    00000092 7D               [ 4]  169 	ld	a, l
    00000093 F8 09            [12]  170 	ldhl	sp,	#9
    00000095 77               [ 8]  171 	ld	(hl), a
    00000096 E1               [12]  172 	pop	hl
    00000097 7C               [ 4]  173 	ld	a, h
    00000098 F8 08            [12]  174 	ldhl	sp,	#8
    0000009A 32               [ 8]  175 	ld	(hl-), a
    0000009B 2A               [ 8]  176 	ld	a, (hl+)
    0000009C 5F               [ 4]  177 	ld	e, a
    0000009D 3A               [ 8]  178 	ld	a, (hl-)
    0000009E 57               [ 4]  179 	ld	d, a
    0000009F 1A               [ 8]  180 	ld	a, (de)
    000000A0 22               [ 8]  181 	ld	(hl+), a
    000000A1 13               [ 8]  182 	inc	de
    000000A2 1A               [ 8]  183 	ld	a, (de)
    000000A3 32               [ 8]  184 	ld	(hl-), a
    000000A4 7E               [ 8]  185 	ld	a, (hl)
    000000A5 F8 01            [12]  186 	ldhl	sp,	#1
    000000A7 77               [ 8]  187 	ld	(hl), a
    000000A8 F8 08            [12]  188 	ldhl	sp,	#8
    000000AA 7E               [ 8]  189 	ld	a, (hl)
    000000AB F8 02            [12]  190 	ldhl	sp,	#2
                                    191 ;src/main.c:66: uint8_t bank_save = CURRENT_BANK;
    000000AD 22               [ 8]  192 	ld	(hl+), a
    000000AE F0r00            [12]  193 	ldh	a, (__current_bank + 0)
    000000B0 77               [ 8]  194 	ld	(hl), a
                                    195 ;src/main.c:67: if (hicolor_bank) SWITCH_ROM(hicolor_bank);
    000000B1 F8 00            [12]  196 	ldhl	sp,	#0
    000000B3 7E               [ 8]  197 	ld	a, (hl)
    000000B4 B7               [ 4]  198 	or	a, a
    000000B5 28 07            [12]  199 	jr	Z, 00102$
    000000B7 7E               [ 8]  200 	ld	a, (hl)
    000000B8 E0r00            [12]  201 	ldh	(__current_bank + 0), a
    000000BA 7E               [ 8]  202 	ld	a, (hl)
    000000BB EAr00r00         [16]  203 	ld	(#_rROMB0),a
    000000BE                        204 00102$:
                                    205 ;src/main.c:70: SCY_REG = 0u;
    000000BE AF               [ 4]  206 	xor	a, a
    000000BF E0r00            [12]  207 	ldh	(_SCY_REG + 0), a
                                    208 ;src/main.c:71: if ((p_hicolor->height_in_tiles * 8u) > DEVICE_SCREEN_PX_HEIGHT)
    000000C1 F8 01            [12]  209 	ldhl	sp,#1
    000000C3 2A               [ 8]  210 	ld	a, (hl+)
    000000C4 5F               [ 4]  211 	ld	e, a
    000000C5 56               [ 8]  212 	ld	d, (hl)
    000000C6 21 02 00         [12]  213 	ld	hl, #0x0002
    000000C9 19               [ 8]  214 	add	hl, de
    000000CA E5               [16]  215 	push	hl
    000000CB 7D               [ 4]  216 	ld	a, l
    000000CC F8 06            [12]  217 	ldhl	sp,	#6
    000000CE 77               [ 8]  218 	ld	(hl), a
    000000CF E1               [12]  219 	pop	hl
    000000D0 7C               [ 4]  220 	ld	a, h
    000000D1 F8 05            [12]  221 	ldhl	sp,	#5
                                    222 ;src/main.c:81: if ((p_hicolor->height_in_tiles * 8u) < DEVICE_SCREEN_PX_HEIGHT) {
    000000D3 32               [ 8]  223 	ld	(hl-), a
    000000D4 2A               [ 8]  224 	ld	a, (hl+)
    000000D5 5F               [ 4]  225 	ld	e, a
    000000D6 2A               [ 8]  226 	ld	a, (hl+)
    000000D7 57               [ 4]  227 	ld	d, a
    000000D8 1A               [ 8]  228 	ld	a, (de)
    000000D9 77               [ 8]  229 	ld	(hl), a
                                    230 ;src/main.c:71: if ((p_hicolor->height_in_tiles * 8u) > DEVICE_SCREEN_PX_HEIGHT)
    000000DA 2A               [ 8]  231 	ld	a, (hl+)
    000000DB 22               [ 8]  232 	ld	(hl+), a
    000000DC 36 00            [12]  233 	ld	(hl), #0x00
    000000DE 3E 03            [ 8]  234 	ld	a, #0x03
    000000E0                        235 00211$:
    000000E0 F8 07            [12]  236 	ldhl	sp,	#7
    000000E2 CB 26            [16]  237 	sla	(hl)
    000000E4 23               [ 8]  238 	inc	hl
    000000E5 CB 16            [16]  239 	rl	(hl)
    000000E7 3D               [ 4]  240 	dec	a
    000000E8 20 F6            [12]  241 	jr	NZ, 00211$
    000000EA 2B               [ 8]  242 	dec	hl
    000000EB 3E 90            [ 8]  243 	ld	a, #0x90
    000000ED 96               [ 8]  244 	sub	a, (hl)
    000000EE 23               [ 8]  245 	inc	hl
    000000EF 3E 00            [ 8]  246 	ld	a, #0x00
    000000F1 9E               [ 8]  247 	sbc	a, (hl)
    000000F2 30 0B            [12]  248 	jr	NC, 00104$
                                    249 ;src/main.c:72: scroll_limit = ((p_hicolor->height_in_tiles * 8u) - DEVICE_SCREEN_PX_HEIGHT);
    000000F4 F8 06            [12]  250 	ldhl	sp,	#6
    000000F6 7E               [ 8]  251 	ld	a, (hl)
    000000F7 87               [ 4]  252 	add	a, a
    000000F8 87               [ 4]  253 	add	a, a
    000000F9 87               [ 4]  254 	add	a, a
    000000FA C6 70            [ 8]  255 	add	a, #0x70
    000000FC 77               [ 8]  256 	ld	(hl), a
    000000FD 18 04            [12]  257 	jr	00105$
    000000FF                        258 00104$:
                                    259 ;src/main.c:73: else scroll_limit = 0;
    000000FF F8 06            [12]  260 	ldhl	sp,	#6
    00000101 36 00            [12]  261 	ld	(hl), #0x00
    00000103                        262 00105$:
                                    263 ;src/main.c:81: if ((p_hicolor->height_in_tiles * 8u) < DEVICE_SCREEN_PX_HEIGHT) {
    00000103 F8 07            [12]  264 	ldhl	sp,	#7
    00000105 2A               [ 8]  265 	ld	a, (hl+)
    00000106 D6 90            [ 8]  266 	sub	a, #0x90
    00000108 7E               [ 8]  267 	ld	a, (hl)
    00000109 DE 00            [ 8]  268 	sbc	a, #0x00
    0000010B 30 4A            [12]  269 	jr	NC, 00107$
                                    270 ;src/main.c:82: VBK_REG = VBK_BANK_1;
    0000010D 3E 01            [ 8]  271 	ld	a, #0x01
    0000010F E0r00            [12]  272 	ldh	(_VBK_REG + 0), a
                                    273 ;src/main.c:83: set_bkg_data(BG_LAST_TILE, 1u, blank_tile);
    00000111 11rB0r01         [12]  274 	ld	de, #_blank_tile
    00000114 D5               [16]  275 	push	de
    00000115 21 FF 01         [12]  276 	ld	hl, #0x1ff
    00000118 E5               [16]  277 	push	hl
    00000119 CDr00r00         [24]  278 	call	_set_bkg_data
    0000011C E8 04            [16]  279 	add	sp, #4
                                    280 ;src/main.c:84: fill_bkg_rect(0u, (p_hicolor->height_in_tiles), DEVICE_SCREEN_WIDTH, DEVICE_SCREEN_HEIGHT, BKGF_BANK1);
    0000011E F8 04            [12]  281 	ldhl	sp,#4
    00000120 2A               [ 8]  282 	ld	a, (hl+)
    00000121 5F               [ 4]  283 	ld	e, a
    00000122 56               [ 8]  284 	ld	d, (hl)
    00000123 1A               [ 8]  285 	ld	a, (de)
    00000124 26 08            [ 8]  286 	ld	h, #0x08
                                    287 ;	spillPairReg hl
                                    288 ;	spillPairReg hl
    00000126 E5               [16]  289 	push	hl
    00000127 33               [ 8]  290 	inc	sp
    00000128 26 12            [ 8]  291 	ld	h, #0x12
                                    292 ;	spillPairReg hl
                                    293 ;	spillPairReg hl
    0000012A E5               [16]  294 	push	hl
    0000012B 33               [ 8]  295 	inc	sp
    0000012C 26 14            [ 8]  296 	ld	h, #0x14
                                    297 ;	spillPairReg hl
                                    298 ;	spillPairReg hl
    0000012E E5               [16]  299 	push	hl
    0000012F 33               [ 8]  300 	inc	sp
    00000130 67               [ 4]  301 	ld	h, a
    00000131 2E 00            [ 8]  302 	ld	l, #0x00
    00000133 E5               [16]  303 	push	hl
    00000134 CDr00r00         [24]  304 	call	_fill_bkg_rect
    00000137 E8 05            [16]  305 	add	sp, #5
                                    306 ;src/main.c:85: VBK_REG = VBK_BANK_0;
    00000139 AF               [ 4]  307 	xor	a, a
    0000013A E0r00            [12]  308 	ldh	(_VBK_REG + 0), a
                                    309 ;src/main.c:86: fill_bkg_rect(0u, (p_hicolor->height_in_tiles), DEVICE_SCREEN_WIDTH, DEVICE_SCREEN_HEIGHT, BG_LAST_TILE);
    0000013C F8 04            [12]  310 	ldhl	sp,#4
    0000013E 2A               [ 8]  311 	ld	a, (hl+)
    0000013F 5F               [ 4]  312 	ld	e, a
    00000140 56               [ 8]  313 	ld	d, (hl)
    00000141 1A               [ 8]  314 	ld	a, (de)
    00000142 26 FF            [ 8]  315 	ld	h, #0xff
                                    316 ;	spillPairReg hl
                                    317 ;	spillPairReg hl
    00000144 E5               [16]  318 	push	hl
    00000145 33               [ 8]  319 	inc	sp
    00000146 26 12            [ 8]  320 	ld	h, #0x12
                                    321 ;	spillPairReg hl
                                    322 ;	spillPairReg hl
    00000148 E5               [16]  323 	push	hl
    00000149 33               [ 8]  324 	inc	sp
    0000014A 26 14            [ 8]  325 	ld	h, #0x14
                                    326 ;	spillPairReg hl
                                    327 ;	spillPairReg hl
    0000014C E5               [16]  328 	push	hl
    0000014D 33               [ 8]  329 	inc	sp
    0000014E 67               [ 4]  330 	ld	h, a
    0000014F 2E 00            [ 8]  331 	ld	l, #0x00
    00000151 E5               [16]  332 	push	hl
    00000152 CDr00r00         [24]  333 	call	_fill_bkg_rect
    00000155 E8 05            [16]  334 	add	sp, #5
    00000157                        335 00107$:
                                    336 ;src/main.c:89: SWITCH_ROM(bank_save);
    00000157 F8 03            [12]  337 	ldhl	sp,	#3
    00000159 7E               [ 8]  338 	ld	a, (hl)
    0000015A E0r00            [12]  339 	ldh	(__current_bank + 0), a
    0000015C 7E               [ 8]  340 	ld	a, (hl)
    0000015D EAr00r00         [16]  341 	ld	(#_rROMB0),a
                                    342 ;src/main.c:92: hicolor_start(p_hicolor, hicolor_bank);
    00000160 F8 00            [12]  343 	ldhl	sp,	#0
    00000162 2A               [ 8]  344 	ld	a, (hl+)
    00000163 5E               [ 8]  345 	ld	e, (hl)
    00000164 23               [ 8]  346 	inc	hl
    00000165 56               [ 8]  347 	ld	d, (hl)
    00000166 CDr00r00         [24]  348 	call	_hicolor_start
                                    349 ;src/main.c:94: DISPLAY_ON;
    00000169 F0r00            [12]  350 	ldh	a, (_LCDC_REG + 0)
    0000016B F6 80            [ 8]  351 	or	a, #0x80
    0000016D E0r00            [12]  352 	ldh	(_LCDC_REG + 0), a
                                    353 ;src/main.c:97: img_select++;
    0000016F F8 09            [12]  354 	ldhl	sp,	#9
    00000171 34               [12]  355 	inc	(hl)
                                    356 ;src/main.c:98: if (img_select == ARRAY_LEN(hicolors)) img_select = 0;
    00000172 7E               [ 8]  357 	ld	a, (hl)
    00000173 D6 03            [ 8]  358 	sub	a, #0x03
    00000175 20 04            [12]  359 	jr	NZ, 00109$
    00000177 F8 09            [12]  360 	ldhl	sp,	#9
    00000179 36 00            [12]  361 	ld	(hl), #0x00
    0000017B                        362 00109$:
                                    363 ;src/main.c:100: first_pass = false;
    0000017B F8 01            [12]  364 	ldhl	sp,	#1
    0000017D 36 00            [12]  365 	ld	(hl), #0x00
    0000017F C3r1Fr00         [16]  366 	jp	00124$
    00000182                        367 00120$:
                                    368 ;src/main.c:103: else if (BUTTON_PRESSED(J_UP)) {
    00000182 FAr00r00         [16]  369 	ld	a, (#_buttons)
    00000185 CB 57            [ 8]  370 	bit	2, a
    00000187 28 0F            [12]  371 	jr	Z, 00117$
                                    372 ;src/main.c:104: if (SCY_REG) SCY_REG--;
    00000189 FAr00r00         [16]  373 	ld	a, (#_SCY_REG)
    0000018C B7               [ 4]  374 	or	a, a
    0000018D CAr1Fr00         [16]  375 	jp	Z, 00124$
    00000190 F0r00            [12]  376 	ldh	a, (_SCY_REG + 0)
    00000192 3D               [ 4]  377 	dec	a
    00000193 E0r00            [12]  378 	ldh	(_SCY_REG + 0), a
    00000195 C3r1Fr00         [16]  379 	jp	00124$
    00000198                        380 00117$:
                                    381 ;src/main.c:105: } else if (BUTTON_PRESSED(J_DOWN)) {
    00000198 CB 5F            [ 8]  382 	bit	3, a
    0000019A CAr1Fr00         [16]  383 	jp	Z,00124$
                                    384 ;src/main.c:106: if (SCY_REG < scroll_limit) SCY_REG++;
    0000019D F0r00            [12]  385 	ldh	a, (_SCY_REG + 0)
    0000019F F8 06            [12]  386 	ldhl	sp,	#6
    000001A1 96               [ 8]  387 	sub	a, (hl)
    000001A2 D2r1Fr00         [16]  388 	jp	NC, 00124$
    000001A5 F0r00            [12]  389 	ldh	a, (_SCY_REG + 0)
    000001A7 3C               [ 4]  390 	inc	a
    000001A8 E0r00            [12]  391 	ldh	(_SCY_REG + 0), a
    000001AA C3r1Fr00         [16]  392 	jp	00124$
    000001AD                        393 00128$:
                                    394 ;src/main.c:110: }
    000001AD E8 0A            [16]  395 	add	sp, #10
    000001AF C9               [16]  396 	ret
    000001B0                        397 _blank_tile:
    000001B0 00                     398 	.db #0x00	; 0
    000001B1 00                     399 	.db #0x00	; 0
    000001B2 00                     400 	.db #0x00	; 0
    000001B3 00                     401 	.db #0x00	; 0
    000001B4 00                     402 	.db #0x00	; 0
    000001B5 00                     403 	.db #0x00	; 0
    000001B6 00                     404 	.db #0x00	; 0
    000001B7 00                     405 	.db #0x00	; 0
    000001B8 00                     406 	.db #0x00	; 0
    000001B9 00                     407 	.db #0x00	; 0
    000001BA 00                     408 	.db #0x00	; 0
    000001BB 00                     409 	.db #0x00	; 0
    000001BC 00                     410 	.db #0x00	; 0
    000001BD 00                     411 	.db #0x00	; 0
    000001BE 00                     412 	.db #0x00	; 0
    000001BF 00                     413 	.db #0x00	; 0
    000001C0                        414 _hicolors:
    000001C0r00                     415 	.byte ___bank_test_pattern_tall
    000001C1r00r00                  416 	.dw _test_pattern_tall_data
    000001C3r00                     417 	.byte ___bank_example_image
    000001C4r00r00                  418 	.dw _example_image_data
    000001C6r00                     419 	.byte ___bank_test_pattern_short
    000001C7r00r00                  420 	.dw _test_pattern_short_data
                                    421 	.area _CODE
                                    422 	.area _INITIALIZER
                                    423 	.area _CABS (ABS)
