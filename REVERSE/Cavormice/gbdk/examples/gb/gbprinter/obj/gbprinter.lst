                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gbprinter
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _printer_wait
                                     12 	.globl _printer_check_cancel
                                     13 	.globl _printer_print_tile
                                     14 	.globl _printer_send_command
                                     15 	.globl _printer_send_byte
                                     16 	.globl _printer_send_receive
                                     17 	.globl _memset
                                     18 	.globl _memcpy
                                     19 	.globl _vsync
                                     20 	.globl _PRN_PKT_START
                                     21 	.globl _gbprinter_detect
                                     22 	.globl _gbprinter_print_image
                                     23 ;--------------------------------------------------------
                                     24 ; special function registers
                                     25 ;--------------------------------------------------------
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area _DATA
    00000000                         30 _printer_status:
    00000000                         31 	.ds 2
    00000002                         32 _printer_tile_num:
    00000002                         33 	.ds 1
    00000003                         34 _printer_print_tile_printer_CRC_10000_158:
    00000003                         35 	.ds 2
    00000005                         36 _gbprinter_print_image_img_10000_177:
    00000005                         37 	.ds 2
    00000007                         38 _gbprinter_print_image_error_10000_177:
    00000007                         39 	.ds 1
                                     40 ;--------------------------------------------------------
                                     41 ; ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area _INITIALIZED
    00000000                         44 _PRN_PKT_START::
    00000000                         45 	.ds 14
                                     46 ;--------------------------------------------------------
                                     47 ; absolute external ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area _DABS (ABS)
                                     50 ;--------------------------------------------------------
                                     51 ; global & static initialisations
                                     52 ;--------------------------------------------------------
                                     53 	.area _HOME
                                     54 	.area _GSINIT
                                     55 	.area _GSFINAL
                                     56 	.area _GSINIT
                                     57 ;--------------------------------------------------------
                                     58 ; Home
                                     59 ;--------------------------------------------------------
                                     60 	.area _HOME
                                     61 	.area _HOME
                                     62 ;--------------------------------------------------------
                                     63 ; code
                                     64 ;--------------------------------------------------------
                                     65 	.area _CODE
                                     66 ;src/gbprinter.c:31: uint8_t printer_send_receive(uint8_t b) {
                                     67 ;	---------------------------------
                                     68 ; Function printer_send_receive
                                     69 ; ---------------------------------
    00000000                         70 _printer_send_receive::
    00000000 E0r00            [12]   71 	ldh	(_SB_REG + 0), a
                                     72 ;src/gbprinter.c:33: SC_REG = START_TRANSFER;
    00000002 3E 81            [ 8]   73 	ld	a, #0x81
    00000004 E0r00            [12]   74 	ldh	(_SC_REG + 0), a
                                     75 ;src/gbprinter.c:34: while (SC_REG & 0x80);
    00000006                         76 00101$:
    00000006 F0r00            [12]   77 	ldh	a, (_SC_REG + 0)
    00000008 07               [ 4]   78 	rlca
    00000009 38 FB            [12]   79 	jr	C, 00101$
                                     80 ;src/gbprinter.c:35: return SB_REG;
    0000000B F0r00            [12]   81 	ldh	a, (_SB_REG + 0)
                                     82 ;src/gbprinter.c:36: }
    0000000D C9               [16]   83 	ret
    0000000E                         84 _PRN_PKT_INIT:
    0000000E 88                      85 	.db #0x88	; 136
    0000000F 33                      86 	.db #0x33	; 51	'3'
    00000010 01                      87 	.db #0x01	; 1
    00000011 00                      88 	.db #0x00	; 0
    00000012 00                      89 	.db #0x00	; 0
    00000013 00                      90 	.db #0x00	; 0
    00000014 01                      91 	.db #0x01	; 1
    00000015 00                      92 	.db #0x00	; 0
    00000016 00                      93 	.db #0x00	; 0
    00000017 00                      94 	.db #0x00	; 0
    00000018                         95 _PRN_PKT_STATUS:
    00000018 88                      96 	.db #0x88	; 136
    00000019 33                      97 	.db #0x33	; 51	'3'
    0000001A 0F                      98 	.db #0x0f	; 15
    0000001B 00                      99 	.db #0x00	; 0
    0000001C 00                     100 	.db #0x00	; 0
    0000001D 00                     101 	.db #0x00	; 0
    0000001E 0F                     102 	.db #0x0f	; 15
    0000001F 00                     103 	.db #0x00	; 0
    00000020 00                     104 	.db #0x00	; 0
    00000021 00                     105 	.db #0x00	; 0
    00000022                        106 _PRN_PKT_EOF:
    00000022 88                     107 	.db #0x88	; 136
    00000023 33                     108 	.db #0x33	; 51	'3'
    00000024 04                     109 	.db #0x04	; 4
    00000025 00                     110 	.db #0x00	; 0
    00000026 00                     111 	.db #0x00	; 0
    00000027 00                     112 	.db #0x00	; 0
    00000028 04                     113 	.db #0x04	; 4
    00000029 00                     114 	.db #0x00	; 0
    0000002A 00                     115 	.db #0x00	; 0
    0000002B 00                     116 	.db #0x00	; 0
    0000002C                        117 _PRN_PKT_CANCEL:
    0000002C 88                     118 	.db #0x88	; 136
    0000002D 33                     119 	.db #0x33	; 51	'3'
    0000002E 08                     120 	.db #0x08	; 8
    0000002F 00                     121 	.db #0x00	; 0
    00000030 00                     122 	.db #0x00	; 0
    00000031 00                     123 	.db #0x00	; 0
    00000032 01                     124 	.db #0x01	; 1
    00000033 00                     125 	.db #0x00	; 0
    00000034 00                     126 	.db #0x00	; 0
    00000035 00                     127 	.db #0x00	; 0
                                    128 ;src/gbprinter.c:38: uint8_t printer_send_byte(uint8_t b) {
                                    129 ;	---------------------------------
                                    130 ; Function printer_send_byte
                                    131 ; ---------------------------------
    00000036                        132 _printer_send_byte::
    00000036 5F               [ 4]  133 	ld	e, a
                                    134 ;src/gbprinter.c:39: return (uint8_t)(printer_status = ((printer_status << 8) | printer_send_receive(b)));
    00000037 21r00r00         [12]  135 	ld	hl, #_printer_status
    0000003A 46               [ 8]  136 	ld	b, (hl)
    0000003B 0E 00            [ 8]  137 	ld	c, #0x00
    0000003D C5               [16]  138 	push	bc
    0000003E 7B               [ 4]  139 	ld	a, e
    0000003F CDr00r00         [24]  140 	call	_printer_send_receive
    00000042 C1               [12]  141 	pop	bc
    00000043 21r00r00         [12]  142 	ld	hl, #_printer_status
    00000046 22               [ 8]  143 	ld	(hl+), a
    00000047 70               [ 8]  144 	ld	(hl), b
                                    145 ;src/gbprinter.c:40: }
    00000048 C9               [16]  146 	ret
                                    147 ;src/gbprinter.c:42: uint8_t printer_send_command(const uint8_t *command, uint8_t length) {
                                    148 ;	---------------------------------
                                    149 ; Function printer_send_command
                                    150 ; ---------------------------------
    00000049                        151 _printer_send_command::
    00000049 4F               [ 4]  152 	ld	c, a
                                    153 ;src/gbprinter.c:44: while (index++ < length) printer_send_byte(*command++);
    0000004A 06 00            [ 8]  154 	ld	b, #0x00
    0000004C                        155 00101$:
    0000004C 78               [ 4]  156 	ld	a, b
    0000004D 91               [ 4]  157 	sub	a, c
    0000004E 30 0E            [12]  158 	jr	NC, 00103$
    00000050 04               [ 4]  159 	inc	b
    00000051 1A               [ 8]  160 	ld	a, (de)
    00000052 6F               [ 4]  161 	ld	l, a
                                    162 ;	spillPairReg hl
                                    163 ;	spillPairReg hl
    00000053 13               [ 8]  164 	inc	de
    00000054 C5               [16]  165 	push	bc
    00000055 D5               [16]  166 	push	de
    00000056 7D               [ 4]  167 	ld	a, l
    00000057 CDr36r00         [24]  168 	call	_printer_send_byte
    0000005A D1               [12]  169 	pop	de
    0000005B C1               [12]  170 	pop	bc
    0000005C 18 EE            [12]  171 	jr	00101$
    0000005E                        172 00103$:
                                    173 ;src/gbprinter.c:45: return ((uint8_t)(printer_status >> 8) == PRN_MAGIC_DETECT) ? (uint8_t)printer_status : PRN_STATUS_MASK_ERRORS;
    0000005E 21r01r00         [12]  174 	ld	hl, #_printer_status + 1
    00000061 7E               [ 8]  175 	ld	a, (hl)
    00000062 D6 81            [ 8]  176 	sub	a, #0x81
    00000064 20 03            [12]  177 	jr	NZ, 00106$
    00000066 2B               [ 8]  178 	dec	hl
    00000067 7E               [ 8]  179 	ld	a, (hl)
    00000068 C9               [16]  180 	ret
    00000069                        181 00106$:
    00000069 3E F0            [ 8]  182 	ld	a, #0xf0
                                    183 ;src/gbprinter.c:46: }
    0000006B C9               [16]  184 	ret
                                    185 ;src/gbprinter.c:49: uint8_t printer_print_tile(const uint8_t *tiledata) {
                                    186 ;	---------------------------------
                                    187 ; Function printer_print_tile
                                    188 ; ---------------------------------
    0000006C                        189 _printer_print_tile::
    0000006C 3B               [ 8]  190 	dec	sp
    0000006D 3B               [ 8]  191 	dec	sp
    0000006E 43               [ 4]  192 	ld	b, e
                                    193 ;src/gbprinter.c:52: if (printer_tile_num == 0) {
    0000006F FAr02r00         [16]  194 	ld	a, (#_printer_tile_num)
    00000072 B7               [ 4]  195 	or	a, a
    00000073 20 20            [12]  196 	jr	NZ, 00119$
                                    197 ;src/gbprinter.c:53: const uint8_t * data = PRINT_TILE;
    00000075 21rF7r00         [12]  198 	ld	hl, #_printer_print_tile_PRINT_TILE_10000_158
                                    199 ;src/gbprinter.c:54: for (uint8_t i = sizeof(PRINT_TILE); i != 0; i--) printer_send_receive(*data++);
    00000078 0E 06            [ 8]  200 	ld	c, #0x06
    0000007A                        201 00108$:
    0000007A 79               [ 4]  202 	ld	a, c
    0000007B B7               [ 4]  203 	or	a, a
    0000007C 28 0F            [12]  204 	jr	Z, 00101$
    0000007E 2A               [ 8]  205 	ld	a, (hl+)
    0000007F 5F               [ 4]  206 	ld	e, a
    00000080 E5               [16]  207 	push	hl
    00000081 C5               [16]  208 	push	bc
    00000082 D5               [16]  209 	push	de
    00000083 7B               [ 4]  210 	ld	a, e
    00000084 CDr00r00         [24]  211 	call	_printer_send_receive
    00000087 D1               [12]  212 	pop	de
    00000088 C1               [12]  213 	pop	bc
    00000089 E1               [12]  214 	pop	hl
    0000008A 0D               [ 4]  215 	dec	c
    0000008B 18 ED            [12]  216 	jr	00108$
    0000008D                        217 00101$:
                                    218 ;src/gbprinter.c:55: printer_CRC = 0x04 + 0x80 + 0x02;
    0000008D 21r03r00         [12]  219 	ld	hl, #_printer_print_tile_printer_CRC_10000_158
    00000090 3E 86            [ 8]  220 	ld	a, #0x86
    00000092 22               [ 8]  221 	ld	(hl+), a
    00000093 AF               [ 4]  222 	xor	a, a
    00000094 77               [ 8]  223 	ld	(hl), a
                                    224 ;src/gbprinter.c:57: for(uint8_t i = 0x10; i != 0; i--, tiledata++) {
    00000095                        225 00119$:
    00000095 0E 10            [ 8]  226 	ld	c, #0x10
    00000097 F8 00            [12]  227 	ldhl	sp,	#0
    00000099 78               [ 4]  228 	ld	a, b
    0000009A 22               [ 8]  229 	ld	(hl+), a
    0000009B 72               [ 8]  230 	ld	(hl), d
    0000009C                        231 00111$:
    0000009C 79               [ 4]  232 	ld	a, c
    0000009D B7               [ 4]  233 	or	a, a
    0000009E 28 27            [12]  234 	jr	Z, 00104$
                                    235 ;src/gbprinter.c:58: printer_CRC += *tiledata;
    000000A0 D1               [12]  236 	pop	de
    000000A1 D5               [16]  237 	push	de
    000000A2 1A               [ 8]  238 	ld	a, (de)
    000000A3 21r03r00         [12]  239 	ld	hl, #_printer_print_tile_printer_CRC_10000_158
    000000A6 5E               [ 8]  240 	ld	e, (hl)
    000000A7 23               [ 8]  241 	inc	hl
    000000A8 56               [ 8]  242 	ld	d, (hl)
    000000A9 2B               [ 8]  243 	dec	hl
    000000AA 06 00            [ 8]  244 	ld	b, #0x00
    000000AC 83               [ 4]  245 	add	a, e
    000000AD 5F               [ 4]  246 	ld	e, a
    000000AE 78               [ 4]  247 	ld	a, b
    000000AF 8A               [ 4]  248 	adc	a, d
    000000B0 73               [ 8]  249 	ld	(hl), e
    000000B1 23               [ 8]  250 	inc	hl
    000000B2 77               [ 8]  251 	ld	(hl), a
                                    252 ;src/gbprinter.c:59: printer_send_receive(*tiledata);
    000000B3 D1               [12]  253 	pop	de
    000000B4 D5               [16]  254 	push	de
    000000B5 1A               [ 8]  255 	ld	a, (de)
    000000B6 47               [ 4]  256 	ld	b, a
    000000B7 C5               [16]  257 	push	bc
    000000B8 78               [ 4]  258 	ld	a, b
    000000B9 CDr00r00         [24]  259 	call	_printer_send_receive
    000000BC C1               [12]  260 	pop	bc
                                    261 ;src/gbprinter.c:57: for(uint8_t i = 0x10; i != 0; i--, tiledata++) {
    000000BD 0D               [ 4]  262 	dec	c
    000000BE F8 00            [12]  263 	ldhl	sp,	#0
    000000C0 34               [12]  264 	inc	(hl)
    000000C1 20 D9            [12]  265 	jr	NZ, 00111$
    000000C3 23               [ 8]  266 	inc	hl
    000000C4 34               [12]  267 	inc	(hl)
    000000C5 18 D5            [12]  268 	jr	00111$
    000000C7                        269 00104$:
                                    270 ;src/gbprinter.c:61: if (++printer_tile_num == 40) {
    000000C7 21r02r00         [12]  271 	ld	hl, #_printer_tile_num
    000000CA 34               [12]  272 	inc	(hl)
    000000CB 7E               [ 8]  273 	ld	a, (hl)
    000000CC D6 28            [ 8]  274 	sub	a, #0x28
    000000CE 20 23            [12]  275 	jr	NZ, 00106$
                                    276 ;src/gbprinter.c:62: printer_send_receive((uint8_t)printer_CRC);
    000000D0 FAr03r00         [16]  277 	ld	a, (#_printer_print_tile_printer_CRC_10000_158)
    000000D3 CDr00r00         [24]  278 	call	_printer_send_receive
                                    279 ;src/gbprinter.c:63: printer_send_receive((uint8_t)(printer_CRC >> 8));
    000000D6 FAr04r00         [16]  280 	ld	a, (#_printer_print_tile_printer_CRC_10000_158 + 1)
    000000D9 CDr00r00         [24]  281 	call	_printer_send_receive
                                    282 ;src/gbprinter.c:64: printer_send_receive(0x00);
    000000DC AF               [ 4]  283 	xor	a, a
    000000DD CDr00r00         [24]  284 	call	_printer_send_receive
                                    285 ;src/gbprinter.c:65: printer_send_receive(0x00);
    000000E0 AF               [ 4]  286 	xor	a, a
    000000E1 CDr00r00         [24]  287 	call	_printer_send_receive
                                    288 ;src/gbprinter.c:66: printer_CRC = printer_tile_num = 0;
    000000E4 21r02r00         [12]  289 	ld	hl, #_printer_tile_num
    000000E7 36 00            [12]  290 	ld	(hl), #0x00
    000000E9 AF               [ 4]  291 	xor	a, a
    000000EA 21r03r00         [12]  292 	ld	hl, #_printer_print_tile_printer_CRC_10000_158
    000000ED 22               [ 8]  293 	ld	(hl+), a
    000000EE 77               [ 8]  294 	ld	(hl), a
                                    295 ;src/gbprinter.c:67: return TRUE;
    000000EF 3E 01            [ 8]  296 	ld	a, #0x01
    000000F1 18 01            [12]  297 	jr	00113$
    000000F3                        298 00106$:
                                    299 ;src/gbprinter.c:69: return FALSE;
    000000F3 AF               [ 4]  300 	xor	a, a
    000000F4                        301 00113$:
                                    302 ;src/gbprinter.c:70: }
    000000F4 33               [ 8]  303 	inc	sp
    000000F5 33               [ 8]  304 	inc	sp
    000000F6 C9               [16]  305 	ret
    000000F7                        306 _printer_print_tile_PRINT_TILE_10000_158:
    000000F7 88                     307 	.db #0x88	; 136
    000000F8 33                     308 	.db #0x33	; 51	'3'
    000000F9 04                     309 	.db #0x04	; 4
    000000FA 00                     310 	.db #0x00	; 0
    000000FB 80                     311 	.db #0x80	; 128
    000000FC 02                     312 	.db #0x02	; 2
                                    313 ;src/gbprinter.c:79: uint8_t printer_wait(uint16_t timeout, uint8_t mask, uint8_t value) {
                                    314 ;	---------------------------------
                                    315 ; Function printer_wait
                                    316 ; ---------------------------------
    000000FD                        317 _printer_wait::
    000000FD 3B               [ 8]  318 	dec	sp
    000000FE F8 00            [12]  319 	ldhl	sp,	#0
    00000100 77               [ 8]  320 	ld	(hl), a
                                    321 ;src/gbprinter.c:81: while (((error = PRINTER_SEND_COMMAND(PRN_PKT_STATUS)) & mask) != value) {
    00000101                        322 00107$:
    00000101 D5               [16]  323 	push	de
    00000102 3E 0A            [ 8]  324 	ld	a, #0x0a
    00000104 11r18r00         [12]  325 	ld	de, #_PRN_PKT_STATUS
    00000107 CDr49r00         [24]  326 	call	_printer_send_command
    0000010A D1               [12]  327 	pop	de
    0000010B 4F               [ 4]  328 	ld	c, a
    0000010C F8 00            [12]  329 	ldhl	sp,	#0
    0000010E A6               [ 8]  330 	and	a, (hl)
    0000010F 47               [ 4]  331 	ld	b, a
    00000110 F8 03            [12]  332 	ldhl	sp,	#3
    00000112 7E               [ 8]  333 	ld	a, (hl)
    00000113 90               [ 4]  334 	sub	a, b
    00000114 28 2C            [12]  335 	jr	Z, 00109$
                                    336 ;src/gbprinter.c:82: if (printer_check_cancel()) {
    00000116 C5               [16]  337 	push	bc
    00000117 D5               [16]  338 	push	de
    00000118 CDr00r00         [24]  339 	call	_printer_check_cancel
    0000011B 6F               [ 4]  340 	ld	l, a
                                    341 ;	spillPairReg hl
                                    342 ;	spillPairReg hl
    0000011C D1               [12]  343 	pop	de
    0000011D C1               [12]  344 	pop	bc
    0000011E CB 45            [ 8]  345 	bit	0, l
    00000120 28 0C            [12]  346 	jr	Z, 00102$
                                    347 ;src/gbprinter.c:83: PRINTER_SEND_COMMAND(PRN_PKT_CANCEL);
    00000122 3E 0A            [ 8]  348 	ld	a, #0x0a
    00000124 11r2Cr00         [12]  349 	ld	de, #_PRN_PKT_CANCEL
    00000127 CDr49r00         [24]  350 	call	_printer_send_command
                                    351 ;src/gbprinter.c:84: return PRN_STATUS_CANCELLED;
    0000012A 3E 40            [ 8]  352 	ld	a, #0x40
    0000012C 18 15            [12]  353 	jr	00110$
    0000012E                        354 00102$:
                                    355 ;src/gbprinter.c:86: if (timeout-- == 0) return PRN_STATUS_MASK_ERRORS;
    0000012E 7B               [ 4]  356 	ld	a, e
    0000012F 42               [ 4]  357 	ld	b, d
    00000130 1B               [ 8]  358 	dec	de
    00000131 B0               [ 4]  359 	or	a, b
    00000132 20 04            [12]  360 	jr	NZ, 00104$
    00000134 3E F0            [ 8]  361 	ld	a, #0xf0
    00000136 18 0B            [12]  362 	jr	00110$
    00000138                        363 00104$:
                                    364 ;src/gbprinter.c:87: if (error & PRN_STATUS_MASK_ERRORS) break;
    00000138 79               [ 4]  365 	ld	a, c
    00000139 E6 F0            [ 8]  366 	and	a, #0xf0
    0000013B 20 05            [12]  367 	jr	NZ, 00109$
                                    368 ;src/gbprinter.c:88: vsync();
    0000013D CDr00r00         [24]  369 	call	_vsync
    00000140 18 BF            [12]  370 	jr	00107$
    00000142                        371 00109$:
                                    372 ;src/gbprinter.c:90: return error;
    00000142 79               [ 4]  373 	ld	a, c
    00000143                        374 00110$:
                                    375 ;src/gbprinter.c:91: }
    00000143 33               [ 8]  376 	inc	sp
    00000144 E1               [12]  377 	pop	hl
    00000145 33               [ 8]  378 	inc	sp
    00000146 E9               [ 4]  379 	jp	(hl)
                                    380 ;src/gbprinter.c:93: uint8_t gbprinter_detect(uint8_t delay) {
                                    381 ;	---------------------------------
                                    382 ; Function gbprinter_detect
                                    383 ; ---------------------------------
    00000147                        384 _gbprinter_detect::
    00000147 5F               [ 4]  385 	ld	e, a
                                    386 ;src/gbprinter.c:73: printer_tile_num = 0;
    00000148 21r02r00         [12]  387 	ld	hl, #_printer_tile_num
    0000014B 36 00            [12]  388 	ld	(hl), #0x00
                                    389 ;src/gbprinter.c:74: PRINTER_SEND_COMMAND(PRN_PKT_INIT);
    0000014D D5               [16]  390 	push	de
    0000014E 3E 0A            [ 8]  391 	ld	a, #0x0a
    00000150 11r0Er00         [12]  392 	ld	de, #_PRN_PKT_INIT
    00000153 CDr49r00         [24]  393 	call	_printer_send_command
    00000156 D1               [12]  394 	pop	de
                                    395 ;src/gbprinter.c:95: return printer_wait(delay, PRN_STATUS_MASK_ANY, PRN_STATUS_OK);
    00000157 AF               [ 4]  396 	xor	a, a
    00000158 57               [ 4]  397 	ld	d, a
    00000159 F5               [16]  398 	push	af
    0000015A 33               [ 8]  399 	inc	sp
    0000015B 3E FF            [ 8]  400 	ld	a, #0xff
    0000015D CDrFDr00         [24]  401 	call	_printer_wait
                                    402 ;src/gbprinter.c:96: }
    00000160 C9               [16]  403 	ret
                                    404 ;src/gbprinter.c:98: uint8_t gbprinter_print_image(const uint8_t * image_map, const uint8_t * image, int8_t pos_x, uint8_t width, uint8_t height) {
                                    405 ;	---------------------------------
                                    406 ; Function gbprinter_print_image
                                    407 ; ---------------------------------
    00000161                        408 _gbprinter_print_image::
    00000161 E8 DF            [16]  409 	add	sp, #-33
    00000163 F8 1B            [12]  410 	ldhl	sp,	#27
    00000165 7B               [ 4]  411 	ld	a, e
    00000166 22               [ 8]  412 	ld	(hl+), a
    00000167 72               [ 8]  413 	ld	(hl), d
    00000168 F8 19            [12]  414 	ldhl	sp,	#25
    0000016A 79               [ 4]  415 	ld	a, c
    0000016B 22               [ 8]  416 	ld	(hl+), a
    0000016C 70               [ 8]  417 	ld	(hl), b
                                    418 ;src/gbprinter.c:102: uint8_t tile_data[16], rows = (((height + 1) >> 1) << 1), pkt_count = 0;
    0000016D F8 25            [12]  419 	ldhl	sp,	#37
    0000016F 4E               [ 8]  420 	ld	c, (hl)
    00000170 AF               [ 4]  421 	xor	a, a
    00000171 47               [ 4]  422 	ld	b, a
    00000172 03               [ 8]  423 	inc	bc
    00000173 CB 28            [ 8]  424 	sra	b
    00000175 CB 19            [ 8]  425 	rr	c
    00000177 79               [ 4]  426 	ld	a, c
    00000178 87               [ 4]  427 	add	a, a
    00000179 F8 12            [12]  428 	ldhl	sp,	#18
    0000017B 77               [ 8]  429 	ld	(hl), a
    0000017C F8 1D            [12]  430 	ldhl	sp,	#29
    0000017E 36 00            [12]  431 	ld	(hl), #0x00
                                    432 ;src/gbprinter.c:104: if ((rows >> 1) == 0) return PRN_STATUS_OK;
    00000180 F8 12            [12]  433 	ldhl	sp,	#18
    00000182 7E               [ 8]  434 	ld	a, (hl)
    00000183 CB 3F            [ 8]  435 	srl	a
    00000185 F8 20            [12]  436 	ldhl	sp,	#32
    00000187 77               [ 8]  437 	ld	(hl), a
    00000188 B7               [ 4]  438 	or	a, a
    00000189 20 04            [12]  439 	jr	NZ, 00102$
    0000018B AF               [ 4]  440 	xor	a, a
    0000018C C3rD4r03         [16]  441 	jp	00138$
    0000018F                        442 00102$:
                                    443 ;src/gbprinter.c:106: img = image;
    0000018F F8 19            [12]  444 	ldhl	sp,	#25
    00000191 7E               [ 8]  445 	ld	a, (hl)
    00000192 EAr05r00         [16]  446 	ld	(#_gbprinter_print_image_img_10000_177),a
    00000195 F8 1A            [12]  447 	ldhl	sp,	#26
    00000197 7E               [ 8]  448 	ld	a, (hl)
    00000198 EAr06r00         [16]  449 	ld	(#_gbprinter_print_image_img_10000_177 + 1),a
                                    450 ;src/gbprinter.c:108: printer_tile_num = 0;
    0000019B 21r02r00         [12]  451 	ld	hl, #_printer_tile_num
    0000019E 36 00            [12]  452 	ld	(hl), #0x00
                                    453 ;src/gbprinter.c:110: for (uint8_t y = 0; y != rows; y++) {
    000001A0 F8 1E            [12]  454 	ldhl	sp,	#30
    000001A2 36 00            [12]  455 	ld	(hl), #0x00
    000001A4                        456 00136$:
    000001A4 F8 12            [12]  457 	ldhl	sp,	#18
    000001A6 7E               [ 8]  458 	ld	a, (hl)
    000001A7 F8 1E            [12]  459 	ldhl	sp,	#30
    000001A9 96               [ 8]  460 	sub	a, (hl)
    000001AA CAr6Dr03         [16]  461 	jp	Z,00123$
                                    462 ;src/gbprinter.c:111: for (int16_t x = 0; x != PRN_TILE_WIDTH; x++) {
    000001AD F8 1E            [12]  463 	ldhl	sp,	#30
    000001AF 7E               [ 8]  464 	ld	a, (hl)
    000001B0 F8 25            [12]  465 	ldhl	sp,	#37
    000001B2 96               [ 8]  466 	sub	a, (hl)
    000001B3 3E 00            [ 8]  467 	ld	a, #0x00
    000001B5 17               [ 4]  468 	rla
    000001B6 F8 13            [12]  469 	ldhl	sp,	#19
    000001B8 77               [ 8]  470 	ld	(hl), a
    000001B9 F8 24            [12]  471 	ldhl	sp,	#36
    000001BB 5E               [ 8]  472 	ld	e, (hl)
    000001BC F8 1E            [12]  473 	ldhl	sp,	#30
    000001BE 7E               [ 8]  474 	ld	a, (hl)
    000001BF CDr00r00         [24]  475 	call	__muluchar
    000001C2 F8 14            [12]  476 	ldhl	sp,	#20
    000001C4 79               [ 4]  477 	ld	a, c
    000001C5 22               [ 8]  478 	ld	(hl+), a
    000001C6 70               [ 8]  479 	ld	(hl), b
    000001C7 AF               [ 4]  480 	xor	a, a
    000001C8 F8 1F            [12]  481 	ldhl	sp,	#31
    000001CA 22               [ 8]  482 	ld	(hl+), a
    000001CB 77               [ 8]  483 	ld	(hl), a
    000001CC                        484 00133$:
    000001CC F8 1F            [12]  485 	ldhl	sp,	#31
    000001CE 7E               [ 8]  486 	ld	a, (hl)
    000001CF F8 00            [12]  487 	ldhl	sp,	#0
    000001D1 77               [ 8]  488 	ld	(hl), a
    000001D2 F8 20            [12]  489 	ldhl	sp,	#32
    000001D4 7E               [ 8]  490 	ld	a, (hl)
    000001D5 F8 01            [12]  491 	ldhl	sp,	#1
    000001D7 32               [ 8]  492 	ld	(hl-), a
    000001D8 2A               [ 8]  493 	ld	a, (hl+)
    000001D9 D6 14            [ 8]  494 	sub	a, #0x14
    000001DB B6               [ 8]  495 	or	a, (hl)
    000001DC CAr67r03         [16]  496 	jp	Z,00137$
                                    497 ;src/gbprinter.c:113: if ((y < height) && (x >= pos_x) && (x < (pos_x + width))) {
    000001DF F8 13            [12]  498 	ldhl	sp,	#19
    000001E1 7E               [ 8]  499 	ld	a, (hl)
    000001E2 B7               [ 4]  500 	or	a, a
    000001E3 CAr78r02         [16]  501 	jp	Z, 00104$
    000001E6 F8 23            [12]  502 	ldhl	sp,	#35
    000001E8 7E               [ 8]  503 	ld	a, (hl)
    000001E9 4F               [ 4]  504 	ld	c, a
    000001EA 07               [ 4]  505 	rlca
    000001EB 9F               [ 4]  506 	sbc	a, a
    000001EC 47               [ 4]  507 	ld	b, a
    000001ED F8 1F            [12]  508 	ldhl	sp,	#31
    000001EF 2A               [ 8]  509 	ld	a, (hl+)
    000001F0 91               [ 4]  510 	sub	a, c
    000001F1 7E               [ 8]  511 	ld	a, (hl)
    000001F2 98               [ 4]  512 	sbc	a, b
    000001F3 56               [ 8]  513 	ld	d, (hl)
    000001F4 78               [ 4]  514 	ld	a, b
    000001F5 CB 7F            [ 8]  515 	bit	7,a
    000001F7 28 07            [12]  516 	jr	Z, 00277$
    000001F9 CB 7A            [ 8]  517 	bit	7, d
    000001FB 20 08            [12]  518 	jr	NZ, 00278$
    000001FD BF               [ 4]  519 	cp	a, a
    000001FE 18 05            [12]  520 	jr	00278$
    00000200                        521 00277$:
    00000200 CB 7A            [ 8]  522 	bit	7, d
    00000202 28 01            [12]  523 	jr	Z, 00278$
    00000204 37               [ 4]  524 	scf
    00000205                        525 00278$:
    00000205 38 71            [12]  526 	jr	C, 00104$
    00000207 F8 23            [12]  527 	ldhl	sp,	#35
    00000209 7E               [ 8]  528 	ld	a, (hl)
    0000020A F8 17            [12]  529 	ldhl	sp,	#23
    0000020C 22               [ 8]  530 	ld	(hl+), a
    0000020D 07               [ 4]  531 	rlca
    0000020E 9F               [ 4]  532 	sbc	a, a
    0000020F 77               [ 8]  533 	ld	(hl), a
    00000210 F8 24            [12]  534 	ldhl	sp,	#36
    00000212 4E               [ 8]  535 	ld	c, (hl)
    00000213 06 00            [ 8]  536 	ld	b, #0x00
    00000215 F8 17            [12]  537 	ldhl	sp,	#23
    00000217 2A               [ 8]  538 	ld	a,	(hl+)
    00000218 66               [ 8]  539 	ld	h, (hl)
    00000219 6F               [ 4]  540 	ld	l, a
    0000021A 09               [ 8]  541 	add	hl, bc
    0000021B 4D               [ 4]  542 	ld	c, l
    0000021C 44               [ 4]  543 	ld	b, h
    0000021D F8 00            [12]  544 	ldhl	sp,	#0
    0000021F 2A               [ 8]  545 	ld	a, (hl+)
    00000220 91               [ 4]  546 	sub	a, c
    00000221 7E               [ 8]  547 	ld	a, (hl)
    00000222 98               [ 4]  548 	sbc	a, b
    00000223 56               [ 8]  549 	ld	d, (hl)
    00000224 78               [ 4]  550 	ld	a, b
    00000225 CB 7F            [ 8]  551 	bit	7,a
    00000227 28 07            [12]  552 	jr	Z, 00279$
    00000229 CB 7A            [ 8]  553 	bit	7, d
    0000022B 20 08            [12]  554 	jr	NZ, 00280$
    0000022D BF               [ 4]  555 	cp	a, a
    0000022E 18 05            [12]  556 	jr	00280$
    00000230                        557 00279$:
    00000230 CB 7A            [ 8]  558 	bit	7, d
    00000232 28 01            [12]  559 	jr	Z, 00280$
    00000234 37               [ 4]  560 	scf
    00000235                        561 00280$:
    00000235 30 41            [12]  562 	jr	NC, 00104$
                                    563 ;src/gbprinter.c:114: uint8_t tile = image_map[(y * width) + (x - pos_x)];
    00000237 D1               [12]  564 	pop	de
    00000238 D5               [16]  565 	push	de
    00000239 F8 17            [12]  566 	ldhl	sp,	#23
    0000023B 2A               [ 8]  567 	ld	a,	(hl+)
    0000023C 66               [ 8]  568 	ld	h, (hl)
    0000023D 6F               [ 4]  569 	ld	l, a
    0000023E 7B               [ 4]  570 	ld	a, e
    0000023F 95               [ 4]  571 	sub	a, l
    00000240 5F               [ 4]  572 	ld	e, a
    00000241 7A               [ 4]  573 	ld	a, d
    00000242 9C               [ 4]  574 	sbc	a, h
    00000243 47               [ 4]  575 	ld	b, a
    00000244 4B               [ 4]  576 	ld	c, e
    00000245 F8 14            [12]  577 	ldhl	sp,	#20
    00000247 2A               [ 8]  578 	ld	a,	(hl+)
    00000248 66               [ 8]  579 	ld	h, (hl)
    00000249 6F               [ 4]  580 	ld	l, a
    0000024A 09               [ 8]  581 	add	hl, bc
    0000024B 4D               [ 4]  582 	ld	c, l
    0000024C 44               [ 4]  583 	ld	b, h
    0000024D F8 1B            [12]  584 	ldhl	sp,	#27
    0000024F 2A               [ 8]  585 	ld	a,	(hl+)
    00000250 66               [ 8]  586 	ld	h, (hl)
    00000251 6F               [ 4]  587 	ld	l, a
    00000252 09               [ 8]  588 	add	hl, bc
    00000253 4D               [ 4]  589 	ld	c, l
    00000254 44               [ 4]  590 	ld	b, h
    00000255 0A               [ 8]  591 	ld	a, (bc)
    00000256 6F               [ 4]  592 	ld	l, a
                                    593 ;	spillPairReg hl
                                    594 ;	spillPairReg hl
                                    595 ;src/gbprinter.c:115: memcpy(tile_data, img + ((uint16_t)tile << 4), sizeof(tile_data));
    00000257 26 00            [ 8]  596 	ld	h, #0x00
                                    597 ;	spillPairReg hl
                                    598 ;	spillPairReg hl
    00000259 29               [ 8]  599 	add	hl, hl
    0000025A 29               [ 8]  600 	add	hl, hl
    0000025B 29               [ 8]  601 	add	hl, hl
    0000025C 29               [ 8]  602 	add	hl, hl
    0000025D 4D               [ 4]  603 	ld	c, l
    0000025E 44               [ 4]  604 	ld	b, h
    0000025F 79               [ 4]  605 	ld	a, c
    00000260 21r05r00         [12]  606 	ld	hl, #_gbprinter_print_image_img_10000_177
    00000263 86               [ 8]  607 	add	a, (hl)
    00000264 23               [ 8]  608 	inc	hl
    00000265 4F               [ 4]  609 	ld	c, a
    00000266 78               [ 4]  610 	ld	a, b
    00000267 8E               [ 8]  611 	adc	a, (hl)
    00000268 47               [ 4]  612 	ld	b, a
    00000269 11 10 00         [12]  613 	ld	de, #0x0010
    0000026C D5               [16]  614 	push	de
    0000026D 21 04 00         [12]  615 	ld	hl, #4
    00000270 39               [ 8]  616 	add	hl, sp
    00000271 5D               [ 4]  617 	ld	e, l
    00000272 54               [ 4]  618 	ld	d, h
    00000273 CDr00r00         [24]  619 	call	_memcpy
    00000276 18 12            [12]  620 	jr	00105$
    00000278                        621 00104$:
                                    622 ;src/gbprinter.c:117: memset(tile_data, 0, sizeof(tile_data));
    00000278 21 02 00         [12]  623 	ld	hl, #2
    0000027B 39               [ 8]  624 	add	hl, sp
    0000027C 11 10 00         [12]  625 	ld	de, #0x0010
    0000027F D5               [16]  626 	push	de
    00000280 11 00 00         [12]  627 	ld	de, #0x0000
    00000283 D5               [16]  628 	push	de
    00000284 E5               [16]  629 	push	hl
    00000285 CDr00r00         [24]  630 	call	_memset
    00000288 E8 06            [16]  631 	add	sp, #6
    0000028A                        632 00105$:
                                    633 ;src/gbprinter.c:120: if (printer_print_tile(tile_data)) {
    0000028A 21 02 00         [12]  634 	ld	hl, #2
    0000028D 39               [ 8]  635 	add	hl, sp
    0000028E 5D               [ 4]  636 	ld	e, l
    0000028F 54               [ 4]  637 	ld	d, h
    00000290 CDr6Cr00         [24]  638 	call	_printer_print_tile
    00000293 B7               [ 4]  639 	or	a, a
    00000294 28 17            [12]  640 	jr	Z, 00111$
                                    641 ;src/gbprinter.c:121: pkt_count++;
    00000296 F8 1D            [12]  642 	ldhl	sp,	#29
    00000298 34               [12]  643 	inc	(hl)
                                    644 ;src/gbprinter.c:122: if (printer_check_cancel()) {
    00000299 CDr00r00         [24]  645 	call	_printer_check_cancel
    0000029C CB 47            [ 8]  646 	bit	0,a
    0000029E 28 0D            [12]  647 	jr	Z, 00111$
                                    648 ;src/gbprinter.c:123: PRINTER_SEND_COMMAND(PRN_PKT_CANCEL);
    000002A0 3E 0A            [ 8]  649 	ld	a, #0x0a
    000002A2 11r2Cr00         [12]  650 	ld	de, #_PRN_PKT_CANCEL
    000002A5 CDr49r00         [24]  651 	call	_printer_send_command
                                    652 ;src/gbprinter.c:124: return PRN_STATUS_CANCELLED;
    000002A8 3E 40            [ 8]  653 	ld	a, #0x40
    000002AA C3rD4r03         [16]  654 	jp	00138$
    000002AD                        655 00111$:
                                    656 ;src/gbprinter.c:127: if (pkt_count == 9) {
    000002AD F8 1D            [12]  657 	ldhl	sp,	#29
    000002AF 7E               [ 8]  658 	ld	a, (hl)
    000002B0 D6 09            [ 8]  659 	sub	a, #0x09
    000002B2 C2r5Cr03         [16]  660 	jp	NZ,00134$
                                    661 ;src/gbprinter.c:128: pkt_count = 0;
    000002B5 F8 1D            [12]  662 	ldhl	sp,	#29
    000002B7 36 00            [12]  663 	ld	(hl), #0x00
                                    664 ;src/gbprinter.c:129: PRINTER_SEND_COMMAND(PRN_PKT_EOF);
    000002B9 3E 0A            [ 8]  665 	ld	a, #0x0a
    000002BB 11r22r00         [12]  666 	ld	de, #_PRN_PKT_EOF
    000002BE CDr49r00         [24]  667 	call	_printer_send_command
                                    668 ;src/gbprinter.c:131: gbprinter_set_print_params((y == (rows - 1)) ? PRN_FINAL_MARGIN : PRN_NO_MARGINS, PRN_PALETTE_NORMAL, PRN_EXPOSURE_DARK);
    000002C1 F8 12            [12]  669 	ldhl	sp,	#18
    000002C3 4E               [ 8]  670 	ld	c, (hl)
    000002C4 AF               [ 4]  671 	xor	a, a
    000002C5 47               [ 4]  672 	ld	b, a
    000002C6 0B               [ 8]  673 	dec	bc
    000002C7 F8 1E            [12]  674 	ldhl	sp,	#30
    000002C9 5E               [ 8]  675 	ld	e, (hl)
    000002CA 16 00            [ 8]  676 	ld	d, #0x00
    000002CC 7B               [ 4]  677 	ld	a, e
    000002CD 91               [ 4]  678 	sub	a, c
    000002CE 20 06            [12]  679 	jr	NZ, 00283$
    000002D0 7A               [ 4]  680 	ld	a, d
    000002D1 90               [ 4]  681 	sub	a, b
    000002D2 3E 01            [ 8]  682 	ld	a, #0x01
    000002D4 28 01            [12]  683 	jr	Z, 00284$
    000002D6                        684 00283$:
    000002D6 AF               [ 4]  685 	xor	a, a
    000002D7                        686 00284$:
    000002D7 F8 16            [12]  687 	ldhl	sp,	#22
    000002D9 77               [ 8]  688 	ld	(hl), a
    000002DA B7               [ 4]  689 	or	a, a
    000002DB 0E 03            [ 8]  690 	ld	c, #0x03
    000002DD 20 02            [12]  691 	jr	NZ, 00141$
    000002DF 0E 00            [ 8]  692 	ld	c, #0x00
    000002E1                        693 00141$:
                                    694 ;src/gbprinter.h:138: PRN_PKT_START.crc = ((PRN_CMD_PRINT + 0x04u + 0x01u) + (PRN_PKT_START.margins = margins) + (PRN_PKT_START.palette = palette) + (PRN_PKT_START.exposure = exposure));
    000002E1 21r07r00         [12]  695 	ld	hl, #(_PRN_PKT_START + 7)
    000002E4 71               [ 8]  696 	ld	(hl), c
    000002E5 06 00            [ 8]  697 	ld	b, #0x00
    000002E7 21r08r00         [12]  698 	ld	hl, #_PRN_PKT_START + 8
    000002EA 36 E4            [12]  699 	ld	(hl), #0xe4
    000002EC 21r09r00         [12]  700 	ld	hl, #_PRN_PKT_START + 9
    000002EF 36 7F            [12]  701 	ld	(hl), #0x7f
    000002F1 21 6A 01         [12]  702 	ld	hl, #0x016a
    000002F4 09               [ 8]  703 	add	hl, bc
    000002F5 4D               [ 4]  704 	ld	c, l
    000002F6 7C               [ 4]  705 	ld	a, h
    000002F7 F8 17            [12]  706 	ldhl	sp,	#23
    000002F9 71               [ 8]  707 	ld	(hl), c
    000002FA 23               [ 8]  708 	inc	hl
    000002FB 32               [ 8]  709 	ld	(hl-), a
    000002FC 11r0Ar00         [12]  710 	ld	de, #(_PRN_PKT_START + 10)
    000002FF 2A               [ 8]  711 	ld	a, (hl+)
    00000300 12               [ 8]  712 	ld	(de), a
    00000301 13               [ 8]  713 	inc	de
    00000302 7E               [ 8]  714 	ld	a, (hl)
    00000303 12               [ 8]  715 	ld	(de), a
                                    716 ;src/gbprinter.c:132: PRINTER_SEND_COMMAND(PRN_PKT_START);
    00000304 3E 0E            [ 8]  717 	ld	a, #0x0e
    00000306 11r00r00         [12]  718 	ld	de, #_PRN_PKT_START
    00000309 CDr49r00         [24]  719 	call	_printer_send_command
                                    720 ;src/gbprinter.c:134: if ((error = printer_wait(PRN_BUSY_TIMEOUT, PRN_STATUS_BUSY, PRN_STATUS_BUSY)) & PRN_STATUS_MASK_ERRORS) return error;
    0000030C 3E 02            [ 8]  721 	ld	a, #0x02
    0000030E F5               [16]  722 	push	af
    0000030F 33               [ 8]  723 	inc	sp
    00000310 3E 02            [ 8]  724 	ld	a, #0x02
    00000312 11 78 00         [12]  725 	ld	de, #0x0078
    00000315 CDrFDr00         [24]  726 	call	_printer_wait
    00000318 EAr07r00         [16]  727 	ld	(#_gbprinter_print_image_error_10000_177),a
    0000031B E6 F0            [ 8]  728 	and	a, #0xf0
    0000031D 28 06            [12]  729 	jr	Z, 00113$
    0000031F FAr07r00         [16]  730 	ld	a, (#_gbprinter_print_image_error_10000_177)
    00000322 C3rD4r03         [16]  731 	jp	00138$
    00000325                        732 00113$:
                                    733 ;src/gbprinter.c:135: if ((error = printer_wait(PRN_COMPLETION_TIMEOUT, PRN_STATUS_BUSY, 0)) & PRN_STATUS_MASK_ERRORS) return error;
    00000325 AF               [ 4]  734 	xor	a, a
    00000326 F5               [16]  735 	push	af
    00000327 33               [ 8]  736 	inc	sp
    00000328 3E 02            [ 8]  737 	ld	a, #0x02
    0000032A 11 B0 04         [12]  738 	ld	de, #0x04b0
    0000032D CDrFDr00         [24]  739 	call	_printer_wait
    00000330 EAr07r00         [16]  740 	ld	(#_gbprinter_print_image_error_10000_177),a
    00000333 E6 F0            [ 8]  741 	and	a, #0xf0
    00000335 28 06            [12]  742 	jr	Z, 00115$
    00000337 FAr07r00         [16]  743 	ld	a, (#_gbprinter_print_image_error_10000_177)
    0000033A C3rD4r03         [16]  744 	jp	00138$
    0000033D                        745 00115$:
                                    746 ;src/gbprinter.c:138: if (y != (rows - 1)) {
    0000033D F8 16            [12]  747 	ldhl	sp,	#22
    0000033F CB 46            [12]  748 	bit	0, (hl)
    00000341 20 19            [12]  749 	jr	NZ, 00134$
                                    750 ;src/gbprinter.c:139: PRINTER_SEND_COMMAND(PRN_PKT_INIT);
    00000343 3E 0A            [ 8]  751 	ld	a, #0x0a
    00000345 11r0Er00         [12]  752 	ld	de, #_PRN_PKT_INIT
    00000348 CDr49r00         [24]  753 	call	_printer_send_command
                                    754 ;src/gbprinter.c:140: if (error = printer_wait(PRN_SEIKO_RESET_TIMEOUT, PRN_STATUS_MASK_ANY, PRN_STATUS_OK)) return error;
    0000034B AF               [ 4]  755 	xor	a, a
    0000034C F5               [16]  756 	push	af
    0000034D 33               [ 8]  757 	inc	sp
    0000034E 3E FF            [ 8]  758 	ld	a, #0xff
    00000350 11 0A 00         [12]  759 	ld	de, #0x000a
    00000353 CDrFDr00         [24]  760 	call	_printer_wait
    00000356 EAr07r00         [16]  761 	ld	(#_gbprinter_print_image_error_10000_177),a
    00000359 B7               [ 4]  762 	or	a,a
    0000035A 20 78            [12]  763 	jr	NZ, 00138$
    0000035C                        764 00134$:
                                    765 ;src/gbprinter.c:111: for (int16_t x = 0; x != PRN_TILE_WIDTH; x++) {
    0000035C F8 1F            [12]  766 	ldhl	sp,	#31
    0000035E 34               [12]  767 	inc	(hl)
    0000035F C2rCCr01         [16]  768 	jp	NZ,00133$
    00000362 23               [ 8]  769 	inc	hl
    00000363 34               [12]  770 	inc	(hl)
    00000364 C3rCCr01         [16]  771 	jp	00133$
    00000367                        772 00137$:
                                    773 ;src/gbprinter.c:110: for (uint8_t y = 0; y != rows; y++) {
    00000367 F8 1E            [12]  774 	ldhl	sp,	#30
    00000369 34               [12]  775 	inc	(hl)
    0000036A C3rA4r01         [16]  776 	jp	00136$
    0000036D                        777 00123$:
                                    778 ;src/gbprinter.c:146: if (pkt_count) {
    0000036D F8 1D            [12]  779 	ldhl	sp,	#29
    0000036F 7E               [ 8]  780 	ld	a, (hl)
    00000370 B7               [ 4]  781 	or	a, a
    00000371 28 56            [12]  782 	jr	Z, 00129$
                                    783 ;src/gbprinter.c:147: PRINTER_SEND_COMMAND(PRN_PKT_EOF);
    00000373 3E 0A            [ 8]  784 	ld	a, #0x0a
    00000375 11r22r00         [12]  785 	ld	de, #_PRN_PKT_EOF
    00000378 CDr49r00         [24]  786 	call	_printer_send_command
                                    787 ;src/gbprinter.h:138: PRN_PKT_START.crc = ((PRN_CMD_PRINT + 0x04u + 0x01u) + (PRN_PKT_START.margins = margins) + (PRN_PKT_START.palette = palette) + (PRN_PKT_START.exposure = exposure));
    0000037B 21r07r00         [12]  788 	ld	hl, #_PRN_PKT_START + 7
    0000037E 36 03            [12]  789 	ld	(hl), #0x03
    00000380 21r08r00         [12]  790 	ld	hl, #_PRN_PKT_START + 8
    00000383 36 E4            [12]  791 	ld	(hl), #0xe4
    00000385 21r09r00         [12]  792 	ld	hl, #_PRN_PKT_START + 9
    00000388 36 7F            [12]  793 	ld	(hl), #0x7f
    0000038A 21r0Ar00         [12]  794 	ld	hl, #(_PRN_PKT_START + 10)
    0000038D 3E 6D            [ 8]  795 	ld	a, #0x6d
    0000038F 22               [ 8]  796 	ld	(hl+), a
    00000390 36 01            [12]  797 	ld	(hl), #0x01
                                    798 ;src/gbprinter.c:150: PRINTER_SEND_COMMAND(PRN_PKT_START);
    00000392 3E 0E            [ 8]  799 	ld	a, #0x0e
    00000394 11r00r00         [12]  800 	ld	de, #_PRN_PKT_START
    00000397 CDr49r00         [24]  801 	call	_printer_send_command
                                    802 ;src/gbprinter.c:152: if ((error = printer_wait(PRN_BUSY_TIMEOUT, PRN_STATUS_BUSY, PRN_STATUS_BUSY)) & PRN_STATUS_MASK_ERRORS) return error;
    0000039A 3E 02            [ 8]  803 	ld	a, #0x02
    0000039C F5               [16]  804 	push	af
    0000039D 33               [ 8]  805 	inc	sp
    0000039E 3E 02            [ 8]  806 	ld	a, #0x02
    000003A0 11 78 00         [12]  807 	ld	de, #0x0078
    000003A3 CDrFDr00         [24]  808 	call	_printer_wait
    000003A6 EAr07r00         [16]  809 	ld	(#_gbprinter_print_image_error_10000_177),a
    000003A9 E6 F0            [ 8]  810 	and	a, #0xf0
    000003AB 28 05            [12]  811 	jr	Z, 00125$
    000003AD FAr07r00         [16]  812 	ld	a, (#_gbprinter_print_image_error_10000_177)
    000003B0 18 22            [12]  813 	jr	00138$
    000003B2                        814 00125$:
                                    815 ;src/gbprinter.c:153: if ((error = printer_wait(PRN_COMPLETION_TIMEOUT, PRN_STATUS_BUSY, 0)) & PRN_STATUS_MASK_ERRORS) return error;
    000003B2 AF               [ 4]  816 	xor	a, a
    000003B3 F5               [16]  817 	push	af
    000003B4 33               [ 8]  818 	inc	sp
    000003B5 3E 02            [ 8]  819 	ld	a, #0x02
    000003B7 11 B0 04         [12]  820 	ld	de, #0x04b0
    000003BA CDrFDr00         [24]  821 	call	_printer_wait
    000003BD EAr07r00         [16]  822 	ld	(#_gbprinter_print_image_error_10000_177),a
    000003C0 E6 F0            [ 8]  823 	and	a, #0xf0
    000003C2 28 05            [12]  824 	jr	Z, 00129$
    000003C4 FAr07r00         [16]  825 	ld	a, (#_gbprinter_print_image_error_10000_177)
    000003C7 18 0B            [12]  826 	jr	00138$
    000003C9                        827 00129$:
                                    828 ;src/gbprinter.c:155: return PRINTER_SEND_COMMAND(PRN_PKT_STATUS);
    000003C9 3E 0A            [ 8]  829 	ld	a, #0x0a
    000003CB 11r18r00         [12]  830 	ld	de, #_PRN_PKT_STATUS
    000003CE CDr49r00         [24]  831 	call	_printer_send_command
    000003D1 F8 20            [12]  832 	ldhl	sp,#32
    000003D3 77               [ 8]  833 	ld	(hl), a
    000003D4                        834 00138$:
                                    835 ;src/gbprinter.c:156: }
    000003D4 E8 21            [16]  836 	add	sp, #33
    000003D6 E1               [12]  837 	pop	hl
    000003D7 E8 03            [16]  838 	add	sp, #3
    000003D9 E9               [ 4]  839 	jp	(hl)
                                    840 	.area _CODE
                                    841 	.area _INITIALIZER
    00000000                        842 __xinit__PRN_PKT_START:
    00000000 88 33                  843 	.dw #0x3388
    00000002 02 00                  844 	.dw #0x0002
    00000004 04 00                  845 	.dw #0x0004
    00000006 01                     846 	.db #0x01	; 1
    00000007 00                     847 	.db #0x00	; 0
    00000008 E4                     848 	.db #0xe4	; 228
    00000009 7F                     849 	.db #0x7f	; 127
    0000000A 00 00                  850 	.dw #0x0000
    0000000C 00 00                  851 	.dw #0x0000
                                    852 	.area _CABS (ABS)
